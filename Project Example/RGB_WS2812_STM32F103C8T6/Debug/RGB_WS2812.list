
RGB_WS2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000993c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08009a48  08009a48  00019a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ccc  08009ccc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08009ccc  08009ccc  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009ccc  08009ccc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ccc  08009ccc  00019ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cd0  08009cd0  00019cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001248  200001e8  08009ebc  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001430  08009ebc  00021430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012902  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003417  00000000  00000000  00032b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00035f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f10  00000000  00000000  00036fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019462  00000000  00000000  00037ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001494b  00000000  00000000  0005135a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da7f  00000000  00000000  00065ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3724  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048ec  00000000  00000000  000f3774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	08009a30 	.word	0x08009a30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	08009a30 	.word	0x08009a30

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	; 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_frsub>:
 80004d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__addsf3>
 80004da:	bf00      	nop

080004dc <__aeabi_fsub>:
 80004dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080004e0 <__addsf3>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	bf1f      	itttt	ne
 80004e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004e8:	ea92 0f03 	teqne	r2, r3
 80004ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80004f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004f4:	d06a      	beq.n	80005cc <__addsf3+0xec>
 80004f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80004fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80004fe:	bfc1      	itttt	gt
 8000500:	18d2      	addgt	r2, r2, r3
 8000502:	4041      	eorgt	r1, r0
 8000504:	4048      	eorgt	r0, r1
 8000506:	4041      	eorgt	r1, r0
 8000508:	bfb8      	it	lt
 800050a:	425b      	neglt	r3, r3
 800050c:	2b19      	cmp	r3, #25
 800050e:	bf88      	it	hi
 8000510:	4770      	bxhi	lr
 8000512:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000516:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800051a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800051e:	bf18      	it	ne
 8000520:	4240      	negne	r0, r0
 8000522:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000526:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800052a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800052e:	bf18      	it	ne
 8000530:	4249      	negne	r1, r1
 8000532:	ea92 0f03 	teq	r2, r3
 8000536:	d03f      	beq.n	80005b8 <__addsf3+0xd8>
 8000538:	f1a2 0201 	sub.w	r2, r2, #1
 800053c:	fa41 fc03 	asr.w	ip, r1, r3
 8000540:	eb10 000c 	adds.w	r0, r0, ip
 8000544:	f1c3 0320 	rsb	r3, r3, #32
 8000548:	fa01 f103 	lsl.w	r1, r1, r3
 800054c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000550:	d502      	bpl.n	8000558 <__addsf3+0x78>
 8000552:	4249      	negs	r1, r1
 8000554:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000558:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800055c:	d313      	bcc.n	8000586 <__addsf3+0xa6>
 800055e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000562:	d306      	bcc.n	8000572 <__addsf3+0x92>
 8000564:	0840      	lsrs	r0, r0, #1
 8000566:	ea4f 0131 	mov.w	r1, r1, rrx
 800056a:	f102 0201 	add.w	r2, r2, #1
 800056e:	2afe      	cmp	r2, #254	; 0xfe
 8000570:	d251      	bcs.n	8000616 <__addsf3+0x136>
 8000572:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000576:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800057a:	bf08      	it	eq
 800057c:	f020 0001 	biceq.w	r0, r0, #1
 8000580:	ea40 0003 	orr.w	r0, r0, r3
 8000584:	4770      	bx	lr
 8000586:	0049      	lsls	r1, r1, #1
 8000588:	eb40 0000 	adc.w	r0, r0, r0
 800058c:	3a01      	subs	r2, #1
 800058e:	bf28      	it	cs
 8000590:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000594:	d2ed      	bcs.n	8000572 <__addsf3+0x92>
 8000596:	fab0 fc80 	clz	ip, r0
 800059a:	f1ac 0c08 	sub.w	ip, ip, #8
 800059e:	ebb2 020c 	subs.w	r2, r2, ip
 80005a2:	fa00 f00c 	lsl.w	r0, r0, ip
 80005a6:	bfaa      	itet	ge
 80005a8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005ac:	4252      	neglt	r2, r2
 80005ae:	4318      	orrge	r0, r3
 80005b0:	bfbc      	itt	lt
 80005b2:	40d0      	lsrlt	r0, r2
 80005b4:	4318      	orrlt	r0, r3
 80005b6:	4770      	bx	lr
 80005b8:	f092 0f00 	teq	r2, #0
 80005bc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80005c0:	bf06      	itte	eq
 80005c2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80005c6:	3201      	addeq	r2, #1
 80005c8:	3b01      	subne	r3, #1
 80005ca:	e7b5      	b.n	8000538 <__addsf3+0x58>
 80005cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005d4:	bf18      	it	ne
 80005d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005da:	d021      	beq.n	8000620 <__addsf3+0x140>
 80005dc:	ea92 0f03 	teq	r2, r3
 80005e0:	d004      	beq.n	80005ec <__addsf3+0x10c>
 80005e2:	f092 0f00 	teq	r2, #0
 80005e6:	bf08      	it	eq
 80005e8:	4608      	moveq	r0, r1
 80005ea:	4770      	bx	lr
 80005ec:	ea90 0f01 	teq	r0, r1
 80005f0:	bf1c      	itt	ne
 80005f2:	2000      	movne	r0, #0
 80005f4:	4770      	bxne	lr
 80005f6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80005fa:	d104      	bne.n	8000606 <__addsf3+0x126>
 80005fc:	0040      	lsls	r0, r0, #1
 80005fe:	bf28      	it	cs
 8000600:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000604:	4770      	bx	lr
 8000606:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800060a:	bf3c      	itt	cc
 800060c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000610:	4770      	bxcc	lr
 8000612:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000616:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800061a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800061e:	4770      	bx	lr
 8000620:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000624:	bf16      	itet	ne
 8000626:	4608      	movne	r0, r1
 8000628:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800062c:	4601      	movne	r1, r0
 800062e:	0242      	lsls	r2, r0, #9
 8000630:	bf06      	itte	eq
 8000632:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000636:	ea90 0f01 	teqeq	r0, r1
 800063a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800063e:	4770      	bx	lr

08000640 <__aeabi_ui2f>:
 8000640:	f04f 0300 	mov.w	r3, #0
 8000644:	e004      	b.n	8000650 <__aeabi_i2f+0x8>
 8000646:	bf00      	nop

08000648 <__aeabi_i2f>:
 8000648:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	ea5f 0c00 	movs.w	ip, r0
 8000654:	bf08      	it	eq
 8000656:	4770      	bxeq	lr
 8000658:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800065c:	4601      	mov	r1, r0
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	e01c      	b.n	800069e <__aeabi_l2f+0x2a>

08000664 <__aeabi_ul2f>:
 8000664:	ea50 0201 	orrs.w	r2, r0, r1
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f04f 0300 	mov.w	r3, #0
 8000670:	e00a      	b.n	8000688 <__aeabi_l2f+0x14>
 8000672:	bf00      	nop

08000674 <__aeabi_l2f>:
 8000674:	ea50 0201 	orrs.w	r2, r0, r1
 8000678:	bf08      	it	eq
 800067a:	4770      	bxeq	lr
 800067c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000680:	d502      	bpl.n	8000688 <__aeabi_l2f+0x14>
 8000682:	4240      	negs	r0, r0
 8000684:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000688:	ea5f 0c01 	movs.w	ip, r1
 800068c:	bf02      	ittt	eq
 800068e:	4684      	moveq	ip, r0
 8000690:	4601      	moveq	r1, r0
 8000692:	2000      	moveq	r0, #0
 8000694:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000698:	bf08      	it	eq
 800069a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800069e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80006a2:	fabc f28c 	clz	r2, ip
 80006a6:	3a08      	subs	r2, #8
 80006a8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006ac:	db10      	blt.n	80006d0 <__aeabi_l2f+0x5c>
 80006ae:	fa01 fc02 	lsl.w	ip, r1, r2
 80006b2:	4463      	add	r3, ip
 80006b4:	fa00 fc02 	lsl.w	ip, r0, r2
 80006b8:	f1c2 0220 	rsb	r2, r2, #32
 80006bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006c0:	fa20 f202 	lsr.w	r2, r0, r2
 80006c4:	eb43 0002 	adc.w	r0, r3, r2
 80006c8:	bf08      	it	eq
 80006ca:	f020 0001 	biceq.w	r0, r0, #1
 80006ce:	4770      	bx	lr
 80006d0:	f102 0220 	add.w	r2, r2, #32
 80006d4:	fa01 fc02 	lsl.w	ip, r1, r2
 80006d8:	f1c2 0220 	rsb	r2, r2, #32
 80006dc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006e0:	fa21 f202 	lsr.w	r2, r1, r2
 80006e4:	eb43 0002 	adc.w	r0, r3, r2
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80006ee:	4770      	bx	lr

080006f0 <__aeabi_fmul>:
 80006f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80006f8:	bf1e      	ittt	ne
 80006fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80006fe:	ea92 0f0c 	teqne	r2, ip
 8000702:	ea93 0f0c 	teqne	r3, ip
 8000706:	d06f      	beq.n	80007e8 <__aeabi_fmul+0xf8>
 8000708:	441a      	add	r2, r3
 800070a:	ea80 0c01 	eor.w	ip, r0, r1
 800070e:	0240      	lsls	r0, r0, #9
 8000710:	bf18      	it	ne
 8000712:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000716:	d01e      	beq.n	8000756 <__aeabi_fmul+0x66>
 8000718:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800071c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000720:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000724:	fba0 3101 	umull	r3, r1, r0, r1
 8000728:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800072c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000730:	bf3e      	ittt	cc
 8000732:	0049      	lslcc	r1, r1, #1
 8000734:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000738:	005b      	lslcc	r3, r3, #1
 800073a:	ea40 0001 	orr.w	r0, r0, r1
 800073e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000742:	2afd      	cmp	r2, #253	; 0xfd
 8000744:	d81d      	bhi.n	8000782 <__aeabi_fmul+0x92>
 8000746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800074a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800074e:	bf08      	it	eq
 8000750:	f020 0001 	biceq.w	r0, r0, #1
 8000754:	4770      	bx	lr
 8000756:	f090 0f00 	teq	r0, #0
 800075a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800075e:	bf08      	it	eq
 8000760:	0249      	lsleq	r1, r1, #9
 8000762:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000766:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800076a:	3a7f      	subs	r2, #127	; 0x7f
 800076c:	bfc2      	ittt	gt
 800076e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000772:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000776:	4770      	bxgt	lr
 8000778:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800077c:	f04f 0300 	mov.w	r3, #0
 8000780:	3a01      	subs	r2, #1
 8000782:	dc5d      	bgt.n	8000840 <__aeabi_fmul+0x150>
 8000784:	f112 0f19 	cmn.w	r2, #25
 8000788:	bfdc      	itt	le
 800078a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800078e:	4770      	bxle	lr
 8000790:	f1c2 0200 	rsb	r2, r2, #0
 8000794:	0041      	lsls	r1, r0, #1
 8000796:	fa21 f102 	lsr.w	r1, r1, r2
 800079a:	f1c2 0220 	rsb	r2, r2, #32
 800079e:	fa00 fc02 	lsl.w	ip, r0, r2
 80007a2:	ea5f 0031 	movs.w	r0, r1, rrx
 80007a6:	f140 0000 	adc.w	r0, r0, #0
 80007aa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007ae:	bf08      	it	eq
 80007b0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007b4:	4770      	bx	lr
 80007b6:	f092 0f00 	teq	r2, #0
 80007ba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80007be:	bf02      	ittt	eq
 80007c0:	0040      	lsleq	r0, r0, #1
 80007c2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80007c6:	3a01      	subeq	r2, #1
 80007c8:	d0f9      	beq.n	80007be <__aeabi_fmul+0xce>
 80007ca:	ea40 000c 	orr.w	r0, r0, ip
 80007ce:	f093 0f00 	teq	r3, #0
 80007d2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007d6:	bf02      	ittt	eq
 80007d8:	0049      	lsleq	r1, r1, #1
 80007da:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80007de:	3b01      	subeq	r3, #1
 80007e0:	d0f9      	beq.n	80007d6 <__aeabi_fmul+0xe6>
 80007e2:	ea41 010c 	orr.w	r1, r1, ip
 80007e6:	e78f      	b.n	8000708 <__aeabi_fmul+0x18>
 80007e8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80007ec:	ea92 0f0c 	teq	r2, ip
 80007f0:	bf18      	it	ne
 80007f2:	ea93 0f0c 	teqne	r3, ip
 80007f6:	d00a      	beq.n	800080e <__aeabi_fmul+0x11e>
 80007f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80007fc:	bf18      	it	ne
 80007fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000802:	d1d8      	bne.n	80007b6 <__aeabi_fmul+0xc6>
 8000804:	ea80 0001 	eor.w	r0, r0, r1
 8000808:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800080c:	4770      	bx	lr
 800080e:	f090 0f00 	teq	r0, #0
 8000812:	bf17      	itett	ne
 8000814:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000818:	4608      	moveq	r0, r1
 800081a:	f091 0f00 	teqne	r1, #0
 800081e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000822:	d014      	beq.n	800084e <__aeabi_fmul+0x15e>
 8000824:	ea92 0f0c 	teq	r2, ip
 8000828:	d101      	bne.n	800082e <__aeabi_fmul+0x13e>
 800082a:	0242      	lsls	r2, r0, #9
 800082c:	d10f      	bne.n	800084e <__aeabi_fmul+0x15e>
 800082e:	ea93 0f0c 	teq	r3, ip
 8000832:	d103      	bne.n	800083c <__aeabi_fmul+0x14c>
 8000834:	024b      	lsls	r3, r1, #9
 8000836:	bf18      	it	ne
 8000838:	4608      	movne	r0, r1
 800083a:	d108      	bne.n	800084e <__aeabi_fmul+0x15e>
 800083c:	ea80 0001 	eor.w	r0, r0, r1
 8000840:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000844:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000848:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800084c:	4770      	bx	lr
 800084e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000852:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000856:	4770      	bx	lr

08000858 <__aeabi_fdiv>:
 8000858:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000860:	bf1e      	ittt	ne
 8000862:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000866:	ea92 0f0c 	teqne	r2, ip
 800086a:	ea93 0f0c 	teqne	r3, ip
 800086e:	d069      	beq.n	8000944 <__aeabi_fdiv+0xec>
 8000870:	eba2 0203 	sub.w	r2, r2, r3
 8000874:	ea80 0c01 	eor.w	ip, r0, r1
 8000878:	0249      	lsls	r1, r1, #9
 800087a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800087e:	d037      	beq.n	80008f0 <__aeabi_fdiv+0x98>
 8000880:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000884:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000888:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 800088c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000890:	428b      	cmp	r3, r1
 8000892:	bf38      	it	cc
 8000894:	005b      	lslcc	r3, r3, #1
 8000896:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800089a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800089e:	428b      	cmp	r3, r1
 80008a0:	bf24      	itt	cs
 80008a2:	1a5b      	subcs	r3, r3, r1
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008ac:	bf24      	itt	cs
 80008ae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008b2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008ba:	bf24      	itt	cs
 80008bc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008c8:	bf24      	itt	cs
 80008ca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008ce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d2:	011b      	lsls	r3, r3, #4
 80008d4:	bf18      	it	ne
 80008d6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008da:	d1e0      	bne.n	800089e <__aeabi_fdiv+0x46>
 80008dc:	2afd      	cmp	r2, #253	; 0xfd
 80008de:	f63f af50 	bhi.w	8000782 <__aeabi_fmul+0x92>
 80008e2:	428b      	cmp	r3, r1
 80008e4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008e8:	bf08      	it	eq
 80008ea:	f020 0001 	biceq.w	r0, r0, #1
 80008ee:	4770      	bx	lr
 80008f0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008f4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f8:	327f      	adds	r2, #127	; 0x7f
 80008fa:	bfc2      	ittt	gt
 80008fc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000900:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000904:	4770      	bxgt	lr
 8000906:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800090a:	f04f 0300 	mov.w	r3, #0
 800090e:	3a01      	subs	r2, #1
 8000910:	e737      	b.n	8000782 <__aeabi_fmul+0x92>
 8000912:	f092 0f00 	teq	r2, #0
 8000916:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800091a:	bf02      	ittt	eq
 800091c:	0040      	lsleq	r0, r0, #1
 800091e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000922:	3a01      	subeq	r2, #1
 8000924:	d0f9      	beq.n	800091a <__aeabi_fdiv+0xc2>
 8000926:	ea40 000c 	orr.w	r0, r0, ip
 800092a:	f093 0f00 	teq	r3, #0
 800092e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000932:	bf02      	ittt	eq
 8000934:	0049      	lsleq	r1, r1, #1
 8000936:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800093a:	3b01      	subeq	r3, #1
 800093c:	d0f9      	beq.n	8000932 <__aeabi_fdiv+0xda>
 800093e:	ea41 010c 	orr.w	r1, r1, ip
 8000942:	e795      	b.n	8000870 <__aeabi_fdiv+0x18>
 8000944:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000948:	ea92 0f0c 	teq	r2, ip
 800094c:	d108      	bne.n	8000960 <__aeabi_fdiv+0x108>
 800094e:	0242      	lsls	r2, r0, #9
 8000950:	f47f af7d 	bne.w	800084e <__aeabi_fmul+0x15e>
 8000954:	ea93 0f0c 	teq	r3, ip
 8000958:	f47f af70 	bne.w	800083c <__aeabi_fmul+0x14c>
 800095c:	4608      	mov	r0, r1
 800095e:	e776      	b.n	800084e <__aeabi_fmul+0x15e>
 8000960:	ea93 0f0c 	teq	r3, ip
 8000964:	d104      	bne.n	8000970 <__aeabi_fdiv+0x118>
 8000966:	024b      	lsls	r3, r1, #9
 8000968:	f43f af4c 	beq.w	8000804 <__aeabi_fmul+0x114>
 800096c:	4608      	mov	r0, r1
 800096e:	e76e      	b.n	800084e <__aeabi_fmul+0x15e>
 8000970:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000974:	bf18      	it	ne
 8000976:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800097a:	d1ca      	bne.n	8000912 <__aeabi_fdiv+0xba>
 800097c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000980:	f47f af5c 	bne.w	800083c <__aeabi_fmul+0x14c>
 8000984:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000988:	f47f af3c 	bne.w	8000804 <__aeabi_fmul+0x114>
 800098c:	e75f      	b.n	800084e <__aeabi_fmul+0x15e>
 800098e:	bf00      	nop

08000990 <__aeabi_f2uiz>:
 8000990:	0042      	lsls	r2, r0, #1
 8000992:	d20e      	bcs.n	80009b2 <__aeabi_f2uiz+0x22>
 8000994:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000998:	d30b      	bcc.n	80009b2 <__aeabi_f2uiz+0x22>
 800099a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800099e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009a2:	d409      	bmi.n	80009b8 <__aeabi_f2uiz+0x28>
 80009a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ac:	fa23 f002 	lsr.w	r0, r3, r2
 80009b0:	4770      	bx	lr
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	4770      	bx	lr
 80009b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009bc:	d101      	bne.n	80009c2 <__aeabi_f2uiz+0x32>
 80009be:	0242      	lsls	r2, r0, #9
 80009c0:	d102      	bne.n	80009c8 <__aeabi_f2uiz+0x38>
 80009c2:	f04f 30ff 	mov.w	r0, #4294967295
 80009c6:	4770      	bx	lr
 80009c8:	f04f 0000 	mov.w	r0, #0
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009d2:	b097      	sub	sp, #92	; 0x5c
 80009d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f000 fabb 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f8b5 	bl	8000b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f000 f95b 	bl	8000c98 <MX_GPIO_Init>
  MX_TIM2_Init();
 80009e2:	f000 f90b 	bl	8000bfc <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80009e6:	f007 fc4b 	bl	8008280 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80009ea:	484a      	ldr	r0, [pc, #296]	; (8000b14 <main+0x144>)
 80009ec:	f002 ff92 	bl	8003914 <HAL_TIM_Base_Start_IT>


  ws2812b_info_t ws2812bInfo;

  	HAL_Delay(2000); /*wait for drivers to initialize correctly*/
 80009f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009f4:	f000 fb0e 	bl	8001014 <HAL_Delay>

    ws2812b_basic_initialize(NUMBER_LED);
 80009f8:	2018      	movs	r0, #24
 80009fa:	f008 fa59 	bl	8008eb0 <ws2812b_basic_initialize>
    ws2812b_info(&ws2812bInfo);
 80009fe:	463b      	mov	r3, r7
 8000a00:	4618      	mov	r0, r3
 8000a02:	f008 fa0b 	bl	8008e1c <ws2812b_info>

  	#ifdef DEBUG_MODE


  	ws2812b_interface_debug_print("chip name: \t%s\n\r", ws2812bInfo.chip_Name);
 8000a06:	463b      	mov	r3, r7
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4843      	ldr	r0, [pc, #268]	; (8000b18 <main+0x148>)
 8000a0c:	f008 fb03 	bl	8009016 <ws2812b_interface_debug_print>
  	ws2812b_interface_debug_print("Manufacturer: \t%s\n\r", ws2812bInfo.manufacturer_name);
 8000a10:	463b      	mov	r3, r7
 8000a12:	3319      	adds	r3, #25
 8000a14:	4619      	mov	r1, r3
 8000a16:	4841      	ldr	r0, [pc, #260]	; (8000b1c <main+0x14c>)
 8000a18:	f008 fafd 	bl	8009016 <ws2812b_interface_debug_print>
  	ws2812b_interface_debug_print("Interface: \t%s\n\r", ws2812bInfo.interface);
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	3332      	adds	r3, #50	; 0x32
 8000a20:	4619      	mov	r1, r3
 8000a22:	483f      	ldr	r0, [pc, #252]	; (8000b20 <main+0x150>)
 8000a24:	f008 faf7 	bl	8009016 <ws2812b_interface_debug_print>
  	ws2812b_interface_debug_print("Supply max voltage: \t%0.2fV\n\r", ws2812bInfo.supply_Voltage_max_V);
 8000a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fcfa 	bl	8000424 <__aeabi_f2d>
 8000a30:	4602      	mov	r2, r0
 8000a32:	460b      	mov	r3, r1
 8000a34:	483b      	ldr	r0, [pc, #236]	; (8000b24 <main+0x154>)
 8000a36:	f008 faee 	bl	8009016 <ws2812b_interface_debug_print>
  	ws2812b_interface_debug_print("Supply min voltage: \t%0.2fV\n\r", ws2812bInfo.supply_voltage_min_v);
 8000a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fcf1 	bl	8000424 <__aeabi_f2d>
 8000a42:	4602      	mov	r2, r0
 8000a44:	460b      	mov	r3, r1
 8000a46:	4838      	ldr	r0, [pc, #224]	; (8000b28 <main+0x158>)
 8000a48:	f008 fae5 	bl	8009016 <ws2812b_interface_debug_print>
  	ws2812b_interface_debug_print("Temperature Max: \t%.1fC\n\r", ws2812bInfo.temperature_max);
 8000a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fce8 	bl	8000424 <__aeabi_f2d>
 8000a54:	4602      	mov	r2, r0
 8000a56:	460b      	mov	r3, r1
 8000a58:	4834      	ldr	r0, [pc, #208]	; (8000b2c <main+0x15c>)
 8000a5a:	f008 fadc 	bl	8009016 <ws2812b_interface_debug_print>
    ws2812b_interface_debug_print("Diver Version: \t\tV%.1f.%.2d\r\n", (ws2812bInfo.driver_version / 1000), (uint8_t)(ws2812bInfo.driver_version - (uint8_t)(ws2812bInfo.driver_version / 100)*100));
 8000a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a60:	4933      	ldr	r1, [pc, #204]	; (8000b30 <main+0x160>)
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fef8 	bl	8000858 <__aeabi_fdiv>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fcda 	bl	8000424 <__aeabi_f2d>
 8000a70:	4604      	mov	r4, r0
 8000a72:	460d      	mov	r5, r1
 8000a74:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8000a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a78:	492e      	ldr	r1, [pc, #184]	; (8000b34 <main+0x164>)
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff feec 	bl	8000858 <__aeabi_fdiv>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff84 	bl	8000990 <__aeabi_f2uiz>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	2364      	movs	r3, #100	; 0x64
 8000a90:	fb02 f303 	mul.w	r3, r2, r3
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fdd7 	bl	8000648 <__aeabi_i2f>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	f7ff fd1c 	bl	80004dc <__aeabi_fsub>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff72 	bl	8000990 <__aeabi_f2uiz>
 8000aac:	4603      	mov	r3, r0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	4622      	mov	r2, r4
 8000ab4:	462b      	mov	r3, r5
 8000ab6:	4820      	ldr	r0, [pc, #128]	; (8000b38 <main+0x168>)
 8000ab8:	f008 faad 	bl	8009016 <ws2812b_interface_debug_print>
    /* USER CODE BEGIN 3 */
//	  ws2812b_basic_write(3, WS2812b_COLOR_RED);
//	    ws2812b_basic_customized_colour(NUMBER_LED, (uint8_t *)colourArray);                  /**< write custom colour on 24 led */
//rgb_toggle(2, 500,  WS2812B_COLOUR_GREEN);                                            /**< toggle 2 LEDs green*/

	        for(colourIndex = 0; colourIndex < sizeof(basic_colour_array); colourIndex++){
 8000abc:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <main+0x16c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	e022      	b.n	8000b0a <main+0x13a>
	           for(ledIndex = 1; ledIndex < NUMBER_LED+1; ledIndex++){
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <main+0x170>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	e012      	b.n	8000af2 <main+0x122>
	                ws2812b_interface_delay_ms(50);
 8000acc:	2032      	movs	r0, #50	; 0x32
 8000ace:	f008 fa99 	bl	8009004 <ws2812b_interface_delay_ms>
	                ws2812b_basic_write(ledIndex, basic_colour_array[colourIndex]);              /**< loop through different colours */
 8000ad2:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <main+0x170>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <main+0x16c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4919      	ldr	r1, [pc, #100]	; (8000b44 <main+0x174>)
 8000ade:	5ccb      	ldrb	r3, [r1, r3]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	f008 fa2e 	bl	8008f44 <ws2812b_basic_write>
	           for(ledIndex = 1; ledIndex < NUMBER_LED+1; ledIndex++){
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <main+0x170>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <main+0x170>)
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <main+0x170>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b18      	cmp	r3, #24
 8000af8:	dde8      	ble.n	8000acc <main+0xfc>
	            }
	           ws2812b_interface_delay_ms(50);
 8000afa:	2032      	movs	r0, #50	; 0x32
 8000afc:	f008 fa82 	bl	8009004 <ws2812b_interface_delay_ms>
	        for(colourIndex = 0; colourIndex < sizeof(basic_colour_array); colourIndex++){
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <main+0x16c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	3301      	adds	r3, #1
 8000b06:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <main+0x16c>)
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <main+0x16c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d9d8      	bls.n	8000ac4 <main+0xf4>
 8000b12:	e7d3      	b.n	8000abc <main+0xec>
 8000b14:	20000204 	.word	0x20000204
 8000b18:	08009a48 	.word	0x08009a48
 8000b1c:	08009a5c 	.word	0x08009a5c
 8000b20:	08009a70 	.word	0x08009a70
 8000b24:	08009a84 	.word	0x08009a84
 8000b28:	08009aa4 	.word	0x08009aa4
 8000b2c:	08009ac4 	.word	0x08009ac4
 8000b30:	447a0000 	.word	0x447a0000
 8000b34:	42c80000 	.word	0x42c80000
 8000b38:	08009ae0 	.word	0x08009ae0
 8000b3c:	2000024c 	.word	0x2000024c
 8000b40:	20000250 	.word	0x20000250
 8000b44:	20000000 	.word	0x20000000

08000b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b094      	sub	sp, #80	; 0x50
 8000b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b52:	2228      	movs	r2, #40	; 0x28
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f008 fabc 	bl	80090d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b86:	2301      	movs	r3, #1
 8000b88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b94:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 f9ca 	bl	8002f38 <HAL_RCC_OscConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000baa:	f000 f8d7 	bl	8000d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bae:	230f      	movs	r3, #15
 8000bb0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bbe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2102      	movs	r1, #2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 fc36 	bl	800343c <HAL_RCC_ClockConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000bd6:	f000 f8c1 	bl	8000d5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000bda:	2310      	movs	r3, #16
 8000bdc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4618      	mov	r0, r3
 8000be6:	f002 fd8f 	bl	8003708 <HAL_RCCEx_PeriphCLKConfig>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000bf0:	f000 f8b4 	bl	8000d5c <Error_Handler>
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	3750      	adds	r7, #80	; 0x50
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c10:	463b      	mov	r3, r7
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c18:	4b1e      	ldr	r3, [pc, #120]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c22:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000c26:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c28:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c30:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c42:	4814      	ldr	r0, [pc, #80]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c44:	f002 fe16 	bl	8003874 <HAL_TIM_Base_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c4e:	f000 f885 	bl	8000d5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c58:	f107 0308 	add.w	r3, r7, #8
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480d      	ldr	r0, [pc, #52]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c60:	f002 ffb2 	bl	8003bc8 <HAL_TIM_ConfigClockSource>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c6a:	f000 f877 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c76:	463b      	mov	r3, r7
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <MX_TIM2_Init+0x98>)
 8000c7c:	f003 f984 	bl	8003f88 <HAL_TIMEx_MasterConfigSynchronization>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c86:	f000 f869 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000204 	.word	0x20000204

08000c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 0310 	add.w	r3, r7, #16
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cac:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <MX_GPIO_Init+0x90>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a1d      	ldr	r2, [pc, #116]	; (8000d28 <MX_GPIO_Init+0x90>)
 8000cb2:	f043 0320 	orr.w	r3, r3, #32
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <MX_GPIO_Init+0x90>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0320 	and.w	r3, r3, #32
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <MX_GPIO_Init+0x90>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <MX_GPIO_Init+0x90>)
 8000cca:	f043 0308 	orr.w	r3, r3, #8
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <MX_GPIO_Init+0x90>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0308 	and.w	r3, r3, #8
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_GPIO_Init+0x90>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <MX_GPIO_Init+0x90>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_GPIO_Init+0x90>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USER_LED_Pin|RGB_PIN_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f640 0102 	movw	r1, #2050	; 0x802
 8000cfa:	480c      	ldr	r0, [pc, #48]	; (8000d2c <MX_GPIO_Init+0x94>)
 8000cfc:	f000 fc40 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_LED_Pin RGB_PIN_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|RGB_PIN_Pin;
 8000d00:	f640 0302 	movw	r3, #2050	; 0x802
 8000d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	4619      	mov	r1, r3
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <MX_GPIO_Init+0x94>)
 8000d1a:	f000 faad 	bl	8001278 <HAL_GPIO_Init>

}
 8000d1e:	bf00      	nop
 8000d20:	3720      	adds	r7, #32
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40010c00 	.word	0x40010c00

08000d30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM2){
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d40:	d104      	bne.n	8000d4c <HAL_TIM_PeriodElapsedCallback+0x1c>
		tickCount++;
 8000d42:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	3301      	adds	r3, #1
 8000d48:	4a03      	ldr	r2, [pc, #12]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d4a:	6013      	str	r3, [r2, #0]
	}

}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000254 	.word	0x20000254

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
}
 8000d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <Error_Handler+0x8>
	...

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_MspInit+0x5c>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <HAL_MspInit+0x5c>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6193      	str	r3, [r2, #24]
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_MspInit+0x5c>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_MspInit+0x5c>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <HAL_MspInit+0x5c>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d90:	61d3      	str	r3, [r2, #28]
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_MspInit+0x5c>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_MspInit+0x60>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <HAL_MspInit+0x60>)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010000 	.word	0x40010000

08000dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ddc:	d113      	bne.n	8000e06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_TIM_Base_MspInit+0x44>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <HAL_TIM_Base_MspInit+0x44>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	61d3      	str	r3, [r2, #28]
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_TIM_Base_MspInit+0x44>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	201c      	movs	r0, #28
 8000dfc:	f000 fa05 	bl	800120a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e00:	201c      	movs	r0, #28
 8000e02:	f000 fa1e 	bl	8001242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <NMI_Handler+0x4>

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler+0x4>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr

08000e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr

08000e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5a:	f000 f8bf 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e6a:	f000 fcd2 	bl	8001812 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000ef8 	.word	0x20000ef8

08000e78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <TIM2_IRQHandler+0x10>)
 8000e7e:	f002 fd9b 	bl	80039b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000204 	.word	0x20000204

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f008 f8e0 	bl	8009080 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20005000 	.word	0x20005000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000258 	.word	0x20000258
 8000ef4:	20001430 	.word	0x20001430

08000ef8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr

08000f04 <Reset_Handler>:
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <LoopFillZerobss+0x12>)
 8000f06:	490d      	ldr	r1, [pc, #52]	; (8000f3c <LoopFillZerobss+0x16>)
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <LoopFillZerobss+0x1a>)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:
 8000f0e:	58d4      	ldr	r4, [r2, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:
 8000f14:	18c4      	adds	r4, r0, r3
 8000f16:	428c      	cmp	r4, r1
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <LoopFillZerobss+0x1e>)
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	; (8000f48 <LoopFillZerobss+0x22>)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:
 8000f22:	6013      	str	r3, [r2, #0]
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:
 8000f26:	42a2      	cmp	r2, r4
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>
 8000f2a:	f7ff ffe5 	bl	8000ef8 <SystemInit>
 8000f2e:	f008 f8ad 	bl	800908c <__libc_init_array>
 8000f32:	f7ff fd4d 	bl	80009d0 <main>
 8000f36:	4770      	bx	lr
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	200001e8 	.word	0x200001e8
 8000f40:	08009cd4 	.word	0x08009cd4
 8000f44:	200001e8 	.word	0x200001e8
 8000f48:	20001430 	.word	0x20001430

08000f4c <ADC1_2_IRQHandler>:
 8000f4c:	e7fe      	b.n	8000f4c <ADC1_2_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_Init+0x28>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <HAL_Init+0x28>)
 8000f5a:	f043 0310 	orr.w	r3, r3, #16
 8000f5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 f947 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	200f      	movs	r0, #15
 8000f68:	f000 f808 	bl	8000f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f6c:	f7ff fefc 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40022000 	.word	0x40022000

08000f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f84:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <HAL_InitTick+0x54>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <HAL_InitTick+0x58>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f95f 	bl	800125e <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 f927 	bl	800120a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	; (8000fd8 <HAL_InitTick+0x5c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	20000010 	.word	0x20000010
 8000fd8:	2000000c 	.word	0x2000000c

08000fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_IncTick+0x1c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a03      	ldr	r2, [pc, #12]	; (8000ffc <HAL_IncTick+0x20>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr
 8000ff8:	20000010 	.word	0x20000010
 8000ffc:	2000025c 	.word	0x2000025c

08001000 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return uwTick;
 8001004:	4b02      	ldr	r3, [pc, #8]	; (8001010 <HAL_GetTick+0x10>)
 8001006:	681b      	ldr	r3, [r3, #0]
}
 8001008:	4618      	mov	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	2000025c 	.word	0x2000025c

08001014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800101c:	f7ff fff0 	bl	8001000 <HAL_GetTick>
 8001020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800102c:	d005      	beq.n	800103a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_Delay+0x44>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4413      	add	r3, r2
 8001038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800103a:	bf00      	nop
 800103c:	f7ff ffe0 	bl	8001000 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8f7      	bhi.n	800103c <HAL_Delay+0x28>
  {
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000010 	.word	0x20000010

0800105c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108e:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	60d3      	str	r3, [r2, #12]
}
 8001094:	bf00      	nop
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db0b      	blt.n	80010ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	f003 021f 	and.w	r2, r3, #31
 80010d8:	4906      	ldr	r1, [pc, #24]	; (80010f4 <__NVIC_EnableIRQ+0x34>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	095b      	lsrs	r3, r3, #5
 80010e0:	2001      	movs	r0, #1
 80010e2:	fa00 f202 	lsl.w	r2, r0, r2
 80010e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	; (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	; (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	; 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
         );
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	; 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c0:	d301      	bcc.n	80011c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00f      	b.n	80011e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <SysTick_Config+0x40>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ce:	210f      	movs	r1, #15
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f7ff ff90 	bl	80010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SysTick_Config+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SysTick_Config+0x40>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff2d 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800121c:	f7ff ff42 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 8001220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f7ff ff90 	bl	800114c <NVIC_EncodePriority>
 800122c:	4602      	mov	r2, r0
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff5f 	bl	80010f8 <__NVIC_SetPriority>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff35 	bl	80010c0 <__NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffa2 	bl	80011b0 <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b08b      	sub	sp, #44	; 0x2c
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128a:	e169      	b.n	8001560 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800128c:	2201      	movs	r2, #1
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8158 	bne.w	800155a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	4a9a      	ldr	r2, [pc, #616]	; (8001518 <HAL_GPIO_Init+0x2a0>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d05e      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012b4:	4a98      	ldr	r2, [pc, #608]	; (8001518 <HAL_GPIO_Init+0x2a0>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d875      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012ba:	4a98      	ldr	r2, [pc, #608]	; (800151c <HAL_GPIO_Init+0x2a4>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d058      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012c0:	4a96      	ldr	r2, [pc, #600]	; (800151c <HAL_GPIO_Init+0x2a4>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d86f      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012c6:	4a96      	ldr	r2, [pc, #600]	; (8001520 <HAL_GPIO_Init+0x2a8>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d052      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012cc:	4a94      	ldr	r2, [pc, #592]	; (8001520 <HAL_GPIO_Init+0x2a8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d869      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012d2:	4a94      	ldr	r2, [pc, #592]	; (8001524 <HAL_GPIO_Init+0x2ac>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d04c      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012d8:	4a92      	ldr	r2, [pc, #584]	; (8001524 <HAL_GPIO_Init+0x2ac>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d863      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012de:	4a92      	ldr	r2, [pc, #584]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d046      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
 80012e4:	4a90      	ldr	r2, [pc, #576]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d85d      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012ea:	2b12      	cmp	r3, #18
 80012ec:	d82a      	bhi.n	8001344 <HAL_GPIO_Init+0xcc>
 80012ee:	2b12      	cmp	r3, #18
 80012f0:	d859      	bhi.n	80013a6 <HAL_GPIO_Init+0x12e>
 80012f2:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <HAL_GPIO_Init+0x80>)
 80012f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f8:	08001373 	.word	0x08001373
 80012fc:	0800134d 	.word	0x0800134d
 8001300:	0800135f 	.word	0x0800135f
 8001304:	080013a1 	.word	0x080013a1
 8001308:	080013a7 	.word	0x080013a7
 800130c:	080013a7 	.word	0x080013a7
 8001310:	080013a7 	.word	0x080013a7
 8001314:	080013a7 	.word	0x080013a7
 8001318:	080013a7 	.word	0x080013a7
 800131c:	080013a7 	.word	0x080013a7
 8001320:	080013a7 	.word	0x080013a7
 8001324:	080013a7 	.word	0x080013a7
 8001328:	080013a7 	.word	0x080013a7
 800132c:	080013a7 	.word	0x080013a7
 8001330:	080013a7 	.word	0x080013a7
 8001334:	080013a7 	.word	0x080013a7
 8001338:	080013a7 	.word	0x080013a7
 800133c:	08001355 	.word	0x08001355
 8001340:	08001369 	.word	0x08001369
 8001344:	4a79      	ldr	r2, [pc, #484]	; (800152c <HAL_GPIO_Init+0x2b4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d013      	beq.n	8001372 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800134a:	e02c      	b.n	80013a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	623b      	str	r3, [r7, #32]
          break;
 8001352:	e029      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	3304      	adds	r3, #4
 800135a:	623b      	str	r3, [r7, #32]
          break;
 800135c:	e024      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	3308      	adds	r3, #8
 8001364:	623b      	str	r3, [r7, #32]
          break;
 8001366:	e01f      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	330c      	adds	r3, #12
 800136e:	623b      	str	r3, [r7, #32]
          break;
 8001370:	e01a      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800137a:	2304      	movs	r3, #4
 800137c:	623b      	str	r3, [r7, #32]
          break;
 800137e:	e013      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d105      	bne.n	8001394 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001388:	2308      	movs	r3, #8
 800138a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	611a      	str	r2, [r3, #16]
          break;
 8001392:	e009      	b.n	80013a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001394:	2308      	movs	r3, #8
 8001396:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69fa      	ldr	r2, [r7, #28]
 800139c:	615a      	str	r2, [r3, #20]
          break;
 800139e:	e003      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
          break;
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x130>
          break;
 80013a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2bff      	cmp	r3, #255	; 0xff
 80013ac:	d801      	bhi.n	80013b2 <HAL_GPIO_Init+0x13a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	e001      	b.n	80013b6 <HAL_GPIO_Init+0x13e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3304      	adds	r3, #4
 80013b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2bff      	cmp	r3, #255	; 0xff
 80013bc:	d802      	bhi.n	80013c4 <HAL_GPIO_Init+0x14c>
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	e002      	b.n	80013ca <HAL_GPIO_Init+0x152>
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	3b08      	subs	r3, #8
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	210f      	movs	r1, #15
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	fa01 f303 	lsl.w	r3, r1, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	401a      	ands	r2, r3
 80013dc:	6a39      	ldr	r1, [r7, #32]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	431a      	orrs	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 80b1 	beq.w	800155a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013f8:	4b4d      	ldr	r3, [pc, #308]	; (8001530 <HAL_GPIO_Init+0x2b8>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a4c      	ldr	r2, [pc, #304]	; (8001530 <HAL_GPIO_Init+0x2b8>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <HAL_GPIO_Init+0x2b8>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001410:	4a48      	ldr	r2, [pc, #288]	; (8001534 <HAL_GPIO_Init+0x2bc>)
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	220f      	movs	r2, #15
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a40      	ldr	r2, [pc, #256]	; (8001538 <HAL_GPIO_Init+0x2c0>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d013      	beq.n	8001464 <HAL_GPIO_Init+0x1ec>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a3f      	ldr	r2, [pc, #252]	; (800153c <HAL_GPIO_Init+0x2c4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d00d      	beq.n	8001460 <HAL_GPIO_Init+0x1e8>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a3e      	ldr	r2, [pc, #248]	; (8001540 <HAL_GPIO_Init+0x2c8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d007      	beq.n	800145c <HAL_GPIO_Init+0x1e4>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a3d      	ldr	r2, [pc, #244]	; (8001544 <HAL_GPIO_Init+0x2cc>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d101      	bne.n	8001458 <HAL_GPIO_Init+0x1e0>
 8001454:	2303      	movs	r3, #3
 8001456:	e006      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001458:	2304      	movs	r3, #4
 800145a:	e004      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 800145c:	2302      	movs	r3, #2
 800145e:	e002      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <HAL_GPIO_Init+0x1ee>
 8001464:	2300      	movs	r3, #0
 8001466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001468:	f002 0203 	and.w	r2, r2, #3
 800146c:	0092      	lsls	r2, r2, #2
 800146e:	4093      	lsls	r3, r2
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001476:	492f      	ldr	r1, [pc, #188]	; (8001534 <HAL_GPIO_Init+0x2bc>)
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	492c      	ldr	r1, [pc, #176]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	600b      	str	r3, [r1, #0]
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	4928      	ldr	r1, [pc, #160]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d006      	beq.n	80014c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014b8:	4b23      	ldr	r3, [pc, #140]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	4922      	ldr	r1, [pc, #136]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	43db      	mvns	r3, r3
 80014ce:	491e      	ldr	r1, [pc, #120]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014d0:	4013      	ands	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d006      	beq.n	80014ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	4918      	ldr	r1, [pc, #96]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	608b      	str	r3, [r1, #8]
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	4914      	ldr	r1, [pc, #80]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d021      	beq.n	800154c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	490e      	ldr	r1, [pc, #56]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	60cb      	str	r3, [r1, #12]
 8001514:	e021      	b.n	800155a <HAL_GPIO_Init+0x2e2>
 8001516:	bf00      	nop
 8001518:	10320000 	.word	0x10320000
 800151c:	10310000 	.word	0x10310000
 8001520:	10220000 	.word	0x10220000
 8001524:	10210000 	.word	0x10210000
 8001528:	10120000 	.word	0x10120000
 800152c:	10110000 	.word	0x10110000
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000
 8001538:	40010800 	.word	0x40010800
 800153c:	40010c00 	.word	0x40010c00
 8001540:	40011000 	.word	0x40011000
 8001544:	40011400 	.word	0x40011400
 8001548:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800154c:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_GPIO_Init+0x304>)
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	43db      	mvns	r3, r3
 8001554:	4909      	ldr	r1, [pc, #36]	; (800157c <HAL_GPIO_Init+0x304>)
 8001556:	4013      	ands	r3, r2
 8001558:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	3301      	adds	r3, #1
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	fa22 f303 	lsr.w	r3, r2, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	f47f ae8e 	bne.w	800128c <HAL_GPIO_Init+0x14>
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	372c      	adds	r7, #44	; 0x2c
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	40010400 	.word	0x40010400

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800159c:	e003      	b.n	80015a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	041a      	lsls	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	611a      	str	r2, [r3, #16]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b2:	b08b      	sub	sp, #44	; 0x2c
 80015b4:	af06      	add	r7, sp, #24
 80015b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0fd      	b.n	80017be <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d106      	bne.n	80015dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f007 f81e 	bl	8008618 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 fd63 	bl	80040b4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	687e      	ldr	r6, [r7, #4]
 80015f6:	466d      	mov	r5, sp
 80015f8:	f106 0410 	add.w	r4, r6, #16
 80015fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	602b      	str	r3, [r5, #0]
 8001604:	1d33      	adds	r3, r6, #4
 8001606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001608:	6838      	ldr	r0, [r7, #0]
 800160a:	f002 fd2d 	bl	8004068 <USB_CoreInit>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2202      	movs	r2, #2
 8001618:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0ce      	b.n	80017be <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f002 fd5e 	bl	80040e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	e04c      	b.n	80016cc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	440b      	add	r3, r1
 8001642:	3301      	adds	r3, #1
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	1c5a      	adds	r2, r3, #1
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	b298      	uxth	r0, r3
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	3336      	adds	r3, #54	; 0x36
 8001670:	4602      	mov	r2, r0
 8001672:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	440b      	add	r3, r1
 8001684:	3303      	adds	r3, #3
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	440b      	add	r3, r1
 8001698:	3338      	adds	r3, #56	; 0x38
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	440b      	add	r3, r1
 80016ac:	333c      	adds	r3, #60	; 0x3c
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	3340      	adds	r3, #64	; 0x40
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	3301      	adds	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d3ad      	bcc.n	8001632 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
 80016da:	e044      	b.n	8001766 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016dc:	7bfa      	ldrb	r2, [r7, #15]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	f203 1369 	addw	r3, r3, #361	; 0x169
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001708:	7bfa      	ldrb	r2, [r7, #15]
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	440b      	add	r3, r1
 8001716:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800171e:	7bfa      	ldrb	r2, [r7, #15]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001734:	7bfa      	ldrb	r2, [r7, #15]
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800174a:	7bfa      	ldrb	r2, [r7, #15]
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	440b      	add	r3, r1
 8001758:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	3301      	adds	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	d3b5      	bcc.n	80016dc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	687e      	ldr	r6, [r7, #4]
 8001778:	466d      	mov	r5, sp
 800177a:	f106 0410 	add.w	r4, r6, #16
 800177e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	602b      	str	r3, [r5, #0]
 8001786:	1d33      	adds	r3, r6, #4
 8001788:	cb0e      	ldmia	r3, {r1, r2, r3}
 800178a:	6838      	ldr	r0, [r7, #0]
 800178c:	f002 fcb8 	bl	8004100 <USB_DevInit>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2202      	movs	r2, #2
 800179a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e00d      	b.n	80017be <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 f96a 	bl	8006a90 <USB_DevDisconnect>

  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_PCD_Start+0x16>
 80017d8:	2302      	movs	r3, #2
 80017da:	e016      	b.n	800180a <HAL_PCD_Start+0x44>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f002 fc4d 	bl	8004088 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017ee:	2101      	movs	r1, #1
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f007 f984 	bl	8008afe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f005 f93e 	bl	8006a7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b088      	sub	sp, #32
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f005 f940 	bl	8006aa4 <USB_ReadInterrupts>
 8001824:	4603      	mov	r3, r0
 8001826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800182a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800182e:	d102      	bne.n	8001836 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 fb5f 	bl	8001ef4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f005 f932 	bl	8006aa4 <USB_ReadInterrupts>
 8001840:	4603      	mov	r3, r0
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d112      	bne.n	8001872 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001854:	b29a      	uxth	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800185e:	b292      	uxth	r2, r2
 8001860:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f006 ff52 	bl	800870e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800186a:	2100      	movs	r1, #0
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f923 	bl	8001ab8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f005 f914 	bl	8006aa4 <USB_ReadInterrupts>
 800187c:	4603      	mov	r3, r0
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001886:	d10b      	bne.n	80018a0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001890:	b29a      	uxth	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800189a:	b292      	uxth	r2, r2
 800189c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f005 f8fd 	bl	8006aa4 <USB_ReadInterrupts>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018b4:	d10b      	bne.n	80018ce <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018be:	b29a      	uxth	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018c8:	b292      	uxth	r2, r2
 80018ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f005 f8e6 	bl	8006aa4 <USB_ReadInterrupts>
 80018d8:	4603      	mov	r3, r0
 80018da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018e2:	d126      	bne.n	8001932 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0204 	bic.w	r2, r2, #4
 80018f6:	b292      	uxth	r2, r2
 80018f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001904:	b29a      	uxth	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0208 	bic.w	r2, r2, #8
 800190e:	b292      	uxth	r2, r2
 8001910:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f006 ff33 	bl	8008780 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001922:	b29a      	uxth	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800192c:	b292      	uxth	r2, r2
 800192e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f005 f8b4 	bl	8006aa4 <USB_ReadInterrupts>
 800193c:	4603      	mov	r3, r0
 800193e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001946:	f040 8082 	bne.w	8001a4e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800194a:	2300      	movs	r3, #0
 800194c:	77fb      	strb	r3, [r7, #31]
 800194e:	e010      	b.n	8001972 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	7ffb      	ldrb	r3, [r7, #31]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	441a      	add	r2, r3
 800195c:	7ffb      	ldrb	r3, [r7, #31]
 800195e:	8812      	ldrh	r2, [r2, #0]
 8001960:	b292      	uxth	r2, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	3320      	adds	r3, #32
 8001966:	443b      	add	r3, r7
 8001968:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800196c:	7ffb      	ldrb	r3, [r7, #31]
 800196e:	3301      	adds	r3, #1
 8001970:	77fb      	strb	r3, [r7, #31]
 8001972:	7ffb      	ldrb	r3, [r7, #31]
 8001974:	2b07      	cmp	r3, #7
 8001976:	d9eb      	bls.n	8001950 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001980:	b29a      	uxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	b292      	uxth	r2, r2
 800198c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001998:	b29a      	uxth	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	b292      	uxth	r2, r2
 80019a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80019a8:	bf00      	nop
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f6      	beq.n	80019aa <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ce:	b292      	uxth	r2, r2
 80019d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	77fb      	strb	r3, [r7, #31]
 80019d8:	e00f      	b.n	80019fa <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80019da:	7ffb      	ldrb	r3, [r7, #31]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	4611      	mov	r1, r2
 80019e2:	7ffa      	ldrb	r2, [r7, #31]
 80019e4:	0092      	lsls	r2, r2, #2
 80019e6:	440a      	add	r2, r1
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	3320      	adds	r3, #32
 80019ec:	443b      	add	r3, r7
 80019ee:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80019f2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80019f4:	7ffb      	ldrb	r3, [r7, #31]
 80019f6:	3301      	adds	r3, #1
 80019f8:	77fb      	strb	r3, [r7, #31]
 80019fa:	7ffb      	ldrb	r3, [r7, #31]
 80019fc:	2b07      	cmp	r3, #7
 80019fe:	d9ec      	bls.n	80019da <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0208 	orr.w	r2, r2, #8
 8001a12:	b292      	uxth	r2, r2
 8001a14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2a:	b292      	uxth	r2, r2
 8001a2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 0204 	orr.w	r2, r2, #4
 8001a42:	b292      	uxth	r2, r2
 8001a44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f006 fe7f 	bl	800874c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f005 f826 	bl	8006aa4 <USB_ReadInterrupts>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a62:	d10e      	bne.n	8001a82 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a76:	b292      	uxth	r2, r2
 8001a78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f006 fe38 	bl	80086f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f005 f80c 	bl	8006aa4 <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a96:	d10b      	bne.n	8001ab0 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aaa:	b292      	uxth	r2, r2
 8001aac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_PCD_SetAddress+0x1a>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e013      	b.n	8001afa <HAL_PCD_SetAddress+0x42>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f004 ffb3 	bl	8006a56 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	4608      	mov	r0, r1
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4603      	mov	r3, r0
 8001b12:	70fb      	strb	r3, [r7, #3]
 8001b14:	460b      	mov	r3, r1
 8001b16:	803b      	strh	r3, [r7, #0]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da0e      	bge.n	8001b46 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2201      	movs	r2, #1
 8001b42:	705a      	strb	r2, [r3, #1]
 8001b44:	e00e      	b.n	8001b64 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	f003 0207 	and.w	r2, r3, #7
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b70:	883a      	ldrh	r2, [r7, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	78ba      	ldrb	r2, [r7, #2]
 8001b7a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	785b      	ldrb	r3, [r3, #1]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b8e:	78bb      	ldrb	r3, [r7, #2]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d102      	bne.n	8001b9a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_PCD_EP_Open+0xa6>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e00e      	b.n	8001bc6 <HAL_PCD_EP_Open+0xc4>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68f9      	ldr	r1, [r7, #12]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f002 fac2 	bl	8004140 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001bc4:	7afb      	ldrb	r3, [r7, #11]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	da0e      	bge.n	8001c00 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	705a      	strb	r2, [r3, #1]
 8001bfe:	e00e      	b.n	8001c1e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c00:	78fb      	ldrb	r3, [r7, #3]
 8001c02:	f003 0207 	and.w	r2, r3, #7
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d101      	bne.n	8001c38 <HAL_PCD_EP_Close+0x6a>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e00e      	b.n	8001c56 <HAL_PCD_EP_Close+0x88>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68f9      	ldr	r1, [r7, #12]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f002 fde4 	bl	8004814 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c6e:	7afb      	ldrb	r3, [r7, #11]
 8001c70:	f003 0207 	and.w	r2, r3, #7
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4413      	add	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	2200      	movs	r2, #0
 8001c96:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c9e:	7afb      	ldrb	r3, [r7, #11]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001caa:	7afb      	ldrb	r3, [r7, #11]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d106      	bne.n	8001cc2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6979      	ldr	r1, [r7, #20]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f002 ff96 	bl	8004bec <USB_EPStartXfer>
 8001cc0:	e005      	b.n	8001cce <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6979      	ldr	r1, [r7, #20]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f002 ff8f 	bl	8004bec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	f003 0207 	and.w	r2, r3, #7
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr

08001d06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	60f8      	str	r0, [r7, #12]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	460b      	mov	r3, r1
 8001d14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d16:	7afb      	ldrb	r3, [r7, #11]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4413      	add	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d52:	7afb      	ldrb	r3, [r7, #11]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d5e:	7afb      	ldrb	r3, [r7, #11]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d106      	bne.n	8001d76 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6979      	ldr	r1, [r7, #20]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f002 ff3c 	bl	8004bec <USB_EPStartXfer>
 8001d74:	e005      	b.n	8001d82 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6979      	ldr	r1, [r7, #20]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f002 ff35 	bl	8004bec <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	f003 0207 	and.w	r2, r3, #7
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d901      	bls.n	8001daa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e04c      	b.n	8001e44 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	da0e      	bge.n	8001dd0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	705a      	strb	r2, [r3, #1]
 8001dce:	e00c      	b.n	8001dea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dd0:	78fa      	ldrb	r2, [r7, #3]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d101      	bne.n	8001e0a <HAL_PCD_EP_SetStall+0x7e>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e01c      	b.n	8001e44 <HAL_PCD_EP_SetStall+0xb8>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68f9      	ldr	r1, [r7, #12]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f004 fd1f 	bl	800685c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d108      	bne.n	8001e3a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001e32:	4619      	mov	r1, r3
 8001e34:	4610      	mov	r0, r2
 8001e36:	f004 fe44 	bl	8006ac2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	f003 020f 	and.w	r2, r3, #15
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d901      	bls.n	8001e6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e040      	b.n	8001eec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	da0e      	bge.n	8001e90 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	705a      	strb	r2, [r3, #1]
 8001e8e:	e00e      	b.n	8001eae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	f003 0207 	and.w	r2, r3, #7
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_PCD_EP_ClrStall+0x82>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e00e      	b.n	8001eec <HAL_PCD_EP_ClrStall+0xa0>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68f9      	ldr	r1, [r7, #12]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f004 fd0d 	bl	80068fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08e      	sub	sp, #56	; 0x38
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001efc:	e2ec      	b.n	80024d8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f06:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001f14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f040 8161 	bne.w	80021e0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d152      	bne.n	8001fce <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f38:	81fb      	strh	r3, [r7, #14]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	89fb      	ldrh	r3, [r7, #14]
 8001f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3328      	adds	r3, #40	; 0x28
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4413      	add	r3, r2
 8001f66:	3302      	adds	r3, #2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	441a      	add	r2, r3
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f006 fb95 	bl	80086be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 829b 	beq.w	80024d8 <PCD_EP_ISR_Handler+0x5e4>
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 8296 	bne.w	80024d8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	b292      	uxth	r2, r2
 8001fc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001fcc:	e284      	b.n	80024d8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001fde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d034      	beq.n	8002052 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3306      	adds	r3, #6
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	4413      	add	r3, r2
 8002006:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6818      	ldr	r0, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002026:	b29b      	uxth	r3, r3
 8002028:	f004 fd9b 	bl	8006b62 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	b29a      	uxth	r2, r3
 8002034:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002038:	4013      	ands	r3, r2
 800203a:	823b      	strh	r3, [r7, #16]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	8a3a      	ldrh	r2, [r7, #16]
 8002042:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002046:	b292      	uxth	r2, r2
 8002048:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f006 fb0a 	bl	8008664 <HAL_PCD_SetupStageCallback>
 8002050:	e242      	b.n	80024d8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002052:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002056:	2b00      	cmp	r3, #0
 8002058:	f280 823e 	bge.w	80024d8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	b29a      	uxth	r2, r3
 8002064:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002068:	4013      	ands	r3, r2
 800206a:	83bb      	strh	r3, [r7, #28]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	8bba      	ldrh	r2, [r7, #28]
 8002072:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002076:	b292      	uxth	r2, r2
 8002078:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002082:	b29b      	uxth	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	3306      	adds	r3, #6
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	4413      	add	r3, r2
 8002098:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d019      	beq.n	80020e2 <PCD_EP_ISR_Handler+0x1ee>
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d015      	beq.n	80020e2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	6959      	ldr	r1, [r3, #20]
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	f004 fd4b 	bl	8006b62 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	441a      	add	r2, r3
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80020da:	2100      	movs	r1, #0
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f006 fad3 	bl	8008688 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 81f2 	bne.w	80024d8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002102:	b29b      	uxth	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4413      	add	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d112      	bne.n	8002142 <PCD_EP_ISR_Handler+0x24e>
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	b29b      	uxth	r3, r3
 8002122:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002126:	b29a      	uxth	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	801a      	strh	r2, [r3, #0]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	b29b      	uxth	r3, r3
 8002132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800213a:	b29a      	uxth	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	801a      	strh	r2, [r3, #0]
 8002140:	e02f      	b.n	80021a2 <PCD_EP_ISR_Handler+0x2ae>
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b3e      	cmp	r3, #62	; 0x3e
 8002148:	d813      	bhi.n	8002172 <PCD_EP_ISR_Handler+0x27e>
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	085b      	lsrs	r3, r3, #1
 8002150:	633b      	str	r3, [r7, #48]	; 0x30
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <PCD_EP_ISR_Handler+0x270>
 800215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002160:	3301      	adds	r3, #1
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
 8002164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002166:	b29b      	uxth	r3, r3
 8002168:	029b      	lsls	r3, r3, #10
 800216a:	b29a      	uxth	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	801a      	strh	r2, [r3, #0]
 8002170:	e017      	b.n	80021a2 <PCD_EP_ISR_Handler+0x2ae>
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	633b      	str	r3, [r7, #48]	; 0x30
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <PCD_EP_ISR_Handler+0x298>
 8002186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002188:	3b01      	subs	r3, #1
 800218a:	633b      	str	r3, [r7, #48]	; 0x30
 800218c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218e:	b29b      	uxth	r3, r3
 8002190:	029b      	lsls	r3, r3, #10
 8002192:	b29b      	uxth	r3, r3
 8002194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800219c:	b29a      	uxth	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b2:	827b      	strh	r3, [r7, #18]
 80021b4:	8a7b      	ldrh	r3, [r7, #18]
 80021b6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80021ba:	827b      	strh	r3, [r7, #18]
 80021bc:	8a7b      	ldrh	r3, [r7, #18]
 80021be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80021c2:	827b      	strh	r3, [r7, #18]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	8a7b      	ldrh	r3, [r7, #18]
 80021ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021da:	b29b      	uxth	r3, r3
 80021dc:	8013      	strh	r3, [r2, #0]
 80021de:	e17b      	b.n	80024d8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021f2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f280 80ea 	bge.w	80023d0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	b29a      	uxth	r2, r3
 800220e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002212:	4013      	ands	r3, r2
 8002214:	853b      	strh	r3, [r7, #40]	; 0x28
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002226:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800222a:	b292      	uxth	r2, r2
 800222c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800222e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	7b1b      	ldrb	r3, [r3, #12]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d122      	bne.n	8002292 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002254:	b29b      	uxth	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	3306      	adds	r3, #6
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	4413      	add	r3, r2
 800226a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002274:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002276:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8087 	beq.w	800238c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	6959      	ldr	r1, [r3, #20]
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	88da      	ldrh	r2, [r3, #6]
 800228a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800228c:	f004 fc69 	bl	8006b62 <USB_ReadPMA>
 8002290:	e07c      	b.n	800238c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	78db      	ldrb	r3, [r3, #3]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d108      	bne.n	80022ac <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800229a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800229c:	461a      	mov	r2, r3
 800229e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 f927 	bl	80024f4 <HAL_PCD_EP_DB_Receive>
 80022a6:	4603      	mov	r3, r0
 80022a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80022aa:	e06f      	b.n	800238c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	441a      	add	r2, r3
 80022d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80022d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d021      	beq.n	800234a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800230e:	b29b      	uxth	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	3302      	adds	r3, #2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800232e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002330:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002332:	2b00      	cmp	r3, #0
 8002334:	d02a      	beq.n	800238c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	6959      	ldr	r1, [r3, #20]
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	891a      	ldrh	r2, [r3, #8]
 8002342:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002344:	f004 fc0d 	bl	8006b62 <USB_ReadPMA>
 8002348:	e020      	b.n	800238c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002352:	b29b      	uxth	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	4413      	add	r3, r2
 800235e:	3306      	adds	r3, #6
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6812      	ldr	r2, [r2, #0]
 8002366:	4413      	add	r3, r2
 8002368:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002372:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002374:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	6959      	ldr	r1, [r3, #20]
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	895a      	ldrh	r2, [r3, #10]
 8002386:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002388:	f004 fbeb 	bl	8006b62 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002392:	441a      	add	r2, r3
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800239e:	441a      	add	r2, r3
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <PCD_EP_ISR_Handler+0x4c2>
 80023ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d206      	bcs.n	80023c4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	4619      	mov	r1, r3
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f006 f963 	bl	8008688 <HAL_PCD_DataOutStageCallback>
 80023c2:	e005      	b.n	80023d0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ca:	4618      	mov	r0, r3
 80023cc:	f002 fc0e 	bl	8004bec <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80023d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d07e      	beq.n	80024d8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80023da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	b29b      	uxth	r3, r3
 8002400:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002408:	843b      	strh	r3, [r7, #32]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	441a      	add	r2, r3
 8002418:	8c3b      	ldrh	r3, [r7, #32]
 800241a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800241e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002422:	b29b      	uxth	r3, r3
 8002424:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	78db      	ldrb	r3, [r3, #3]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d00c      	beq.n	8002448 <PCD_EP_ISR_Handler+0x554>
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	78db      	ldrb	r3, [r3, #3]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800243a:	2b02      	cmp	r3, #2
 800243c:	d146      	bne.n	80024cc <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800243e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d141      	bne.n	80024cc <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002450:	b29b      	uxth	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	3302      	adds	r3, #2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	4413      	add	r3, r2
 8002466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002470:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	8bfb      	ldrh	r3, [r7, #30]
 8002478:	429a      	cmp	r2, r3
 800247a:	d906      	bls.n	800248a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	699a      	ldr	r2, [r3, #24]
 8002480:	8bfb      	ldrh	r3, [r7, #30]
 8002482:	1ad2      	subs	r2, r2, r3
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	619a      	str	r2, [r3, #24]
 8002488:	e002      	b.n	8002490 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d106      	bne.n	80024a6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f006 f90d 	bl	80086be <HAL_PCD_DataInStageCallback>
 80024a4:	e018      	b.n	80024d8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	8bfb      	ldrh	r3, [r7, #30]
 80024ac:	441a      	add	r2, r3
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	69da      	ldr	r2, [r3, #28]
 80024b6:	8bfb      	ldrh	r3, [r7, #30]
 80024b8:	441a      	add	r2, r3
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024c4:	4618      	mov	r0, r3
 80024c6:	f002 fb91 	bl	8004bec <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80024ca:	e005      	b.n	80024d8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80024cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024ce:	461a      	mov	r2, r3
 80024d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f91b 	bl	800270e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	b21b      	sxth	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f6ff ad0a 	blt.w	8001efe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3738      	adds	r7, #56	; 0x38
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	4613      	mov	r3, r2
 8002500:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d07e      	beq.n	800260a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002514:	b29b      	uxth	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	3302      	adds	r3, #2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	6812      	ldr	r2, [r2, #0]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002534:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	8b7b      	ldrh	r3, [r7, #26]
 800253c:	429a      	cmp	r2, r3
 800253e:	d306      	bcc.n	800254e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	699a      	ldr	r2, [r3, #24]
 8002544:	8b7b      	ldrh	r3, [r7, #26]
 8002546:	1ad2      	subs	r2, r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	619a      	str	r2, [r3, #24]
 800254c:	e002      	b.n	8002554 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d123      	bne.n	80025a4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	b29b      	uxth	r3, r3
 800256e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002576:	833b      	strh	r3, [r7, #24]
 8002578:	8b3b      	ldrh	r3, [r7, #24]
 800257a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800257e:	833b      	strh	r3, [r7, #24]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	441a      	add	r2, r3
 800258e:	8b3b      	ldrh	r3, [r7, #24]
 8002590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800259c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01f      	beq.n	80025ee <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c8:	82fb      	strh	r3, [r7, #22]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	441a      	add	r2, r3
 80025d8:	8afb      	ldrh	r3, [r7, #22]
 80025da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025ee:	8b7b      	ldrh	r3, [r7, #26]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 8087 	beq.w	8002704 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	6959      	ldr	r1, [r3, #20]
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	891a      	ldrh	r2, [r3, #8]
 8002602:	8b7b      	ldrh	r3, [r7, #26]
 8002604:	f004 faad 	bl	8006b62 <USB_ReadPMA>
 8002608:	e07c      	b.n	8002704 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002612:	b29b      	uxth	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	3306      	adds	r3, #6
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	4413      	add	r3, r2
 8002628:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002632:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	699a      	ldr	r2, [r3, #24]
 8002638:	8b7b      	ldrh	r3, [r7, #26]
 800263a:	429a      	cmp	r2, r3
 800263c:	d306      	bcc.n	800264c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	8b7b      	ldrh	r3, [r7, #26]
 8002644:	1ad2      	subs	r2, r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	619a      	str	r2, [r3, #24]
 800264a:	e002      	b.n	8002652 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2200      	movs	r2, #0
 8002650:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d123      	bne.n	80026a2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	b29b      	uxth	r3, r3
 800266c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002674:	83fb      	strh	r3, [r7, #30]
 8002676:	8bfb      	ldrh	r3, [r7, #30]
 8002678:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800267c:	83fb      	strh	r3, [r7, #30]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	441a      	add	r2, r3
 800268c:	8bfb      	ldrh	r3, [r7, #30]
 800268e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800269a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800269e:	b29b      	uxth	r3, r3
 80026a0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80026a2:	88fb      	ldrh	r3, [r7, #6]
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d11f      	bne.n	80026ec <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	461a      	mov	r2, r3
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c6:	83bb      	strh	r3, [r7, #28]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	441a      	add	r2, r3
 80026d6:	8bbb      	ldrh	r3, [r7, #28]
 80026d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026ec:	8b7b      	ldrh	r3, [r7, #26]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	6959      	ldr	r1, [r3, #20]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	895a      	ldrh	r2, [r3, #10]
 80026fe:	8b7b      	ldrh	r3, [r7, #26]
 8002700:	f004 fa2f 	bl	8006b62 <USB_ReadPMA>
    }
  }

  return count;
 8002704:	8b7b      	ldrh	r3, [r7, #26]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3720      	adds	r7, #32
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b0a2      	sub	sp, #136	; 0x88
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	4613      	mov	r3, r2
 800271a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 81c7 	beq.w	8002ab6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002730:	b29b      	uxth	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	3302      	adds	r3, #2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	4413      	add	r3, r2
 8002746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002750:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	699a      	ldr	r2, [r3, #24]
 8002758:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800275c:	429a      	cmp	r2, r3
 800275e:	d907      	bls.n	8002770 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	699a      	ldr	r2, [r3, #24]
 8002764:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002768:	1ad2      	subs	r2, r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	619a      	str	r2, [r3, #24]
 800276e:	e002      	b.n	8002776 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2200      	movs	r2, #0
 8002774:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	f040 80b9 	bne.w	80028f2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	785b      	ldrb	r3, [r3, #1]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d126      	bne.n	80027d6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	62bb      	str	r3, [r7, #40]	; 0x28
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002796:	b29b      	uxth	r3, r3
 8002798:	461a      	mov	r2, r3
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	4413      	add	r3, r2
 800279e:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	011a      	lsls	r2, r3, #4
 80027a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a8:	4413      	add	r3, r2
 80027aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	801a      	strh	r2, [r3, #0]
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	801a      	strh	r2, [r3, #0]
 80027d4:	e01a      	b.n	800280c <HAL_PCD_EP_DB_Transmit+0xfe>
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	785b      	ldrb	r3, [r3, #1]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d116      	bne.n	800280c <HAL_PCD_EP_DB_Transmit+0xfe>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	633b      	str	r3, [r7, #48]	; 0x30
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	461a      	mov	r2, r3
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	4413      	add	r3, r2
 80027f4:	633b      	str	r3, [r7, #48]	; 0x30
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	011a      	lsls	r2, r3, #4
 80027fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fe:	4413      	add	r3, r2
 8002800:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002808:	2200      	movs	r2, #0
 800280a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	623b      	str	r3, [r7, #32]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	785b      	ldrb	r3, [r3, #1]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d126      	bne.n	8002868 <HAL_PCD_EP_DB_Transmit+0x15a>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002828:	b29b      	uxth	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	4413      	add	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	011a      	lsls	r2, r3, #4
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	4413      	add	r3, r2
 800283c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800284c:	b29a      	uxth	r2, r3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	801a      	strh	r2, [r3, #0]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	881b      	ldrh	r3, [r3, #0]
 8002856:	b29b      	uxth	r3, r3
 8002858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800285c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002860:	b29a      	uxth	r2, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	801a      	strh	r2, [r3, #0]
 8002866:	e017      	b.n	8002898 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	785b      	ldrb	r3, [r3, #1]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d113      	bne.n	8002898 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002878:	b29b      	uxth	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	4413      	add	r3, r2
 8002880:	623b      	str	r3, [r7, #32]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	011a      	lsls	r2, r3, #4
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	4413      	add	r3, r2
 800288c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	2200      	movs	r2, #0
 8002896:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	4619      	mov	r1, r3
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f005 ff0d 	bl	80086be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 82d4 	beq.w	8002e58 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	461a      	mov	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ca:	827b      	strh	r3, [r7, #18]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	441a      	add	r2, r3
 80028da:	8a7b      	ldrh	r3, [r7, #18]
 80028dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	8013      	strh	r3, [r2, #0]
 80028f0:	e2b2      	b.n	8002e58 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d021      	beq.n	8002940 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4413      	add	r3, r2
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	b29b      	uxth	r3, r3
 800290e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002916:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	441a      	add	r2, r3
 8002928:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800292c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293c:	b29b      	uxth	r3, r3
 800293e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002946:	2b01      	cmp	r3, #1
 8002948:	f040 8286 	bne.w	8002e58 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002954:	441a      	add	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	69da      	ldr	r2, [r3, #28]
 800295e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002962:	441a      	add	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	429a      	cmp	r2, r3
 8002972:	d309      	bcc.n	8002988 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	6a1a      	ldr	r2, [r3, #32]
 800297e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002980:	1ad2      	subs	r2, r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	621a      	str	r2, [r3, #32]
 8002986:	e015      	b.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002990:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002994:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800299e:	e009      	b.n	80029b4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2200      	movs	r2, #0
 80029b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	785b      	ldrb	r3, [r3, #1]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d155      	bne.n	8002a68 <HAL_PCD_EP_DB_Transmit+0x35a>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	461a      	mov	r2, r3
 80029ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d0:	4413      	add	r3, r2
 80029d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	011a      	lsls	r2, r3, #4
 80029da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029dc:	4413      	add	r3, r2
 80029de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029e2:	637b      	str	r3, [r7, #52]	; 0x34
 80029e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d112      	bne.n	8002a10 <HAL_PCD_EP_DB_Transmit+0x302>
 80029ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f8:	801a      	strh	r2, [r3, #0]
 80029fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0c:	801a      	strh	r2, [r3, #0]
 8002a0e:	e047      	b.n	8002aa0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a12:	2b3e      	cmp	r3, #62	; 0x3e
 8002a14:	d811      	bhi.n	8002a3a <HAL_PCD_EP_DB_Transmit+0x32c>
 8002a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a18:	085b      	lsrs	r3, r3, #1
 8002a1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_PCD_EP_DB_Transmit+0x31e>
 8002a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a28:	3301      	adds	r3, #1
 8002a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	029b      	lsls	r3, r3, #10
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a36:	801a      	strh	r2, [r3, #0]
 8002a38:	e032      	b.n	8002aa0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d102      	bne.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x342>
 8002a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	029b      	lsls	r3, r3, #10
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a64:	801a      	strh	r2, [r3, #0]
 8002a66:	e01b      	b.n	8002aa0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	785b      	ldrb	r3, [r3, #1]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d117      	bne.n	8002aa0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	643b      	str	r3, [r7, #64]	; 0x40
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a84:	4413      	add	r3, r2
 8002a86:	643b      	str	r3, [r7, #64]	; 0x40
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	011a      	lsls	r2, r3, #4
 8002a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a90:	4413      	add	r3, r2
 8002a92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a9e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	6959      	ldr	r1, [r3, #20]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	891a      	ldrh	r2, [r3, #8]
 8002aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f004 f812 	bl	8006ad8 <USB_WritePMA>
 8002ab4:	e1d0      	b.n	8002e58 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3306      	adds	r3, #6
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ade:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d307      	bcc.n	8002afe <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	699a      	ldr	r2, [r3, #24]
 8002af2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002af6:	1ad2      	subs	r2, r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	619a      	str	r2, [r3, #24]
 8002afc:	e002      	b.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f040 80c4 	bne.w	8002c96 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	785b      	ldrb	r3, [r3, #1]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d126      	bne.n	8002b64 <HAL_PCD_EP_DB_Transmit+0x456>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2a:	4413      	add	r3, r2
 8002b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	011a      	lsls	r2, r3, #4
 8002b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b36:	4413      	add	r3, r2
 8002b38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b4c:	801a      	strh	r2, [r3, #0]
 8002b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b60:	801a      	strh	r2, [r3, #0]
 8002b62:	e01a      	b.n	8002b9a <HAL_PCD_EP_DB_Transmit+0x48c>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	785b      	ldrb	r3, [r3, #1]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d116      	bne.n	8002b9a <HAL_PCD_EP_DB_Transmit+0x48c>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	677b      	str	r3, [r7, #116]	; 0x74
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b80:	4413      	add	r3, r2
 8002b82:	677b      	str	r3, [r7, #116]	; 0x74
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	011a      	lsls	r2, r3, #4
 8002b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b8c:	4413      	add	r3, r2
 8002b8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b92:	673b      	str	r3, [r7, #112]	; 0x70
 8002b94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b96:	2200      	movs	r2, #0
 8002b98:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d12f      	bne.n	8002c08 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	011a      	lsls	r2, r3, #4
 8002bcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bec:	801a      	strh	r2, [r3, #0]
 8002bee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c04:	801a      	strh	r2, [r3, #0]
 8002c06:	e017      	b.n	8002c38 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	785b      	ldrb	r3, [r3, #1]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d113      	bne.n	8002c38 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c1e:	4413      	add	r3, r2
 8002c20:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	011a      	lsls	r2, r3, #4
 8002c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c34:	2200      	movs	r2, #0
 8002c36:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f005 fd3d 	bl	80086be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 8104 	bne.w	8002e58 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	441a      	add	r2, r3
 8002c7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002c80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	8013      	strh	r3, [r2, #0]
 8002c94:	e0e0      	b.n	8002e58 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c96:	88fb      	ldrh	r3, [r7, #6]
 8002c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d121      	bne.n	8002ce4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	441a      	add	r2, r3
 8002ccc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	f040 80b4 	bne.w	8002e58 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	695a      	ldr	r2, [r3, #20]
 8002cf4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cf8:	441a      	add	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d06:	441a      	add	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	6a1a      	ldr	r2, [r3, #32]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d309      	bcc.n	8002d2c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	6a1a      	ldr	r2, [r3, #32]
 8002d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d24:	1ad2      	subs	r2, r2, r3
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	621a      	str	r2, [r3, #32]
 8002d2a:	e015      	b.n	8002d58 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d107      	bne.n	8002d44 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002d34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d38:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d42:	e009      	b.n	8002d58 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	667b      	str	r3, [r7, #100]	; 0x64
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	785b      	ldrb	r3, [r3, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d155      	bne.n	8002e12 <HAL_PCD_EP_DB_Transmit+0x704>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d7a:	4413      	add	r3, r2
 8002d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	011a      	lsls	r2, r3, #4
 8002d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d86:	4413      	add	r3, r2
 8002d88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d112      	bne.n	8002dba <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002d94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002da2:	801a      	strh	r2, [r3, #0]
 8002da4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002db6:	801a      	strh	r2, [r3, #0]
 8002db8:	e044      	b.n	8002e44 <HAL_PCD_EP_DB_Transmit+0x736>
 8002dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dbc:	2b3e      	cmp	r3, #62	; 0x3e
 8002dbe:	d811      	bhi.n	8002de4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc2:	085b      	lsrs	r3, r3, #1
 8002dc4:	657b      	str	r3, [r7, #84]	; 0x54
 8002dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	657b      	str	r3, [r7, #84]	; 0x54
 8002dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	029b      	lsls	r3, r3, #10
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de0:	801a      	strh	r2, [r3, #0]
 8002de2:	e02f      	b.n	8002e44 <HAL_PCD_EP_DB_Transmit+0x736>
 8002de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	657b      	str	r3, [r7, #84]	; 0x54
 8002dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d102      	bne.n	8002dfa <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df6:	3b01      	subs	r3, #1
 8002df8:	657b      	str	r3, [r7, #84]	; 0x54
 8002dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	029b      	lsls	r3, r3, #10
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e0e:	801a      	strh	r2, [r3, #0]
 8002e10:	e018      	b.n	8002e44 <HAL_PCD_EP_DB_Transmit+0x736>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	785b      	ldrb	r3, [r3, #1]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d114      	bne.n	8002e44 <HAL_PCD_EP_DB_Transmit+0x736>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e28:	4413      	add	r3, r2
 8002e2a:	667b      	str	r3, [r7, #100]	; 0x64
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	011a      	lsls	r2, r3, #4
 8002e32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e34:	4413      	add	r3, r2
 8002e36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e3a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e42:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	6959      	ldr	r1, [r3, #20]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	895a      	ldrh	r2, [r3, #10]
 8002e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f003 fe40 	bl	8006ad8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e72:	823b      	strh	r3, [r7, #16]
 8002e74:	8a3b      	ldrh	r3, [r7, #16]
 8002e76:	f083 0310 	eor.w	r3, r3, #16
 8002e7a:	823b      	strh	r3, [r7, #16]
 8002e7c:	8a3b      	ldrh	r3, [r7, #16]
 8002e7e:	f083 0320 	eor.w	r3, r3, #32
 8002e82:	823b      	strh	r3, [r7, #16]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	441a      	add	r2, r3
 8002e92:	8a3b      	ldrh	r3, [r7, #16]
 8002e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3788      	adds	r7, #136	; 0x88
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b087      	sub	sp, #28
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	607b      	str	r3, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	817b      	strh	r3, [r7, #10]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ec4:	897b      	ldrh	r3, [r7, #10]
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00b      	beq.n	8002ee8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed0:	897b      	ldrh	r3, [r7, #10]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]
 8002ee6:	e009      	b.n	8002efc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ee8:	897a      	ldrh	r2, [r7, #10]
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4413      	add	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002efc:	893b      	ldrh	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d107      	bne.n	8002f12 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2200      	movs	r2, #0
 8002f06:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	80da      	strh	r2, [r3, #6]
 8002f10:	e00b      	b.n	8002f2a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2201      	movs	r2, #1
 8002f16:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	0c1b      	lsrs	r3, r3, #16
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	371c      	adds	r7, #28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e272      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 8087 	beq.w	8003066 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f58:	4b92      	ldr	r3, [pc, #584]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 030c 	and.w	r3, r3, #12
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d00c      	beq.n	8002f7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f64:	4b8f      	ldr	r3, [pc, #572]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 030c 	and.w	r3, r3, #12
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d112      	bne.n	8002f96 <HAL_RCC_OscConfig+0x5e>
 8002f70:	4b8c      	ldr	r3, [pc, #560]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7c:	d10b      	bne.n	8002f96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7e:	4b89      	ldr	r3, [pc, #548]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d06c      	beq.n	8003064 <HAL_RCC_OscConfig+0x12c>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d168      	bne.n	8003064 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e24c      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9e:	d106      	bne.n	8002fae <HAL_RCC_OscConfig+0x76>
 8002fa0:	4b80      	ldr	r3, [pc, #512]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a7f      	ldr	r2, [pc, #508]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8002fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	e02e      	b.n	800300c <HAL_RCC_OscConfig+0xd4>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x98>
 8002fb6:	4b7b      	ldr	r3, [pc, #492]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a7a      	ldr	r2, [pc, #488]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4b78      	ldr	r3, [pc, #480]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a77      	ldr	r2, [pc, #476]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e01d      	b.n	800300c <HAL_RCC_OscConfig+0xd4>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fd8:	d10c      	bne.n	8002ff4 <HAL_RCC_OscConfig+0xbc>
 8002fda:	4b72      	ldr	r3, [pc, #456]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a71      	ldr	r2, [pc, #452]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	4b6f      	ldr	r3, [pc, #444]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a6e      	ldr	r2, [pc, #440]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e00b      	b.n	800300c <HAL_RCC_OscConfig+0xd4>
 8002ff4:	4b6b      	ldr	r3, [pc, #428]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a6a      	ldr	r2, [pc, #424]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8002ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	4b68      	ldr	r3, [pc, #416]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a67      	ldr	r2, [pc, #412]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8003006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800300a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d013      	beq.n	800303c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fd fff4 	bl	8001000 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800301c:	f7fd fff0 	bl	8001000 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e200      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	4b5d      	ldr	r3, [pc, #372]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0xe4>
 800303a:	e014      	b.n	8003066 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fd ffe0 	bl	8001000 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003044:	f7fd ffdc 	bl	8001000 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	; 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e1ec      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003056:	4b53      	ldr	r3, [pc, #332]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x10c>
 8003062:	e000      	b.n	8003066 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d063      	beq.n	800313a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003072:	4b4c      	ldr	r3, [pc, #304]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 030c 	and.w	r3, r3, #12
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00b      	beq.n	8003096 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800307e:	4b49      	ldr	r3, [pc, #292]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b08      	cmp	r3, #8
 8003088:	d11c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x18c>
 800308a:	4b46      	ldr	r3, [pc, #280]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d116      	bne.n	80030c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003096:	4b43      	ldr	r3, [pc, #268]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <HAL_RCC_OscConfig+0x176>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d001      	beq.n	80030ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e1c0      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ae:	4b3d      	ldr	r3, [pc, #244]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4939      	ldr	r1, [pc, #228]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c2:	e03a      	b.n	800313a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d020      	beq.n	800310e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030cc:	4b36      	ldr	r3, [pc, #216]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d2:	f7fd ff95 	bl	8001000 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030da:	f7fd ff91 	bl	8001000 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e1a1      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ec:	4b2d      	ldr	r3, [pc, #180]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f8:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4927      	ldr	r1, [pc, #156]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8003108:	4313      	orrs	r3, r2
 800310a:	600b      	str	r3, [r1, #0]
 800310c:	e015      	b.n	800313a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800310e:	4b26      	ldr	r3, [pc, #152]	; (80031a8 <HAL_RCC_OscConfig+0x270>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fd ff74 	bl	8001000 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800311c:	f7fd ff70 	bl	8001000 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e180      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312e:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d03a      	beq.n	80031bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d019      	beq.n	8003182 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314e:	4b17      	ldr	r3, [pc, #92]	; (80031ac <HAL_RCC_OscConfig+0x274>)
 8003150:	2201      	movs	r2, #1
 8003152:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003154:	f7fd ff54 	bl	8001000 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800315c:	f7fd ff50 	bl	8001000 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e160      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <HAL_RCC_OscConfig+0x26c>)
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800317a:	2001      	movs	r0, #1
 800317c:	f000 faa6 	bl	80036cc <RCC_Delay>
 8003180:	e01c      	b.n	80031bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003182:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <HAL_RCC_OscConfig+0x274>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003188:	f7fd ff3a 	bl	8001000 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800318e:	e00f      	b.n	80031b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003190:	f7fd ff36 	bl	8001000 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d908      	bls.n	80031b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e146      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000
 80031a8:	42420000 	.word	0x42420000
 80031ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b0:	4b92      	ldr	r3, [pc, #584]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1e9      	bne.n	8003190 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 80a6 	beq.w	8003316 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ca:	2300      	movs	r3, #0
 80031cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ce:	4b8b      	ldr	r3, [pc, #556]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10d      	bne.n	80031f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031da:	4b88      	ldr	r3, [pc, #544]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	4a87      	ldr	r2, [pc, #540]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e4:	61d3      	str	r3, [r2, #28]
 80031e6:	4b85      	ldr	r3, [pc, #532]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	60bb      	str	r3, [r7, #8]
 80031f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f2:	2301      	movs	r3, #1
 80031f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f6:	4b82      	ldr	r3, [pc, #520]	; (8003400 <HAL_RCC_OscConfig+0x4c8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d118      	bne.n	8003234 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003202:	4b7f      	ldr	r3, [pc, #508]	; (8003400 <HAL_RCC_OscConfig+0x4c8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a7e      	ldr	r2, [pc, #504]	; (8003400 <HAL_RCC_OscConfig+0x4c8>)
 8003208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320e:	f7fd fef7 	bl	8001000 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003216:	f7fd fef3 	bl	8001000 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b64      	cmp	r3, #100	; 0x64
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e103      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003228:	4b75      	ldr	r3, [pc, #468]	; (8003400 <HAL_RCC_OscConfig+0x4c8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d106      	bne.n	800324a <HAL_RCC_OscConfig+0x312>
 800323c:	4b6f      	ldr	r3, [pc, #444]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	4a6e      	ldr	r2, [pc, #440]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	6213      	str	r3, [r2, #32]
 8003248:	e02d      	b.n	80032a6 <HAL_RCC_OscConfig+0x36e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10c      	bne.n	800326c <HAL_RCC_OscConfig+0x334>
 8003252:	4b6a      	ldr	r3, [pc, #424]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4a69      	ldr	r2, [pc, #420]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	6213      	str	r3, [r2, #32]
 800325e:	4b67      	ldr	r3, [pc, #412]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	4a66      	ldr	r2, [pc, #408]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 8003264:	f023 0304 	bic.w	r3, r3, #4
 8003268:	6213      	str	r3, [r2, #32]
 800326a:	e01c      	b.n	80032a6 <HAL_RCC_OscConfig+0x36e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b05      	cmp	r3, #5
 8003272:	d10c      	bne.n	800328e <HAL_RCC_OscConfig+0x356>
 8003274:	4b61      	ldr	r3, [pc, #388]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	4a60      	ldr	r2, [pc, #384]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 800327a:	f043 0304 	orr.w	r3, r3, #4
 800327e:	6213      	str	r3, [r2, #32]
 8003280:	4b5e      	ldr	r3, [pc, #376]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	4a5d      	ldr	r2, [pc, #372]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	6213      	str	r3, [r2, #32]
 800328c:	e00b      	b.n	80032a6 <HAL_RCC_OscConfig+0x36e>
 800328e:	4b5b      	ldr	r3, [pc, #364]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	4a5a      	ldr	r2, [pc, #360]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	6213      	str	r3, [r2, #32]
 800329a:	4b58      	ldr	r3, [pc, #352]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	4a57      	ldr	r2, [pc, #348]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 80032a0:	f023 0304 	bic.w	r3, r3, #4
 80032a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d015      	beq.n	80032da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ae:	f7fd fea7 	bl	8001000 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b4:	e00a      	b.n	80032cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b6:	f7fd fea3 	bl	8001000 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e0b1      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032cc:	4b4b      	ldr	r3, [pc, #300]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ee      	beq.n	80032b6 <HAL_RCC_OscConfig+0x37e>
 80032d8:	e014      	b.n	8003304 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032da:	f7fd fe91 	bl	8001000 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e0:	e00a      	b.n	80032f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e2:	f7fd fe8d 	bl	8001000 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e09b      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f8:	4b40      	ldr	r3, [pc, #256]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1ee      	bne.n	80032e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003304:	7dfb      	ldrb	r3, [r7, #23]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d105      	bne.n	8003316 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330a:	4b3c      	ldr	r3, [pc, #240]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	4a3b      	ldr	r2, [pc, #236]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 8003310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003314:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8087 	beq.w	800342e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003320:	4b36      	ldr	r3, [pc, #216]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 030c 	and.w	r3, r3, #12
 8003328:	2b08      	cmp	r3, #8
 800332a:	d061      	beq.n	80033f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d146      	bne.n	80033c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003334:	4b33      	ldr	r3, [pc, #204]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fd fe61 	bl	8001000 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003342:	f7fd fe5d 	bl	8001000 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e06d      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003354:	4b29      	ldr	r3, [pc, #164]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f0      	bne.n	8003342 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003368:	d108      	bne.n	800337c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800336a:	4b24      	ldr	r3, [pc, #144]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	4921      	ldr	r1, [pc, #132]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800337c:	4b1f      	ldr	r3, [pc, #124]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a19      	ldr	r1, [r3, #32]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	430b      	orrs	r3, r1
 800338e:	491b      	ldr	r1, [pc, #108]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003394:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 8003396:	2201      	movs	r2, #1
 8003398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339a:	f7fd fe31 	bl	8001000 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fd fe2d 	bl	8001000 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e03d      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033b4:	4b11      	ldr	r3, [pc, #68]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x46a>
 80033c0:	e035      	b.n	800342e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c2:	4b10      	ldr	r3, [pc, #64]	; (8003404 <HAL_RCC_OscConfig+0x4cc>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fd fe1a 	bl	8001000 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033d0:	f7fd fe16 	bl	8001000 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e026      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e2:	4b06      	ldr	r3, [pc, #24]	; (80033fc <HAL_RCC_OscConfig+0x4c4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x498>
 80033ee:	e01e      	b.n	800342e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e019      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>
 80033fc:	40021000 	.word	0x40021000
 8003400:	40007000 	.word	0x40007000
 8003404:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_RCC_OscConfig+0x500>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	429a      	cmp	r2, r3
 800341a:	d106      	bne.n	800342a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003426:	429a      	cmp	r2, r3
 8003428:	d001      	beq.n	800342e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e000      	b.n	8003430 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000

0800343c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0d0      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003450:	4b6a      	ldr	r3, [pc, #424]	; (80035fc <HAL_RCC_ClockConfig+0x1c0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d910      	bls.n	8003480 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345e:	4b67      	ldr	r3, [pc, #412]	; (80035fc <HAL_RCC_ClockConfig+0x1c0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f023 0207 	bic.w	r2, r3, #7
 8003466:	4965      	ldr	r1, [pc, #404]	; (80035fc <HAL_RCC_ClockConfig+0x1c0>)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800346e:	4b63      	ldr	r3, [pc, #396]	; (80035fc <HAL_RCC_ClockConfig+0x1c0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	429a      	cmp	r2, r3
 800347a:	d001      	beq.n	8003480 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0b8      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d020      	beq.n	80034ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003498:	4b59      	ldr	r3, [pc, #356]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4a58      	ldr	r2, [pc, #352]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 800349e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80034a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034b0:	4b53      	ldr	r3, [pc, #332]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a52      	ldr	r2, [pc, #328]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034bc:	4b50      	ldr	r3, [pc, #320]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	494d      	ldr	r1, [pc, #308]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d040      	beq.n	800355c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d107      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e2:	4b47      	ldr	r3, [pc, #284]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d115      	bne.n	800351a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e07f      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d107      	bne.n	800350a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fa:	4b41      	ldr	r3, [pc, #260]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d109      	bne.n	800351a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e073      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350a:	4b3d      	ldr	r3, [pc, #244]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e06b      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800351a:	4b39      	ldr	r3, [pc, #228]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f023 0203 	bic.w	r2, r3, #3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4936      	ldr	r1, [pc, #216]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	4313      	orrs	r3, r2
 800352a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800352c:	f7fd fd68 	bl	8001000 <HAL_GetTick>
 8003530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003532:	e00a      	b.n	800354a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003534:	f7fd fd64 	bl	8001000 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e053      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354a:	4b2d      	ldr	r3, [pc, #180]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 020c 	and.w	r2, r3, #12
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	429a      	cmp	r2, r3
 800355a:	d1eb      	bne.n	8003534 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800355c:	4b27      	ldr	r3, [pc, #156]	; (80035fc <HAL_RCC_ClockConfig+0x1c0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d210      	bcs.n	800358c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b24      	ldr	r3, [pc, #144]	; (80035fc <HAL_RCC_ClockConfig+0x1c0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 0207 	bic.w	r2, r3, #7
 8003572:	4922      	ldr	r1, [pc, #136]	; (80035fc <HAL_RCC_ClockConfig+0x1c0>)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b20      	ldr	r3, [pc, #128]	; (80035fc <HAL_RCC_ClockConfig+0x1c0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e032      	b.n	80035f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0304 	and.w	r3, r3, #4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003598:	4b19      	ldr	r3, [pc, #100]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4916      	ldr	r1, [pc, #88]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d009      	beq.n	80035ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	490e      	ldr	r1, [pc, #56]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035ca:	f000 f821 	bl	8003610 <HAL_RCC_GetSysClockFreq>
 80035ce:	4602      	mov	r2, r0
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	490a      	ldr	r1, [pc, #40]	; (8003604 <HAL_RCC_ClockConfig+0x1c8>)
 80035dc:	5ccb      	ldrb	r3, [r1, r3]
 80035de:	fa22 f303 	lsr.w	r3, r2, r3
 80035e2:	4a09      	ldr	r2, [pc, #36]	; (8003608 <HAL_RCC_ClockConfig+0x1cc>)
 80035e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_RCC_ClockConfig+0x1d0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fd fcc6 	bl	8000f7c <HAL_InitTick>

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	40022000 	.word	0x40022000
 8003600:	40021000 	.word	0x40021000
 8003604:	08009c88 	.word	0x08009c88
 8003608:	20000008 	.word	0x20000008
 800360c:	2000000c 	.word	0x2000000c

08003610 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003610:	b490      	push	{r4, r7}
 8003612:	b08a      	sub	sp, #40	; 0x28
 8003614:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003616:	4b29      	ldr	r3, [pc, #164]	; (80036bc <HAL_RCC_GetSysClockFreq+0xac>)
 8003618:	1d3c      	adds	r4, r7, #4
 800361a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800361c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003620:	f240 2301 	movw	r3, #513	; 0x201
 8003624:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	2300      	movs	r3, #0
 800362c:	61bb      	str	r3, [r7, #24]
 800362e:	2300      	movs	r3, #0
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800363a:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b04      	cmp	r3, #4
 8003648:	d002      	beq.n	8003650 <HAL_RCC_GetSysClockFreq+0x40>
 800364a:	2b08      	cmp	r3, #8
 800364c:	d003      	beq.n	8003656 <HAL_RCC_GetSysClockFreq+0x46>
 800364e:	e02b      	b.n	80036a8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003650:	4b1c      	ldr	r3, [pc, #112]	; (80036c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003652:	623b      	str	r3, [r7, #32]
      break;
 8003654:	e02b      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	0c9b      	lsrs	r3, r3, #18
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	3328      	adds	r3, #40	; 0x28
 8003660:	443b      	add	r3, r7
 8003662:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003666:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d012      	beq.n	8003698 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003672:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	0c5b      	lsrs	r3, r3, #17
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	3328      	adds	r3, #40	; 0x28
 800367e:	443b      	add	r3, r7
 8003680:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003684:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	4a0e      	ldr	r2, [pc, #56]	; (80036c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800368a:	fb03 f202 	mul.w	r2, r3, r2
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	fbb2 f3f3 	udiv	r3, r2, r3
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
 8003696:	e004      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	4a0b      	ldr	r2, [pc, #44]	; (80036c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800369c:	fb02 f303 	mul.w	r3, r2, r3
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	623b      	str	r3, [r7, #32]
      break;
 80036a6:	e002      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80036aa:	623b      	str	r3, [r7, #32]
      break;
 80036ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ae:	6a3b      	ldr	r3, [r7, #32]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3728      	adds	r7, #40	; 0x28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc90      	pop	{r4, r7}
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	08009b00 	.word	0x08009b00
 80036c0:	40021000 	.word	0x40021000
 80036c4:	007a1200 	.word	0x007a1200
 80036c8:	003d0900 	.word	0x003d0900

080036cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036d4:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <RCC_Delay+0x34>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <RCC_Delay+0x38>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	0a5b      	lsrs	r3, r3, #9
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036e8:	bf00      	nop
  }
  while (Delay --);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	1e5a      	subs	r2, r3, #1
 80036ee:	60fa      	str	r2, [r7, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f9      	bne.n	80036e8 <RCC_Delay+0x1c>
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	20000008 	.word	0x20000008
 8003704:	10624dd3 	.word	0x10624dd3

08003708 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d07d      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003724:	2300      	movs	r3, #0
 8003726:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003728:	4b4f      	ldr	r3, [pc, #316]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10d      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003734:	4b4c      	ldr	r3, [pc, #304]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	4a4b      	ldr	r2, [pc, #300]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373e:	61d3      	str	r3, [r2, #28]
 8003740:	4b49      	ldr	r3, [pc, #292]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800374c:	2301      	movs	r3, #1
 800374e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	4b46      	ldr	r3, [pc, #280]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d118      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800375c:	4b43      	ldr	r3, [pc, #268]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a42      	ldr	r2, [pc, #264]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003766:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003768:	f7fd fc4a 	bl	8001000 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376e:	e008      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003770:	f7fd fc46 	bl	8001000 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b64      	cmp	r3, #100	; 0x64
 800377c:	d901      	bls.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e06d      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003782:	4b3a      	ldr	r3, [pc, #232]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800378e:	4b36      	ldr	r3, [pc, #216]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003796:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d02e      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d027      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037ac:	4b2e      	ldr	r3, [pc, #184]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037b6:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037bc:	4b2c      	ldr	r3, [pc, #176]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037c2:	4a29      	ldr	r2, [pc, #164]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d014      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d2:	f7fd fc15 	bl	8001000 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d8:	e00a      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037da:	f7fd fc11 	bl	8001000 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e036      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f0:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0ee      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037fc:	4b1a      	ldr	r3, [pc, #104]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4917      	ldr	r1, [pc, #92]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380a:	4313      	orrs	r3, r2
 800380c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800380e:	7dfb      	ldrb	r3, [r7, #23]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d105      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003814:	4b14      	ldr	r3, [pc, #80]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	4a13      	ldr	r2, [pc, #76]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800381e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	490b      	ldr	r1, [pc, #44]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0310 	and.w	r3, r3, #16
 8003846:	2b00      	cmp	r3, #0
 8003848:	d008      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800384a:	4b07      	ldr	r3, [pc, #28]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	4904      	ldr	r1, [pc, #16]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003858:	4313      	orrs	r3, r2
 800385a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40021000 	.word	0x40021000
 800386c:	40007000 	.word	0x40007000
 8003870:	42420440 	.word	0x42420440

08003874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e041      	b.n	800390a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fd fa96 	bl	8000dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f000 fa70 	bl	8003d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d001      	beq.n	800392c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e03a      	b.n	80039a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a18      	ldr	r2, [pc, #96]	; (80039ac <HAL_TIM_Base_Start_IT+0x98>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00e      	beq.n	800396c <HAL_TIM_Base_Start_IT+0x58>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003956:	d009      	beq.n	800396c <HAL_TIM_Base_Start_IT+0x58>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a14      	ldr	r2, [pc, #80]	; (80039b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <HAL_TIM_Base_Start_IT+0x58>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d111      	bne.n	8003990 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b06      	cmp	r3, #6
 800397c:	d010      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0201 	orr.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398e:	e007      	b.n	80039a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc80      	pop	{r7}
 80039aa:	4770      	bx	lr
 80039ac:	40012c00 	.word	0x40012c00
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800

080039b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d122      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d11b      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0202 	mvn.w	r2, #2
 80039e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f9b1 	bl	8003d62 <HAL_TIM_IC_CaptureCallback>
 8003a00:	e005      	b.n	8003a0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f9a4 	bl	8003d50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f9b3 	bl	8003d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d122      	bne.n	8003a68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d11b      	bne.n	8003a68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f06f 0204 	mvn.w	r2, #4
 8003a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f987 	bl	8003d62 <HAL_TIM_IC_CaptureCallback>
 8003a54:	e005      	b.n	8003a62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f97a 	bl	8003d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f989 	bl	8003d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d122      	bne.n	8003abc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d11b      	bne.n	8003abc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0208 	mvn.w	r2, #8
 8003a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2204      	movs	r2, #4
 8003a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f95d 	bl	8003d62 <HAL_TIM_IC_CaptureCallback>
 8003aa8:	e005      	b.n	8003ab6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f950 	bl	8003d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f95f 	bl	8003d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	2b10      	cmp	r3, #16
 8003ac8:	d122      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d11b      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f06f 0210 	mvn.w	r2, #16
 8003ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f933 	bl	8003d62 <HAL_TIM_IC_CaptureCallback>
 8003afc:	e005      	b.n	8003b0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f926 	bl	8003d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f935 	bl	8003d74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d10e      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d107      	bne.n	8003b3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0201 	mvn.w	r2, #1
 8003b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd f8fa 	bl	8000d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b46:	2b80      	cmp	r3, #128	; 0x80
 8003b48:	d10e      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b54:	2b80      	cmp	r3, #128	; 0x80
 8003b56:	d107      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fa77 	bl	8004056 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b72:	2b40      	cmp	r3, #64	; 0x40
 8003b74:	d10e      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d107      	bne.n	8003b94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f8f9 	bl	8003d86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d10e      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d107      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f06f 0220 	mvn.w	r2, #32
 8003bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 fa42 	bl	8004044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_TIM_ConfigClockSource+0x18>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e0b3      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x180>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c18:	d03e      	beq.n	8003c98 <HAL_TIM_ConfigClockSource+0xd0>
 8003c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c1e:	f200 8087 	bhi.w	8003d30 <HAL_TIM_ConfigClockSource+0x168>
 8003c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c26:	f000 8085 	beq.w	8003d34 <HAL_TIM_ConfigClockSource+0x16c>
 8003c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c2e:	d87f      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x168>
 8003c30:	2b70      	cmp	r3, #112	; 0x70
 8003c32:	d01a      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0xa2>
 8003c34:	2b70      	cmp	r3, #112	; 0x70
 8003c36:	d87b      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x168>
 8003c38:	2b60      	cmp	r3, #96	; 0x60
 8003c3a:	d050      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0x116>
 8003c3c:	2b60      	cmp	r3, #96	; 0x60
 8003c3e:	d877      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x168>
 8003c40:	2b50      	cmp	r3, #80	; 0x50
 8003c42:	d03c      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0xf6>
 8003c44:	2b50      	cmp	r3, #80	; 0x50
 8003c46:	d873      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x168>
 8003c48:	2b40      	cmp	r3, #64	; 0x40
 8003c4a:	d058      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x136>
 8003c4c:	2b40      	cmp	r3, #64	; 0x40
 8003c4e:	d86f      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x168>
 8003c50:	2b30      	cmp	r3, #48	; 0x30
 8003c52:	d064      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x156>
 8003c54:	2b30      	cmp	r3, #48	; 0x30
 8003c56:	d86b      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x168>
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d060      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x156>
 8003c5c:	2b20      	cmp	r3, #32
 8003c5e:	d867      	bhi.n	8003d30 <HAL_TIM_ConfigClockSource+0x168>
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d05c      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x156>
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d05a      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003c68:	e062      	b.n	8003d30 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6899      	ldr	r1, [r3, #8]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f000 f966 	bl	8003f4a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	609a      	str	r2, [r3, #8]
      break;
 8003c96:	e04e      	b.n	8003d36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6818      	ldr	r0, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6899      	ldr	r1, [r3, #8]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f000 f94f 	bl	8003f4a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cba:	609a      	str	r2, [r3, #8]
      break;
 8003cbc:	e03b      	b.n	8003d36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6859      	ldr	r1, [r3, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f000 f8c6 	bl	8003e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2150      	movs	r1, #80	; 0x50
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f91d 	bl	8003f16 <TIM_ITRx_SetConfig>
      break;
 8003cdc:	e02b      	b.n	8003d36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f000 f8e4 	bl	8003eb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2160      	movs	r1, #96	; 0x60
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f90d 	bl	8003f16 <TIM_ITRx_SetConfig>
      break;
 8003cfc:	e01b      	b.n	8003d36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6859      	ldr	r1, [r3, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f000 f8a6 	bl	8003e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2140      	movs	r1, #64	; 0x40
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 f8fd 	bl	8003f16 <TIM_ITRx_SetConfig>
      break;
 8003d1c:	e00b      	b.n	8003d36 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4619      	mov	r1, r3
 8003d28:	4610      	mov	r0, r2
 8003d2a:	f000 f8f4 	bl	8003f16 <TIM_ITRx_SetConfig>
        break;
 8003d2e:	e002      	b.n	8003d36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d30:	bf00      	nop
 8003d32:	e000      	b.n	8003d36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr

08003d62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a29      	ldr	r2, [pc, #164]	; (8003e50 <TIM_Base_SetConfig+0xb8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00b      	beq.n	8003dc8 <TIM_Base_SetConfig+0x30>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db6:	d007      	beq.n	8003dc8 <TIM_Base_SetConfig+0x30>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a26      	ldr	r2, [pc, #152]	; (8003e54 <TIM_Base_SetConfig+0xbc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_Base_SetConfig+0x30>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a25      	ldr	r2, [pc, #148]	; (8003e58 <TIM_Base_SetConfig+0xc0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d108      	bne.n	8003dda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <TIM_Base_SetConfig+0xb8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00b      	beq.n	8003dfa <TIM_Base_SetConfig+0x62>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de8:	d007      	beq.n	8003dfa <TIM_Base_SetConfig+0x62>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a19      	ldr	r2, [pc, #100]	; (8003e54 <TIM_Base_SetConfig+0xbc>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_Base_SetConfig+0x62>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <TIM_Base_SetConfig+0xc0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d108      	bne.n	8003e0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689a      	ldr	r2, [r3, #8]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a07      	ldr	r2, [pc, #28]	; (8003e50 <TIM_Base_SetConfig+0xb8>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d103      	bne.n	8003e40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	615a      	str	r2, [r3, #20]
}
 8003e46:	bf00      	nop
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bc80      	pop	{r7}
 8003e4e:	4770      	bx	lr
 8003e50:	40012c00 	.word	0x40012c00
 8003e54:	40000400 	.word	0x40000400
 8003e58:	40000800 	.word	0x40000800

08003e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f023 0201 	bic.w	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f023 030a 	bic.w	r3, r3, #10
 8003e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	621a      	str	r2, [r3, #32]
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f023 0210 	bic.w	r2, r3, #16
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ee2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	031b      	lsls	r3, r3, #12
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ef4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	621a      	str	r2, [r3, #32]
}
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr

08003f16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b085      	sub	sp, #20
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f043 0307 	orr.w	r3, r3, #7
 8003f38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	609a      	str	r2, [r3, #8]
}
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bc80      	pop	{r7}
 8003f48:	4770      	bx	lr

08003f4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b087      	sub	sp, #28
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	021a      	lsls	r2, r3, #8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	609a      	str	r2, [r3, #8]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e046      	b.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a16      	ldr	r2, [pc, #88]	; (8004038 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00e      	beq.n	8004002 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fec:	d009      	beq.n	8004002 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a12      	ldr	r2, [pc, #72]	; (800403c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d004      	beq.n	8004002 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a10      	ldr	r2, [pc, #64]	; (8004040 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d10c      	bne.n	800401c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004008:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	4313      	orrs	r3, r2
 8004012:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr
 8004038:	40012c00 	.word	0x40012c00
 800403c:	40000400 	.word	0x40000400
 8004040:	40000800 	.word	0x40000800

08004044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr

08004056 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004068:	b084      	sub	sp, #16
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	f107 0014 	add.w	r0, r7, #20
 8004076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	b004      	add	sp, #16
 8004086:	4770      	bx	lr

08004088 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004098:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800409c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040bc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040c0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	4013      	ands	r3, r2
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004100:	b084      	sub	sp, #16
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	f107 0014 	add.w	r0, r7, #20
 800410e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2201      	movs	r2, #1
 8004116:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	b004      	add	sp, #16
 800413e:	4770      	bx	lr

08004140 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004140:	b480      	push	{r7}
 8004142:	b09b      	sub	sp, #108	; 0x6c
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004166:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	78db      	ldrb	r3, [r3, #3]
 800416e:	2b03      	cmp	r3, #3
 8004170:	d81f      	bhi.n	80041b2 <USB_ActivateEndpoint+0x72>
 8004172:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <USB_ActivateEndpoint+0x38>)
 8004174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004178:	08004189 	.word	0x08004189
 800417c:	080041a5 	.word	0x080041a5
 8004180:	080041bb 	.word	0x080041bb
 8004184:	08004197 	.word	0x08004197
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004188:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800418c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004190:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004194:	e012      	b.n	80041bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004196:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800419a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800419e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041a2:	e00b      	b.n	80041bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80041a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80041b0:	e004      	b.n	80041bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80041b8:	e000      	b.n	80041bc <USB_ActivateEndpoint+0x7c>
      break;
 80041ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	441a      	add	r2, r3
 80041c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80041ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041da:	b29b      	uxth	r3, r3
 80041dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	441a      	add	r2, r3
 800420c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004220:	b29b      	uxth	r3, r3
 8004222:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	7b1b      	ldrb	r3, [r3, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f040 8149 	bne.w	80044c0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	785b      	ldrb	r3, [r3, #1]
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 8084 	beq.w	8004340 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	617b      	str	r3, [r7, #20]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004242:	b29b      	uxth	r3, r3
 8004244:	461a      	mov	r2, r3
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	4413      	add	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	011a      	lsls	r2, r3, #4
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800425a:	613b      	str	r3, [r7, #16]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	88db      	ldrh	r3, [r3, #6]
 8004260:	085b      	lsrs	r3, r3, #1
 8004262:	b29b      	uxth	r3, r3
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	81fb      	strh	r3, [r7, #14]
 800427a:	89fb      	ldrh	r3, [r7, #14]
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01b      	beq.n	80042bc <USB_ActivateEndpoint+0x17c>
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b29b      	uxth	r3, r3
 8004292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429a:	81bb      	strh	r3, [r7, #12]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	441a      	add	r2, r3
 80042a6:	89bb      	ldrh	r3, [r7, #12]
 80042a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	78db      	ldrb	r3, [r3, #3]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d020      	beq.n	8004306 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042da:	813b      	strh	r3, [r7, #8]
 80042dc:	893b      	ldrh	r3, [r7, #8]
 80042de:	f083 0320 	eor.w	r3, r3, #32
 80042e2:	813b      	strh	r3, [r7, #8]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	441a      	add	r2, r3
 80042ee:	893b      	ldrh	r3, [r7, #8]
 80042f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004300:	b29b      	uxth	r3, r3
 8004302:	8013      	strh	r3, [r2, #0]
 8004304:	e27f      	b.n	8004806 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	881b      	ldrh	r3, [r3, #0]
 8004312:	b29b      	uxth	r3, r3
 8004314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800431c:	817b      	strh	r3, [r7, #10]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	441a      	add	r2, r3
 8004328:	897b      	ldrh	r3, [r7, #10]
 800432a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800432e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800433a:	b29b      	uxth	r3, r3
 800433c:	8013      	strh	r3, [r2, #0]
 800433e:	e262      	b.n	8004806 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800434a:	b29b      	uxth	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	4413      	add	r3, r2
 8004352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	011a      	lsls	r2, r3, #4
 800435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435c:	4413      	add	r3, r2
 800435e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	88db      	ldrh	r3, [r3, #6]
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	b29b      	uxth	r3, r3
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800437e:	b29b      	uxth	r3, r3
 8004380:	461a      	mov	r2, r3
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	4413      	add	r3, r2
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	011a      	lsls	r2, r3, #4
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	4413      	add	r3, r2
 8004392:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004396:	623b      	str	r3, [r7, #32]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d112      	bne.n	80043c6 <USB_ActivateEndpoint+0x286>
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	801a      	strh	r2, [r3, #0]
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043be:	b29a      	uxth	r2, r3
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	801a      	strh	r2, [r3, #0]
 80043c4:	e02f      	b.n	8004426 <USB_ActivateEndpoint+0x2e6>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b3e      	cmp	r3, #62	; 0x3e
 80043cc:	d813      	bhi.n	80043f6 <USB_ActivateEndpoint+0x2b6>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	085b      	lsrs	r3, r3, #1
 80043d4:	663b      	str	r3, [r7, #96]	; 0x60
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <USB_ActivateEndpoint+0x2a8>
 80043e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043e4:	3301      	adds	r3, #1
 80043e6:	663b      	str	r3, [r7, #96]	; 0x60
 80043e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	029b      	lsls	r3, r3, #10
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	801a      	strh	r2, [r3, #0]
 80043f4:	e017      	b.n	8004426 <USB_ActivateEndpoint+0x2e6>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	663b      	str	r3, [r7, #96]	; 0x60
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <USB_ActivateEndpoint+0x2d0>
 800440a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800440c:	3b01      	subs	r3, #1
 800440e:	663b      	str	r3, [r7, #96]	; 0x60
 8004410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004412:	b29b      	uxth	r3, r3
 8004414:	029b      	lsls	r3, r3, #10
 8004416:	b29b      	uxth	r3, r3
 8004418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800441c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004420:	b29a      	uxth	r2, r3
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	83fb      	strh	r3, [r7, #30]
 8004434:	8bfb      	ldrh	r3, [r7, #30]
 8004436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01b      	beq.n	8004476 <USB_ActivateEndpoint+0x336>
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004454:	83bb      	strh	r3, [r7, #28]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	441a      	add	r2, r3
 8004460:	8bbb      	ldrh	r3, [r7, #28]
 8004462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004466:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800446a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800446e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004472:	b29b      	uxth	r3, r3
 8004474:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29b      	uxth	r3, r3
 8004484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	837b      	strh	r3, [r7, #26]
 800448e:	8b7b      	ldrh	r3, [r7, #26]
 8004490:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004494:	837b      	strh	r3, [r7, #26]
 8004496:	8b7b      	ldrh	r3, [r7, #26]
 8004498:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800449c:	837b      	strh	r3, [r7, #26]
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	441a      	add	r2, r3
 80044a8:	8b7b      	ldrh	r3, [r7, #26]
 80044aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	8013      	strh	r3, [r2, #0]
 80044be:	e1a2      	b.n	8004806 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	441a      	add	r2, r3
 80044e4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80044e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004506:	b29b      	uxth	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800450c:	4413      	add	r3, r2
 800450e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	011a      	lsls	r2, r3, #4
 8004516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004518:	4413      	add	r3, r2
 800451a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800451e:	657b      	str	r3, [r7, #84]	; 0x54
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	891b      	ldrh	r3, [r3, #8]
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	b29b      	uxth	r3, r3
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	b29a      	uxth	r2, r3
 800452c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800452e:	801a      	strh	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	653b      	str	r3, [r7, #80]	; 0x50
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800453a:	b29b      	uxth	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004540:	4413      	add	r3, r2
 8004542:	653b      	str	r3, [r7, #80]	; 0x50
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	011a      	lsls	r2, r3, #4
 800454a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800454c:	4413      	add	r3, r2
 800454e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	895b      	ldrh	r3, [r3, #10]
 8004558:	085b      	lsrs	r3, r3, #1
 800455a:	b29b      	uxth	r3, r3
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004562:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f040 8091 	bne.w	8004690 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800457c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800457e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d01b      	beq.n	80045be <USB_ActivateEndpoint+0x47e>
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	b29b      	uxth	r3, r3
 8004594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	441a      	add	r2, r3
 80045a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80045aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80045cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80045ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01b      	beq.n	800460e <USB_ActivateEndpoint+0x4ce>
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	441a      	add	r2, r3
 80045f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004606:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800460a:	b29b      	uxth	r3, r3
 800460c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004624:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004626:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004628:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800462c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800462e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004630:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004634:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	441a      	add	r2, r3
 8004640:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004652:	b29b      	uxth	r3, r3
 8004654:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	b29b      	uxth	r3, r3
 8004664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800466c:	867b      	strh	r3, [r7, #50]	; 0x32
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	441a      	add	r2, r3
 8004678:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800467a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468a:	b29b      	uxth	r3, r3
 800468c:	8013      	strh	r3, [r2, #0]
 800468e:	e0ba      	b.n	8004806 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80046a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80046a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d01d      	beq.n	80046e8 <USB_ActivateEndpoint+0x5a8>
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	441a      	add	r2, r3
 80046d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80046f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01d      	beq.n	8004740 <USB_ActivateEndpoint+0x600>
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	b29b      	uxth	r3, r3
 8004712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	441a      	add	r2, r3
 8004728:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800472c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004738:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800473c:	b29b      	uxth	r3, r3
 800473e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	78db      	ldrb	r3, [r3, #3]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d024      	beq.n	8004792 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	b29b      	uxth	r3, r3
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004762:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004766:	f083 0320 	eor.w	r3, r3, #32
 800476a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	441a      	add	r2, r3
 8004778:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800477c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478c:	b29b      	uxth	r3, r3
 800478e:	8013      	strh	r3, [r2, #0]
 8004790:	e01d      	b.n	80047ce <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	441a      	add	r2, r3
 80047b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80047ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	441a      	add	r2, r3
 80047f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80047f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004802:	b29b      	uxth	r3, r3
 8004804:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004806:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800480a:	4618      	mov	r0, r3
 800480c:	376c      	adds	r7, #108	; 0x6c
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr

08004814 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004814:	b480      	push	{r7}
 8004816:	b08d      	sub	sp, #52	; 0x34
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	7b1b      	ldrb	r3, [r3, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f040 808e 	bne.w	8004944 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d044      	beq.n	80048ba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	81bb      	strh	r3, [r7, #12]
 800483e:	89bb      	ldrh	r3, [r7, #12]
 8004840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01b      	beq.n	8004880 <USB_DeactivateEndpoint+0x6c>
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	b29b      	uxth	r3, r3
 8004856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800485a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485e:	817b      	strh	r3, [r7, #10]
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	897b      	ldrh	r3, [r7, #10]
 800486c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004878:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800487c:	b29b      	uxth	r3, r3
 800487e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	b29b      	uxth	r3, r3
 800488e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004896:	813b      	strh	r3, [r7, #8]
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	441a      	add	r2, r3
 80048a2:	893b      	ldrh	r3, [r7, #8]
 80048a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	8013      	strh	r3, [r2, #0]
 80048b8:	e192      	b.n	8004be0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	827b      	strh	r3, [r7, #18]
 80048c8:	8a7b      	ldrh	r3, [r7, #18]
 80048ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01b      	beq.n	800490a <USB_DeactivateEndpoint+0xf6>
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e8:	823b      	strh	r3, [r7, #16]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	441a      	add	r2, r3
 80048f4:	8a3b      	ldrh	r3, [r7, #16]
 80048f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004906:	b29b      	uxth	r3, r3
 8004908:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4413      	add	r3, r2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800491c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004920:	81fb      	strh	r3, [r7, #14]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	441a      	add	r2, r3
 800492c:	89fb      	ldrh	r3, [r7, #14]
 800492e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004932:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800493a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493e:	b29b      	uxth	r3, r3
 8004940:	8013      	strh	r3, [r2, #0]
 8004942:	e14d      	b.n	8004be0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f040 80a5 	bne.w	8004a98 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	843b      	strh	r3, [r7, #32]
 800495c:	8c3b      	ldrh	r3, [r7, #32]
 800495e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01b      	beq.n	800499e <USB_DeactivateEndpoint+0x18a>
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800497c:	83fb      	strh	r3, [r7, #30]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	441a      	add	r2, r3
 8004988:	8bfb      	ldrh	r3, [r7, #30]
 800498a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800498e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004992:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499a:	b29b      	uxth	r3, r3
 800499c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	83bb      	strh	r3, [r7, #28]
 80049ac:	8bbb      	ldrh	r3, [r7, #28]
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01b      	beq.n	80049ee <USB_DeactivateEndpoint+0x1da>
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049cc:	837b      	strh	r3, [r7, #26]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	441a      	add	r2, r3
 80049d8:	8b7b      	ldrh	r3, [r7, #26]
 80049da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a04:	833b      	strh	r3, [r7, #24]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	441a      	add	r2, r3
 8004a10:	8b3b      	ldrh	r3, [r7, #24]
 8004a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3c:	82fb      	strh	r3, [r7, #22]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	441a      	add	r2, r3
 8004a48:	8afb      	ldrh	r3, [r7, #22]
 8004a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a74:	82bb      	strh	r3, [r7, #20]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	441a      	add	r2, r3
 8004a80:	8abb      	ldrh	r3, [r7, #20]
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]
 8004a96:	e0a3      	b.n	8004be0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004aa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01b      	beq.n	8004ae8 <USB_DeactivateEndpoint+0x2d4>
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	441a      	add	r2, r3
 8004ad2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004af6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01b      	beq.n	8004b38 <USB_DeactivateEndpoint+0x324>
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b16:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	441a      	add	r2, r3
 8004b22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	441a      	add	r2, r3
 8004b5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	441a      	add	r2, r3
 8004b92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbe:	847b      	strh	r3, [r7, #34]	; 0x22
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	441a      	add	r2, r3
 8004bca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3734      	adds	r7, #52	; 0x34
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr

08004bec <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b0cc      	sub	sp, #304	; 0x130
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bfa:	6018      	str	r0, [r3, #0]
 8004bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c04:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	785b      	ldrb	r3, [r3, #1]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	f041 817d 	bne.w	8005f12 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699a      	ldr	r2, [r3, #24]
 8004c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d908      	bls.n	8004c46 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004c44:	e007      	b.n	8004c56 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	7b1b      	ldrb	r3, [r3, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d152      	bne.n	8004d0c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6959      	ldr	r1, [r3, #20]
 8004c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	88da      	ldrh	r2, [r3, #6]
 8004c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004c88:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004c8c:	6800      	ldr	r0, [r0, #0]
 8004c8e:	f001 ff23 	bl	8006ad8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c96:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004c9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c9e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004ca2:	6812      	ldr	r2, [r2, #0]
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004caa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cbc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004cc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cc4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004cc8:	6812      	ldr	r2, [r2, #0]
 8004cca:	440a      	add	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	011a      	lsls	r2, r3, #4
 8004cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	f001 b8b5 	b.w	8005e76 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	78db      	ldrb	r3, [r3, #3]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	f040 84c6 	bne.w	80056aa <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6a1a      	ldr	r2, [r3, #32]
 8004d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	f240 8443 	bls.w	80055c2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d62:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	441a      	add	r2, r3
 8004d80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6a1a      	ldr	r2, [r3, #32]
 8004da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004da8:	1ad2      	subs	r2, r2, r3
 8004daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004db6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 823e 	beq.w	800525a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004de6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004dea:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	785b      	ldrb	r3, [r3, #1]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f040 809a 	bne.w	8004f38 <USB_EPStartXfer+0x34c>
 8004e04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e0c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e10:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e14:	6812      	ldr	r2, [r2, #0]
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	4619      	mov	r1, r3
 8004e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e36:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	440a      	add	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	011a      	lsls	r2, r3, #4
 8004e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d122      	bne.n	8004eb6 <USB_EPStartXfer+0x2ca>
 8004e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e74:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	801a      	strh	r2, [r3, #0]
 8004e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	801a      	strh	r2, [r3, #0]
 8004eb4:	e079      	b.n	8004faa <USB_EPStartXfer+0x3be>
 8004eb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eba:	2b3e      	cmp	r3, #62	; 0x3e
 8004ebc:	d81b      	bhi.n	8004ef6 <USB_EPStartXfer+0x30a>
 8004ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d004      	beq.n	8004ede <USB_EPStartXfer+0x2f2>
 8004ed4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ed8:	3301      	adds	r3, #1
 8004eda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004ede:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	029b      	lsls	r3, r3, #10
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	801a      	strh	r2, [r3, #0]
 8004ef4:	e059      	b.n	8004faa <USB_EPStartXfer+0x3be>
 8004ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f04:	f003 031f 	and.w	r3, r3, #31
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d104      	bne.n	8004f16 <USB_EPStartXfer+0x32a>
 8004f0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f10:	3b01      	subs	r3, #1
 8004f12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	029b      	lsls	r3, r3, #10
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	e038      	b.n	8004faa <USB_EPStartXfer+0x3be>
 8004f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	785b      	ldrb	r3, [r3, #1]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d130      	bne.n	8004faa <USB_EPStartXfer+0x3be>
 8004f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	4619      	mov	r1, r3
 8004f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f5e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f62:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f66:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	011a      	lsls	r2, r3, #4
 8004f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f82:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	895b      	ldrh	r3, [r3, #10]
 8004fb6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6959      	ldr	r1, [r3, #20]
 8004fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fd0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fd4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fd8:	6800      	ldr	r0, [r0, #0]
 8004fda:	f001 fd7d 	bl	8006ad8 <USB_WritePMA>
            ep->xfer_buff += len;
 8004fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fee:	441a      	add	r2, r3
 8004ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6a1a      	ldr	r2, [r3, #32]
 8005008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	429a      	cmp	r2, r3
 8005016:	d90f      	bls.n	8005038 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6a1a      	ldr	r2, [r3, #32]
 8005024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005028:	1ad2      	subs	r2, r2, r3
 800502a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	621a      	str	r2, [r3, #32]
 8005036:	e00e      	b.n	8005056 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2200      	movs	r2, #0
 8005054:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	785b      	ldrb	r3, [r3, #1]
 8005062:	2b00      	cmp	r3, #0
 8005064:	f040 809a 	bne.w	800519c <USB_EPStartXfer+0x5b0>
 8005068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005070:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005074:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005080:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800508a:	b29b      	uxth	r3, r3
 800508c:	4619      	mov	r1, r3
 800508e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005092:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005096:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800509a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	440a      	add	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	011a      	lsls	r2, r3, #4
 80050b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4413      	add	r3, r2
 80050be:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80050c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d122      	bne.n	800511a <USB_EPStartXfer+0x52e>
 80050d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	881b      	ldrh	r3, [r3, #0]
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	801a      	strh	r2, [r3, #0]
 80050f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29b      	uxth	r3, r3
 8005102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510a:	b29a      	uxth	r2, r3
 800510c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005110:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	801a      	strh	r2, [r3, #0]
 8005118:	e083      	b.n	8005222 <USB_EPStartXfer+0x636>
 800511a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800511e:	2b3e      	cmp	r3, #62	; 0x3e
 8005120:	d81b      	bhi.n	800515a <USB_EPStartXfer+0x56e>
 8005122:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800512c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d004      	beq.n	8005142 <USB_EPStartXfer+0x556>
 8005138:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800513c:	3301      	adds	r3, #1
 800513e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005142:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005146:	b29b      	uxth	r3, r3
 8005148:	029b      	lsls	r3, r3, #10
 800514a:	b29a      	uxth	r2, r3
 800514c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005150:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	801a      	strh	r2, [r3, #0]
 8005158:	e063      	b.n	8005222 <USB_EPStartXfer+0x636>
 800515a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005168:	f003 031f 	and.w	r3, r3, #31
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <USB_EPStartXfer+0x58e>
 8005170:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005174:	3b01      	subs	r3, #1
 8005176:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800517a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800517e:	b29b      	uxth	r3, r3
 8005180:	029b      	lsls	r3, r3, #10
 8005182:	b29b      	uxth	r3, r3
 8005184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800518c:	b29a      	uxth	r2, r3
 800518e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005192:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	801a      	strh	r2, [r3, #0]
 800519a:	e042      	b.n	8005222 <USB_EPStartXfer+0x636>
 800519c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	785b      	ldrb	r3, [r3, #1]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d13a      	bne.n	8005222 <USB_EPStartXfer+0x636>
 80051ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051b8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80051bc:	6812      	ldr	r2, [r2, #0]
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	4619      	mov	r1, r3
 80051d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051de:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	440a      	add	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	011a      	lsls	r2, r3, #4
 80051f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4413      	add	r3, r2
 8005202:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800520a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005214:	b29a      	uxth	r2, r3
 8005216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800521a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	891b      	ldrh	r3, [r3, #8]
 800522e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6959      	ldr	r1, [r3, #20]
 800523e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005242:	b29b      	uxth	r3, r3
 8005244:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005248:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800524c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005250:	6800      	ldr	r0, [r0, #0]
 8005252:	f001 fc41 	bl	8006ad8 <USB_WritePMA>
 8005256:	f000 be0e 	b.w	8005e76 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800525a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	785b      	ldrb	r3, [r3, #1]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d16d      	bne.n	8005346 <USB_EPStartXfer+0x75a>
 800526a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	64bb      	str	r3, [r7, #72]	; 0x48
 8005276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800527a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005284:	b29b      	uxth	r3, r3
 8005286:	461a      	mov	r2, r3
 8005288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800528a:	4413      	add	r3, r2
 800528c:	64bb      	str	r3, [r7, #72]	; 0x48
 800528e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	011a      	lsls	r2, r3, #4
 800529c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800529e:	4413      	add	r3, r2
 80052a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052a4:	647b      	str	r3, [r7, #68]	; 0x44
 80052a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d112      	bne.n	80052d4 <USB_EPStartXfer+0x6e8>
 80052ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052bc:	801a      	strh	r2, [r3, #0]
 80052be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052d0:	801a      	strh	r2, [r3, #0]
 80052d2:	e063      	b.n	800539c <USB_EPStartXfer+0x7b0>
 80052d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052d8:	2b3e      	cmp	r3, #62	; 0x3e
 80052da:	d817      	bhi.n	800530c <USB_EPStartXfer+0x720>
 80052dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e0:	085b      	lsrs	r3, r3, #1
 80052e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d004      	beq.n	80052fc <USB_EPStartXfer+0x710>
 80052f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80052f6:	3301      	adds	r3, #1
 80052f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005300:	b29b      	uxth	r3, r3
 8005302:	029b      	lsls	r3, r3, #10
 8005304:	b29a      	uxth	r2, r3
 8005306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005308:	801a      	strh	r2, [r3, #0]
 800530a:	e047      	b.n	800539c <USB_EPStartXfer+0x7b0>
 800530c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005316:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	2b00      	cmp	r3, #0
 8005320:	d104      	bne.n	800532c <USB_EPStartXfer+0x740>
 8005322:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005326:	3b01      	subs	r3, #1
 8005328:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800532c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005330:	b29b      	uxth	r3, r3
 8005332:	029b      	lsls	r3, r3, #10
 8005334:	b29b      	uxth	r3, r3
 8005336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800533a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800533e:	b29a      	uxth	r2, r3
 8005340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005342:	801a      	strh	r2, [r3, #0]
 8005344:	e02a      	b.n	800539c <USB_EPStartXfer+0x7b0>
 8005346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800534a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	785b      	ldrb	r3, [r3, #1]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d122      	bne.n	800539c <USB_EPStartXfer+0x7b0>
 8005356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	653b      	str	r3, [r7, #80]	; 0x50
 8005362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005366:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005370:	b29b      	uxth	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005376:	4413      	add	r3, r2
 8005378:	653b      	str	r3, [r7, #80]	; 0x50
 800537a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800537e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	011a      	lsls	r2, r3, #4
 8005388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800538a:	4413      	add	r3, r2
 800538c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005390:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005396:	b29a      	uxth	r2, r3
 8005398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800539c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	891b      	ldrh	r3, [r3, #8]
 80053a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6959      	ldr	r1, [r3, #20]
 80053b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053bc:	b29b      	uxth	r3, r3
 80053be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053c2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80053c6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80053ca:	6800      	ldr	r0, [r0, #0]
 80053cc:	f001 fb84 	bl	8006ad8 <USB_WritePMA>
            ep->xfer_buff += len;
 80053d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695a      	ldr	r2, [r3, #20]
 80053dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e0:	441a      	add	r2, r3
 80053e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6a1a      	ldr	r2, [r3, #32]
 80053fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	429a      	cmp	r2, r3
 8005408:	d90f      	bls.n	800542a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800540a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6a1a      	ldr	r2, [r3, #32]
 8005416:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800541a:	1ad2      	subs	r2, r2, r3
 800541c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	621a      	str	r2, [r3, #32]
 8005428:	e00e      	b.n	8005448 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800542a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800543a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2200      	movs	r2, #0
 8005446:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	643b      	str	r3, [r7, #64]	; 0x40
 8005454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005458:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	785b      	ldrb	r3, [r3, #1]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d16d      	bne.n	8005540 <USB_EPStartXfer+0x954>
 8005464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005468:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005474:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800547e:	b29b      	uxth	r3, r3
 8005480:	461a      	mov	r2, r3
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	4413      	add	r3, r2
 8005486:	63bb      	str	r3, [r7, #56]	; 0x38
 8005488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	011a      	lsls	r2, r3, #4
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	4413      	add	r3, r2
 800549a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800549e:	637b      	str	r3, [r7, #52]	; 0x34
 80054a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d112      	bne.n	80054ce <USB_EPStartXfer+0x8e2>
 80054a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b6:	801a      	strh	r2, [r3, #0]
 80054b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ca:	801a      	strh	r2, [r3, #0]
 80054cc:	e05d      	b.n	800558a <USB_EPStartXfer+0x99e>
 80054ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d2:	2b3e      	cmp	r3, #62	; 0x3e
 80054d4:	d817      	bhi.n	8005506 <USB_EPStartXfer+0x91a>
 80054d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d004      	beq.n	80054f6 <USB_EPStartXfer+0x90a>
 80054ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054f0:	3301      	adds	r3, #1
 80054f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80054f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	029b      	lsls	r3, r3, #10
 80054fe:	b29a      	uxth	r2, r3
 8005500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	e041      	b.n	800558a <USB_EPStartXfer+0x99e>
 8005506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800550a:	095b      	lsrs	r3, r3, #5
 800550c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005514:	f003 031f 	and.w	r3, r3, #31
 8005518:	2b00      	cmp	r3, #0
 800551a:	d104      	bne.n	8005526 <USB_EPStartXfer+0x93a>
 800551c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005520:	3b01      	subs	r3, #1
 8005522:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005526:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800552a:	b29b      	uxth	r3, r3
 800552c:	029b      	lsls	r3, r3, #10
 800552e:	b29b      	uxth	r3, r3
 8005530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005538:	b29a      	uxth	r2, r3
 800553a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553c:	801a      	strh	r2, [r3, #0]
 800553e:	e024      	b.n	800558a <USB_EPStartXfer+0x99e>
 8005540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005544:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	785b      	ldrb	r3, [r3, #1]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d11c      	bne.n	800558a <USB_EPStartXfer+0x99e>
 8005550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005554:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800555e:	b29b      	uxth	r3, r3
 8005560:	461a      	mov	r2, r3
 8005562:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005564:	4413      	add	r3, r2
 8005566:	643b      	str	r3, [r7, #64]	; 0x40
 8005568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	011a      	lsls	r2, r3, #4
 8005576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005578:	4413      	add	r3, r2
 800557a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800557e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005580:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005584:	b29a      	uxth	r2, r3
 8005586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005588:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800558a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800558e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	895b      	ldrh	r3, [r3, #10]
 8005596:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800559a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800559e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6959      	ldr	r1, [r3, #20]
 80055a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80055b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80055b8:	6800      	ldr	r0, [r0, #0]
 80055ba:	f001 fa8d 	bl	8006ad8 <USB_WritePMA>
 80055be:	f000 bc5a 	b.w	8005e76 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80055c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80055d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	881b      	ldrh	r3, [r3, #0]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80055f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80055fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005600:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	441a      	add	r2, r3
 8005616:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800561a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800561e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562a:	b29b      	uxth	r3, r3
 800562c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800562e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	65fb      	str	r3, [r7, #92]	; 0x5c
 800563a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005648:	b29b      	uxth	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800564e:	4413      	add	r3, r2
 8005650:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	011a      	lsls	r2, r3, #4
 8005660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005662:	4413      	add	r3, r2
 8005664:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005668:	65bb      	str	r3, [r7, #88]	; 0x58
 800566a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800566e:	b29a      	uxth	r2, r3
 8005670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005672:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	891b      	ldrh	r3, [r3, #8]
 8005680:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6959      	ldr	r1, [r3, #20]
 8005690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005694:	b29b      	uxth	r3, r3
 8005696:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800569a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800569e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056a2:	6800      	ldr	r0, [r0, #0]
 80056a4:	f001 fa18 	bl	8006ad8 <USB_WritePMA>
 80056a8:	e3e5      	b.n	8005e76 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80056aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80056d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	441a      	add	r2, r3
 80056ee:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80056f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80056fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005702:	b29b      	uxth	r3, r3
 8005704:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6a1a      	ldr	r2, [r3, #32]
 8005712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005716:	1ad2      	subs	r2, r2, r3
 8005718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005724:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005728:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005732:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 81bc 	beq.w	8005ac4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800574c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005750:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800575a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	785b      	ldrb	r3, [r3, #1]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d16d      	bne.n	8005846 <USB_EPStartXfer+0xc5a>
 800576a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	67bb      	str	r3, [r7, #120]	; 0x78
 8005776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005784:	b29b      	uxth	r3, r3
 8005786:	461a      	mov	r2, r3
 8005788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800578a:	4413      	add	r3, r2
 800578c:	67bb      	str	r3, [r7, #120]	; 0x78
 800578e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	011a      	lsls	r2, r3, #4
 800579c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800579e:	4413      	add	r3, r2
 80057a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057a4:	677b      	str	r3, [r7, #116]	; 0x74
 80057a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d112      	bne.n	80057d4 <USB_EPStartXfer+0xbe8>
 80057ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057d0:	801a      	strh	r2, [r3, #0]
 80057d2:	e060      	b.n	8005896 <USB_EPStartXfer+0xcaa>
 80057d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d8:	2b3e      	cmp	r3, #62	; 0x3e
 80057da:	d817      	bhi.n	800580c <USB_EPStartXfer+0xc20>
 80057dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e0:	085b      	lsrs	r3, r3, #1
 80057e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d004      	beq.n	80057fc <USB_EPStartXfer+0xc10>
 80057f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80057f6:	3301      	adds	r3, #1
 80057f8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80057fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005800:	b29b      	uxth	r3, r3
 8005802:	029b      	lsls	r3, r3, #10
 8005804:	b29a      	uxth	r2, r3
 8005806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005808:	801a      	strh	r2, [r3, #0]
 800580a:	e044      	b.n	8005896 <USB_EPStartXfer+0xcaa>
 800580c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005810:	095b      	lsrs	r3, r3, #5
 8005812:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005816:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	2b00      	cmp	r3, #0
 8005820:	d104      	bne.n	800582c <USB_EPStartXfer+0xc40>
 8005822:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005826:	3b01      	subs	r3, #1
 8005828:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800582c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005830:	b29b      	uxth	r3, r3
 8005832:	029b      	lsls	r3, r3, #10
 8005834:	b29b      	uxth	r3, r3
 8005836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800583a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800583e:	b29a      	uxth	r2, r3
 8005840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005842:	801a      	strh	r2, [r3, #0]
 8005844:	e027      	b.n	8005896 <USB_EPStartXfer+0xcaa>
 8005846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800584a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	785b      	ldrb	r3, [r3, #1]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d11f      	bne.n	8005896 <USB_EPStartXfer+0xcaa>
 8005856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005864:	b29b      	uxth	r3, r3
 8005866:	461a      	mov	r2, r3
 8005868:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800586c:	4413      	add	r3, r2
 800586e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	011a      	lsls	r2, r3, #4
 8005880:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005884:	4413      	add	r3, r2
 8005886:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800588a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800588c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005890:	b29a      	uxth	r2, r3
 8005892:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005894:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	895b      	ldrh	r3, [r3, #10]
 80058a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6959      	ldr	r1, [r3, #20]
 80058b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058bc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058c0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058c4:	6800      	ldr	r0, [r0, #0]
 80058c6:	f001 f907 	bl	8006ad8 <USB_WritePMA>
          ep->xfer_buff += len;
 80058ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058da:	441a      	add	r2, r3
 80058dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80058e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6a1a      	ldr	r2, [r3, #32]
 80058f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	429a      	cmp	r2, r3
 8005902:	d90f      	bls.n	8005924 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6a1a      	ldr	r2, [r3, #32]
 8005910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005914:	1ad2      	subs	r2, r2, r3
 8005916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	621a      	str	r2, [r3, #32]
 8005922:	e00e      	b.n	8005942 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2200      	movs	r2, #0
 8005940:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005946:	2b00      	cmp	r3, #0
 8005948:	f000 8295 	beq.w	8005e76 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800594c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d16d      	bne.n	8005a38 <USB_EPStartXfer+0xe4c>
 800595c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005960:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	66bb      	str	r3, [r7, #104]	; 0x68
 8005968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005976:	b29b      	uxth	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800597c:	4413      	add	r3, r2
 800597e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005984:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	011a      	lsls	r2, r3, #4
 800598e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005990:	4413      	add	r3, r2
 8005992:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005996:	667b      	str	r3, [r7, #100]	; 0x64
 8005998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800599c:	2b00      	cmp	r3, #0
 800599e:	d112      	bne.n	80059c6 <USB_EPStartXfer+0xdda>
 80059a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ae:	801a      	strh	r2, [r3, #0]
 80059b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059be:	b29a      	uxth	r2, r3
 80059c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	e063      	b.n	8005a8e <USB_EPStartXfer+0xea2>
 80059c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ca:	2b3e      	cmp	r3, #62	; 0x3e
 80059cc:	d817      	bhi.n	80059fe <USB_EPStartXfer+0xe12>
 80059ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d2:	085b      	lsrs	r3, r3, #1
 80059d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d004      	beq.n	80059ee <USB_EPStartXfer+0xe02>
 80059e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e8:	3301      	adds	r3, #1
 80059ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	029b      	lsls	r3, r3, #10
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	e047      	b.n	8005a8e <USB_EPStartXfer+0xea2>
 80059fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d104      	bne.n	8005a1e <USB_EPStartXfer+0xe32>
 8005a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	029b      	lsls	r3, r3, #10
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a34:	801a      	strh	r2, [r3, #0]
 8005a36:	e02a      	b.n	8005a8e <USB_EPStartXfer+0xea2>
 8005a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	785b      	ldrb	r3, [r3, #1]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d122      	bne.n	8005a8e <USB_EPStartXfer+0xea2>
 8005a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	673b      	str	r3, [r7, #112]	; 0x70
 8005a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	461a      	mov	r2, r3
 8005a66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a68:	4413      	add	r3, r2
 8005a6a:	673b      	str	r3, [r7, #112]	; 0x70
 8005a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	011a      	lsls	r2, r3, #4
 8005a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	891b      	ldrh	r3, [r3, #8]
 8005a9a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6959      	ldr	r1, [r3, #20]
 8005aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ab4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ab8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005abc:	6800      	ldr	r0, [r0, #0]
 8005abe:	f001 f80b 	bl	8006ad8 <USB_WritePMA>
 8005ac2:	e1d8      	b.n	8005e76 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	785b      	ldrb	r3, [r3, #1]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d178      	bne.n	8005bc6 <USB_EPStartXfer+0xfda>
 8005ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	461a      	mov	r2, r3
 8005af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005af8:	4413      	add	r3, r2
 8005afa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	011a      	lsls	r2, r3, #4
 8005b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b10:	4413      	add	r3, r2
 8005b12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d116      	bne.n	8005b50 <USB_EPStartXfer+0xf64>
 8005b22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b26:	881b      	ldrh	r3, [r3, #0]
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	e06b      	b.n	8005c28 <USB_EPStartXfer+0x103c>
 8005b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b54:	2b3e      	cmp	r3, #62	; 0x3e
 8005b56:	d818      	bhi.n	8005b8a <USB_EPStartXfer+0xf9e>
 8005b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b5c:	085b      	lsrs	r3, r3, #1
 8005b5e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <USB_EPStartXfer+0xf8c>
 8005b6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b72:	3301      	adds	r3, #1
 8005b74:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b78:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	029b      	lsls	r3, r3, #10
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b86:	801a      	strh	r2, [r3, #0]
 8005b88:	e04e      	b.n	8005c28 <USB_EPStartXfer+0x103c>
 8005b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b8e:	095b      	lsrs	r3, r3, #5
 8005b90:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005b94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b98:	f003 031f 	and.w	r3, r3, #31
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d104      	bne.n	8005baa <USB_EPStartXfer+0xfbe>
 8005ba0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ba4:	3b01      	subs	r3, #1
 8005ba6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005baa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	029b      	lsls	r3, r3, #10
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bc2:	801a      	strh	r2, [r3, #0]
 8005bc4:	e030      	b.n	8005c28 <USB_EPStartXfer+0x103c>
 8005bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	785b      	ldrb	r3, [r3, #1]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d128      	bne.n	8005c28 <USB_EPStartXfer+0x103c>
 8005bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	011a      	lsls	r2, r3, #4
 8005c0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c12:	4413      	add	r3, r2
 8005c14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c26:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	891b      	ldrh	r3, [r3, #8]
 8005c34:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6959      	ldr	r1, [r3, #20]
 8005c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c4e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c52:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c56:	6800      	ldr	r0, [r0, #0]
 8005c58:	f000 ff3e 	bl	8006ad8 <USB_WritePMA>
          ep->xfer_buff += len;
 8005c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695a      	ldr	r2, [r3, #20]
 8005c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c6c:	441a      	add	r2, r3
 8005c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6a1a      	ldr	r2, [r3, #32]
 8005c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d90f      	bls.n	8005cb6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6a1a      	ldr	r2, [r3, #32]
 8005ca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca6:	1ad2      	subs	r2, r2, r3
 8005ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	621a      	str	r2, [r3, #32]
 8005cb4:	e00e      	b.n	8005cd4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005cd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 80cc 	beq.w	8005e76 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	785b      	ldrb	r3, [r3, #1]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d178      	bne.n	8005dee <USB_EPStartXfer+0x1202>
 8005cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d20:	4413      	add	r3, r2
 8005d22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	011a      	lsls	r2, r3, #4
 8005d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d38:	4413      	add	r3, r2
 8005d3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d3e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d116      	bne.n	8005d78 <USB_EPStartXfer+0x118c>
 8005d4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d5c:	801a      	strh	r2, [r3, #0]
 8005d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d74:	801a      	strh	r2, [r3, #0]
 8005d76:	e064      	b.n	8005e42 <USB_EPStartXfer+0x1256>
 8005d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d7c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d7e:	d818      	bhi.n	8005db2 <USB_EPStartXfer+0x11c6>
 8005d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d84:	085b      	lsrs	r3, r3, #1
 8005d86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d004      	beq.n	8005da0 <USB_EPStartXfer+0x11b4>
 8005d96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	029b      	lsls	r3, r3, #10
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	e047      	b.n	8005e42 <USB_EPStartXfer+0x1256>
 8005db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <USB_EPStartXfer+0x11e6>
 8005dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	029b      	lsls	r3, r3, #10
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dea:	801a      	strh	r2, [r3, #0]
 8005dec:	e029      	b.n	8005e42 <USB_EPStartXfer+0x1256>
 8005dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d121      	bne.n	8005e42 <USB_EPStartXfer+0x1256>
 8005dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e14:	4413      	add	r3, r2
 8005e16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	011a      	lsls	r2, r3, #4
 8005e28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	895b      	ldrh	r3, [r3, #10]
 8005e4e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6959      	ldr	r1, [r3, #20]
 8005e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e68:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e6c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e70:	6800      	ldr	r0, [r0, #0]
 8005e72:	f000 fe31 	bl	8006ad8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e98:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea4:	8013      	strh	r3, [r2, #0]
 8005ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eaa:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005eae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005eb2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005eb6:	8812      	ldrh	r2, [r2, #0]
 8005eb8:	f082 0210 	eor.w	r2, r2, #16
 8005ebc:	801a      	strh	r2, [r3, #0]
 8005ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ec6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005eca:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005ece:	8812      	ldrh	r2, [r2, #0]
 8005ed0:	f082 0220 	eor.w	r2, r2, #32
 8005ed4:	801a      	strh	r2, [r3, #0]
 8005ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	441a      	add	r2, r3
 8005ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	8013      	strh	r3, [r2, #0]
 8005f0e:	f000 bc9f 	b.w	8006850 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	7b1b      	ldrb	r3, [r3, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f040 80ae 	bne.w	8006080 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	699a      	ldr	r2, [r3, #24]
 8005f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d917      	bls.n	8005f70 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699a      	ldr	r2, [r3, #24]
 8005f5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f60:	1ad2      	subs	r2, r2, r3
 8005f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	619a      	str	r2, [r3, #24]
 8005f6e:	e00e      	b.n	8005f8e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	461a      	mov	r2, r3
 8005fae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	011a      	lsls	r2, r3, #4
 8005fc6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fca:	4413      	add	r3, r2
 8005fcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d116      	bne.n	800600a <USB_EPStartXfer+0x141e>
 8005fdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fee:	801a      	strh	r2, [r3, #0]
 8005ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006000:	b29a      	uxth	r2, r3
 8006002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006006:	801a      	strh	r2, [r3, #0]
 8006008:	e3e8      	b.n	80067dc <USB_EPStartXfer+0x1bf0>
 800600a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600e:	2b3e      	cmp	r3, #62	; 0x3e
 8006010:	d818      	bhi.n	8006044 <USB_EPStartXfer+0x1458>
 8006012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006016:	085b      	lsrs	r3, r3, #1
 8006018:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800601c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d004      	beq.n	8006032 <USB_EPStartXfer+0x1446>
 8006028:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800602c:	3301      	adds	r3, #1
 800602e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006032:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006036:	b29b      	uxth	r3, r3
 8006038:	029b      	lsls	r3, r3, #10
 800603a:	b29a      	uxth	r2, r3
 800603c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006040:	801a      	strh	r2, [r3, #0]
 8006042:	e3cb      	b.n	80067dc <USB_EPStartXfer+0x1bf0>
 8006044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800604e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006052:	f003 031f 	and.w	r3, r3, #31
 8006056:	2b00      	cmp	r3, #0
 8006058:	d104      	bne.n	8006064 <USB_EPStartXfer+0x1478>
 800605a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800605e:	3b01      	subs	r3, #1
 8006060:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006064:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006068:	b29b      	uxth	r3, r3
 800606a:	029b      	lsls	r3, r3, #10
 800606c:	b29b      	uxth	r3, r3
 800606e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006076:	b29a      	uxth	r2, r3
 8006078:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	e3ad      	b.n	80067dc <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006084:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	78db      	ldrb	r3, [r3, #3]
 800608c:	2b02      	cmp	r3, #2
 800608e:	f040 8200 	bne.w	8006492 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f040 8091 	bne.w	80061c6 <USB_EPStartXfer+0x15da>
 80060a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	461a      	mov	r2, r3
 80060c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060c8:	4413      	add	r3, r2
 80060ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	011a      	lsls	r2, r3, #4
 80060dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060e0:	4413      	add	r3, r2
 80060e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d116      	bne.n	8006128 <USB_EPStartXfer+0x153c>
 80060fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	b29b      	uxth	r3, r3
 8006102:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006106:	b29a      	uxth	r2, r3
 8006108:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800610c:	801a      	strh	r2, [r3, #0]
 800610e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800611a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611e:	b29a      	uxth	r2, r3
 8006120:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006124:	801a      	strh	r2, [r3, #0]
 8006126:	e083      	b.n	8006230 <USB_EPStartXfer+0x1644>
 8006128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	2b3e      	cmp	r3, #62	; 0x3e
 8006136:	d820      	bhi.n	800617a <USB_EPStartXfer+0x158e>
 8006138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	085b      	lsrs	r3, r3, #1
 8006146:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800614a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d004      	beq.n	8006168 <USB_EPStartXfer+0x157c>
 800615e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006162:	3301      	adds	r3, #1
 8006164:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800616c:	b29b      	uxth	r3, r3
 800616e:	029b      	lsls	r3, r3, #10
 8006170:	b29a      	uxth	r2, r3
 8006172:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006176:	801a      	strh	r2, [r3, #0]
 8006178:	e05a      	b.n	8006230 <USB_EPStartXfer+0x1644>
 800617a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	095b      	lsrs	r3, r3, #5
 8006188:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800618c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	f003 031f 	and.w	r3, r3, #31
 800619c:	2b00      	cmp	r3, #0
 800619e:	d104      	bne.n	80061aa <USB_EPStartXfer+0x15be>
 80061a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a4:	3b01      	subs	r3, #1
 80061a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	029b      	lsls	r3, r3, #10
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061bc:	b29a      	uxth	r2, r3
 80061be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	e034      	b.n	8006230 <USB_EPStartXfer+0x1644>
 80061c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	785b      	ldrb	r3, [r3, #1]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d12c      	bne.n	8006230 <USB_EPStartXfer+0x1644>
 80061d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061fa:	4413      	add	r3, r2
 80061fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	011a      	lsls	r2, r3, #4
 800620e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006212:	4413      	add	r3, r2
 8006214:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800621c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	b29a      	uxth	r2, r3
 800622a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800622e:	801a      	strh	r2, [r3, #0]
 8006230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006234:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800623e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	785b      	ldrb	r3, [r3, #1]
 800624a:	2b00      	cmp	r3, #0
 800624c:	f040 8091 	bne.w	8006372 <USB_EPStartXfer+0x1786>
 8006250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006254:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800625e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006262:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800626c:	b29b      	uxth	r3, r3
 800626e:	461a      	mov	r2, r3
 8006270:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006274:	4413      	add	r3, r2
 8006276:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800627a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800627e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	011a      	lsls	r2, r3, #4
 8006288:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800628c:	4413      	add	r3, r2
 800628e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006292:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d116      	bne.n	80062d4 <USB_EPStartXfer+0x16e8>
 80062a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062d0:	801a      	strh	r2, [r3, #0]
 80062d2:	e07c      	b.n	80063ce <USB_EPStartXfer+0x17e2>
 80062d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2b3e      	cmp	r3, #62	; 0x3e
 80062e2:	d820      	bhi.n	8006326 <USB_EPStartXfer+0x173a>
 80062e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	085b      	lsrs	r3, r3, #1
 80062f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d004      	beq.n	8006314 <USB_EPStartXfer+0x1728>
 800630a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800630e:	3301      	adds	r3, #1
 8006310:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006314:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006318:	b29b      	uxth	r3, r3
 800631a:	029b      	lsls	r3, r3, #10
 800631c:	b29a      	uxth	r2, r3
 800631e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006322:	801a      	strh	r2, [r3, #0]
 8006324:	e053      	b.n	80063ce <USB_EPStartXfer+0x17e2>
 8006326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	095b      	lsrs	r3, r3, #5
 8006334:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	f003 031f 	and.w	r3, r3, #31
 8006348:	2b00      	cmp	r3, #0
 800634a:	d104      	bne.n	8006356 <USB_EPStartXfer+0x176a>
 800634c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006350:	3b01      	subs	r3, #1
 8006352:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006356:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800635a:	b29b      	uxth	r3, r3
 800635c:	029b      	lsls	r3, r3, #10
 800635e:	b29b      	uxth	r3, r3
 8006360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006368:	b29a      	uxth	r2, r3
 800636a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800636e:	801a      	strh	r2, [r3, #0]
 8006370:	e02d      	b.n	80063ce <USB_EPStartXfer+0x17e2>
 8006372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	785b      	ldrb	r3, [r3, #1]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d125      	bne.n	80063ce <USB_EPStartXfer+0x17e2>
 8006382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006386:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006390:	b29b      	uxth	r3, r3
 8006392:	461a      	mov	r2, r3
 8006394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006398:	4413      	add	r3, r2
 800639a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800639e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	011a      	lsls	r2, r3, #4
 80063ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063b0:	4413      	add	r3, r2
 80063b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063cc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80063ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 81fe 	beq.w	80067dc <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80063e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006400:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <USB_EPStartXfer+0x182c>
 800640c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10d      	bne.n	8006434 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006418:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800641c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006420:	2b00      	cmp	r3, #0
 8006422:	f040 81db 	bne.w	80067dc <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006426:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800642a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	f040 81d4 	bne.w	80067dc <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006438:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	881b      	ldrh	r3, [r3, #0]
 8006450:	b29b      	uxth	r3, r3
 8006452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800645e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006462:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	441a      	add	r2, r3
 8006478:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800647c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006480:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006488:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800648c:	b29b      	uxth	r3, r3
 800648e:	8013      	strh	r3, [r2, #0]
 8006490:	e1a4      	b.n	80067dc <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	78db      	ldrb	r3, [r3, #3]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	f040 819a 	bne.w	80067d8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80064a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699a      	ldr	r2, [r3, #24]
 80064b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d917      	bls.n	80064f0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80064c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80064d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699a      	ldr	r2, [r3, #24]
 80064dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e0:	1ad2      	subs	r2, r2, r3
 80064e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	619a      	str	r2, [r3, #24]
 80064ee:	e00e      	b.n	800650e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80064f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006504:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2200      	movs	r2, #0
 800650c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800650e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d178      	bne.n	8006610 <USB_EPStartXfer+0x1a24>
 800651e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006522:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800652c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006530:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653a:	b29b      	uxth	r3, r3
 800653c:	461a      	mov	r2, r3
 800653e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006542:	4413      	add	r3, r2
 8006544:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800654c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	011a      	lsls	r2, r3, #4
 8006556:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800655a:	4413      	add	r3, r2
 800655c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006560:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d116      	bne.n	800659a <USB_EPStartXfer+0x19ae>
 800656c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	b29b      	uxth	r3, r3
 8006574:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006578:	b29a      	uxth	r2, r3
 800657a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800657e:	801a      	strh	r2, [r3, #0]
 8006580:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29b      	uxth	r3, r3
 8006588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800658c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006590:	b29a      	uxth	r2, r3
 8006592:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006596:	801a      	strh	r2, [r3, #0]
 8006598:	e06b      	b.n	8006672 <USB_EPStartXfer+0x1a86>
 800659a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800659e:	2b3e      	cmp	r3, #62	; 0x3e
 80065a0:	d818      	bhi.n	80065d4 <USB_EPStartXfer+0x19e8>
 80065a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d004      	beq.n	80065c2 <USB_EPStartXfer+0x19d6>
 80065b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065bc:	3301      	adds	r3, #1
 80065be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	029b      	lsls	r3, r3, #10
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065d0:	801a      	strh	r2, [r3, #0]
 80065d2:	e04e      	b.n	8006672 <USB_EPStartXfer+0x1a86>
 80065d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d8:	095b      	lsrs	r3, r3, #5
 80065da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e2:	f003 031f 	and.w	r3, r3, #31
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d104      	bne.n	80065f4 <USB_EPStartXfer+0x1a08>
 80065ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ee:	3b01      	subs	r3, #1
 80065f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80065f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	029b      	lsls	r3, r3, #10
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006606:	b29a      	uxth	r2, r3
 8006608:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800660c:	801a      	strh	r2, [r3, #0]
 800660e:	e030      	b.n	8006672 <USB_EPStartXfer+0x1a86>
 8006610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006614:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	785b      	ldrb	r3, [r3, #1]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d128      	bne.n	8006672 <USB_EPStartXfer+0x1a86>
 8006620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006624:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800662e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800663c:	b29b      	uxth	r3, r3
 800663e:	461a      	mov	r2, r3
 8006640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006644:	4413      	add	r3, r2
 8006646:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800664a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	011a      	lsls	r2, r3, #4
 8006658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665c:	4413      	add	r3, r2
 800665e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006662:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800666a:	b29a      	uxth	r2, r3
 800666c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006670:	801a      	strh	r2, [r3, #0]
 8006672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006676:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d178      	bne.n	8006782 <USB_EPStartXfer+0x1b96>
 8006690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800669e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b4:	4413      	add	r3, r2
 80066b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80066ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	011a      	lsls	r2, r3, #4
 80066c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066cc:	4413      	add	r3, r2
 80066ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d116      	bne.n	800670c <USB_EPStartXfer+0x1b20>
 80066de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066e2:	881b      	ldrh	r3, [r3, #0]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066f0:	801a      	strh	r2, [r3, #0]
 80066f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006702:	b29a      	uxth	r2, r3
 8006704:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006708:	801a      	strh	r2, [r3, #0]
 800670a:	e067      	b.n	80067dc <USB_EPStartXfer+0x1bf0>
 800670c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006710:	2b3e      	cmp	r3, #62	; 0x3e
 8006712:	d818      	bhi.n	8006746 <USB_EPStartXfer+0x1b5a>
 8006714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006718:	085b      	lsrs	r3, r3, #1
 800671a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800671e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b00      	cmp	r3, #0
 8006728:	d004      	beq.n	8006734 <USB_EPStartXfer+0x1b48>
 800672a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800672e:	3301      	adds	r3, #1
 8006730:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006734:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006738:	b29b      	uxth	r3, r3
 800673a:	029b      	lsls	r3, r3, #10
 800673c:	b29a      	uxth	r2, r3
 800673e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006742:	801a      	strh	r2, [r3, #0]
 8006744:	e04a      	b.n	80067dc <USB_EPStartXfer+0x1bf0>
 8006746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800674a:	095b      	lsrs	r3, r3, #5
 800674c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006754:	f003 031f 	and.w	r3, r3, #31
 8006758:	2b00      	cmp	r3, #0
 800675a:	d104      	bne.n	8006766 <USB_EPStartXfer+0x1b7a>
 800675c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006760:	3b01      	subs	r3, #1
 8006762:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006766:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800676a:	b29b      	uxth	r3, r3
 800676c:	029b      	lsls	r3, r3, #10
 800676e:	b29b      	uxth	r3, r3
 8006770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006778:	b29a      	uxth	r2, r3
 800677a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	e02c      	b.n	80067dc <USB_EPStartXfer+0x1bf0>
 8006782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	785b      	ldrb	r3, [r3, #1]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d124      	bne.n	80067dc <USB_EPStartXfer+0x1bf0>
 8006792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006796:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a8:	4413      	add	r3, r2
 80067aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	011a      	lsls	r2, r3, #4
 80067bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c0:	4413      	add	r3, r2
 80067c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d4:	801a      	strh	r2, [r3, #0]
 80067d6:	e001      	b.n	80067dc <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e03a      	b.n	8006852 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006802:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006806:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800680a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800680e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006812:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006816:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800681a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800681e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006822:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	441a      	add	r2, r3
 8006838:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800683c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684c:	b29b      	uxth	r3, r3
 800684e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	785b      	ldrb	r3, [r3, #1]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d020      	beq.n	80068b0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	b29b      	uxth	r3, r3
 800687c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006884:	81bb      	strh	r3, [r7, #12]
 8006886:	89bb      	ldrh	r3, [r7, #12]
 8006888:	f083 0310 	eor.w	r3, r3, #16
 800688c:	81bb      	strh	r3, [r7, #12]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	441a      	add	r2, r3
 8006898:	89bb      	ldrh	r3, [r7, #12]
 800689a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800689e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	8013      	strh	r3, [r2, #0]
 80068ae:	e01f      	b.n	80068f0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	881b      	ldrh	r3, [r3, #0]
 80068bc:	b29b      	uxth	r3, r3
 80068be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c6:	81fb      	strh	r3, [r7, #14]
 80068c8:	89fb      	ldrh	r3, [r7, #14]
 80068ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068ce:	81fb      	strh	r3, [r7, #14]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	441a      	add	r2, r3
 80068da:	89fb      	ldrh	r3, [r7, #14]
 80068dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr

080068fc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	7b1b      	ldrb	r3, [r3, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f040 809d 	bne.w	8006a4a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	785b      	ldrb	r3, [r3, #1]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d04c      	beq.n	80069b2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	823b      	strh	r3, [r7, #16]
 8006926:	8a3b      	ldrh	r3, [r7, #16]
 8006928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01b      	beq.n	8006968 <USB_EPClearStall+0x6c>
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006946:	81fb      	strh	r3, [r7, #14]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	441a      	add	r2, r3
 8006952:	89fb      	ldrh	r3, [r7, #14]
 8006954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800695c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006960:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006964:	b29b      	uxth	r3, r3
 8006966:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	78db      	ldrb	r3, [r3, #3]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d06c      	beq.n	8006a4a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4413      	add	r3, r2
 800697a:	881b      	ldrh	r3, [r3, #0]
 800697c:	b29b      	uxth	r3, r3
 800697e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006986:	81bb      	strh	r3, [r7, #12]
 8006988:	89bb      	ldrh	r3, [r7, #12]
 800698a:	f083 0320 	eor.w	r3, r3, #32
 800698e:	81bb      	strh	r3, [r7, #12]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	441a      	add	r2, r3
 800699a:	89bb      	ldrh	r3, [r7, #12]
 800699c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	8013      	strh	r3, [r2, #0]
 80069b0:	e04b      	b.n	8006a4a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	82fb      	strh	r3, [r7, #22]
 80069c0:	8afb      	ldrh	r3, [r7, #22]
 80069c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d01b      	beq.n	8006a02 <USB_EPClearStall+0x106>
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e0:	82bb      	strh	r3, [r7, #20]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	441a      	add	r2, r3
 80069ec:	8abb      	ldrh	r3, [r7, #20]
 80069ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a18:	827b      	strh	r3, [r7, #18]
 8006a1a:	8a7b      	ldrh	r3, [r7, #18]
 8006a1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a20:	827b      	strh	r3, [r7, #18]
 8006a22:	8a7b      	ldrh	r3, [r7, #18]
 8006a24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a28:	827b      	strh	r3, [r7, #18]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	441a      	add	r2, r3
 8006a34:	8a7b      	ldrh	r3, [r7, #18]
 8006a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr

08006a56 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	460b      	mov	r3, r1
 8006a60:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d103      	bne.n	8006a70 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2280      	movs	r2, #128	; 0x80
 8006a6c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bc80      	pop	{r7}
 8006a7a:	4770      	bx	lr

08006a7c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bc80      	pop	{r7}
 8006ac0:	4770      	bx	lr

08006ac2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr

08006ad8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b08d      	sub	sp, #52	; 0x34
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	80fb      	strh	r3, [r7, #6]
 8006aea:	4613      	mov	r3, r2
 8006aec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006aee:	88bb      	ldrh	r3, [r7, #4]
 8006af0:	3301      	adds	r3, #1
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	005a      	lsls	r2, r3, #1
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b0a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b10:	e01e      	b.n	8006b50 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	021b      	lsls	r3, r3, #8
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	3302      	adds	r3, #2
 8006b3c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	3302      	adds	r3, #2
 8006b42:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	3301      	adds	r3, #1
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1dd      	bne.n	8006b12 <USB_WritePMA+0x3a>
  }
}
 8006b56:	bf00      	nop
 8006b58:	bf00      	nop
 8006b5a:	3734      	adds	r7, #52	; 0x34
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr

08006b62 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b08b      	sub	sp, #44	; 0x2c
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	461a      	mov	r2, r3
 8006b70:	460b      	mov	r3, r1
 8006b72:	80fb      	strh	r3, [r7, #6]
 8006b74:	4613      	mov	r3, r2
 8006b76:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006b78:	88bb      	ldrh	r3, [r7, #4]
 8006b7a:	085b      	lsrs	r3, r3, #1
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b88:	88fb      	ldrh	r3, [r7, #6]
 8006b8a:	005a      	lsls	r2, r3, #1
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b94:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
 8006b9a:	e01b      	b.n	8006bd4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	3302      	adds	r3, #2
 8006ba8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	0a1b      	lsrs	r3, r3, #8
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	3302      	adds	r3, #2
 8006bcc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d1e0      	bne.n	8006b9c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006bda:	88bb      	ldrh	r3, [r7, #4]
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d007      	beq.n	8006bf6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	701a      	strb	r2, [r3, #0]
  }
}
 8006bf6:	bf00      	nop
 8006bf8:	372c      	adds	r7, #44	; 0x2c
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bc80      	pop	{r7}
 8006bfe:	4770      	bx	lr

08006c00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	7c1b      	ldrb	r3, [r3, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d115      	bne.n	8006c44 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	2181      	movs	r1, #129	; 0x81
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 fe30 	bl	8008886 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c30:	2202      	movs	r2, #2
 8006c32:	2101      	movs	r1, #1
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 fe26 	bl	8008886 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006c42:	e012      	b.n	8006c6a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c44:	2340      	movs	r3, #64	; 0x40
 8006c46:	2202      	movs	r2, #2
 8006c48:	2181      	movs	r1, #129	; 0x81
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 fe1b 	bl	8008886 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c56:	2340      	movs	r3, #64	; 0x40
 8006c58:	2202      	movs	r2, #2
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 fe12 	bl	8008886 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c6a:	2308      	movs	r3, #8
 8006c6c:	2203      	movs	r2, #3
 8006c6e:	2182      	movs	r1, #130	; 0x82
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f001 fe08 	bl	8008886 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006c7c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006c80:	f001 ff28 	bl	8008ad4 <USBD_static_malloc>
 8006c84:	4602      	mov	r2, r0
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d102      	bne.n	8006c9c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006c96:	2301      	movs	r3, #1
 8006c98:	73fb      	strb	r3, [r7, #15]
 8006c9a:	e026      	b.n	8006cea <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	7c1b      	ldrb	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d109      	bne.n	8006cda <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f001 fec8 	bl	8008a68 <USBD_LL_PrepareReceive>
 8006cd8:	e007      	b.n	8006cea <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ce0:	2340      	movs	r3, #64	; 0x40
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 febf 	bl	8008a68 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d04:	2181      	movs	r1, #129	; 0x81
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 fde3 	bl	80088d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d12:	2101      	movs	r1, #1
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 fddc 	bl	80088d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d22:	2182      	movs	r1, #130	; 0x82
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f001 fdd4 	bl	80088d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00e      	beq.n	8006d58 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 fece 	bl	8008aec <USBD_static_free>
    pdev->pClassData = NULL;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b086      	sub	sp, #24
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d72:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d039      	beq.n	8006e00 <USBD_CDC_Setup+0x9e>
 8006d8c:	2b20      	cmp	r3, #32
 8006d8e:	d17f      	bne.n	8006e90 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	88db      	ldrh	r3, [r3, #6]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d029      	beq.n	8006dec <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	b25b      	sxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	da11      	bge.n	8006dc6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006dae:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	88d2      	ldrh	r2, [r2, #6]
 8006db4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006db6:	6939      	ldr	r1, [r7, #16]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	88db      	ldrh	r3, [r3, #6]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 f9d9 	bl	8008176 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006dc4:	e06b      	b.n	8006e9e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	785a      	ldrb	r2, [r3, #1]
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	88db      	ldrh	r3, [r3, #6]
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ddc:	6939      	ldr	r1, [r7, #16]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	88db      	ldrh	r3, [r3, #6]
 8006de2:	461a      	mov	r2, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 f9f4 	bl	80081d2 <USBD_CtlPrepareRx>
      break;
 8006dea:	e058      	b.n	8006e9e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	7850      	ldrb	r0, [r2, #1]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	4798      	blx	r3
      break;
 8006dfe:	e04e      	b.n	8006e9e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	785b      	ldrb	r3, [r3, #1]
 8006e04:	2b0b      	cmp	r3, #11
 8006e06:	d02e      	beq.n	8006e66 <USBD_CDC_Setup+0x104>
 8006e08:	2b0b      	cmp	r3, #11
 8006e0a:	dc38      	bgt.n	8006e7e <USBD_CDC_Setup+0x11c>
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d002      	beq.n	8006e16 <USBD_CDC_Setup+0xb4>
 8006e10:	2b0a      	cmp	r3, #10
 8006e12:	d014      	beq.n	8006e3e <USBD_CDC_Setup+0xdc>
 8006e14:	e033      	b.n	8006e7e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d107      	bne.n	8006e30 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e20:	f107 030c 	add.w	r3, r7, #12
 8006e24:	2202      	movs	r2, #2
 8006e26:	4619      	mov	r1, r3
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f001 f9a4 	bl	8008176 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e2e:	e02e      	b.n	8006e8e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 f935 	bl	80080a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e38:	2302      	movs	r3, #2
 8006e3a:	75fb      	strb	r3, [r7, #23]
          break;
 8006e3c:	e027      	b.n	8006e8e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d107      	bne.n	8006e58 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e48:	f107 030f 	add.w	r3, r7, #15
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f001 f990 	bl	8008176 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e56:	e01a      	b.n	8006e8e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f001 f921 	bl	80080a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e60:	2302      	movs	r3, #2
 8006e62:	75fb      	strb	r3, [r7, #23]
          break;
 8006e64:	e013      	b.n	8006e8e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d00d      	beq.n	8006e8c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f001 f915 	bl	80080a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e78:	2302      	movs	r3, #2
 8006e7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e7c:	e006      	b.n	8006e8c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f001 f90e 	bl	80080a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e86:	2302      	movs	r3, #2
 8006e88:	75fb      	strb	r3, [r7, #23]
          break;
 8006e8a:	e000      	b.n	8006e8e <USBD_CDC_Setup+0x12c>
          break;
 8006e8c:	bf00      	nop
      }
      break;
 8006e8e:	e006      	b.n	8006e9e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f001 f905 	bl	80080a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e98:	2302      	movs	r3, #2
 8006e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e9c:	bf00      	nop
  }

  return ret;
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3718      	adds	r7, #24
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eba:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ec2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d03a      	beq.n	8006f44 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	331c      	adds	r3, #28
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d029      	beq.n	8006f38 <USBD_CDC_DataIn+0x90>
 8006ee4:	78fa      	ldrb	r2, [r7, #3]
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	440b      	add	r3, r1
 8006ef2:	331c      	adds	r3, #28
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	78f9      	ldrb	r1, [r7, #3]
 8006ef8:	68b8      	ldr	r0, [r7, #8]
 8006efa:	460b      	mov	r3, r1
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	440b      	add	r3, r1
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	4403      	add	r3, r0
 8006f04:	3338      	adds	r3, #56	; 0x38
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f0c:	fb01 f303 	mul.w	r3, r1, r3
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d110      	bne.n	8006f38 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006f16:	78fa      	ldrb	r2, [r7, #3]
 8006f18:	6879      	ldr	r1, [r7, #4]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	440b      	add	r3, r1
 8006f24:	331c      	adds	r3, #28
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f2a:	78f9      	ldrb	r1, [r7, #3]
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	2200      	movs	r2, #0
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 fd76 	bl	8008a22 <USBD_LL_Transmit>
 8006f36:	e003      	b.n	8006f40 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	e000      	b.n	8006f46 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006f44:	2302      	movs	r3, #2
  }
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3710      	adds	r7, #16
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f4e:	b580      	push	{r7, lr}
 8006f50:	b084      	sub	sp, #16
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
 8006f56:	460b      	mov	r3, r1
 8006f58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f60:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 fda1 	bl	8008aae <USBD_LL_GetRxDataSize>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00d      	beq.n	8006f9a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f92:	4611      	mov	r1, r2
 8006f94:	4798      	blx	r3

    return USBD_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e000      	b.n	8006f9c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006f9a:	2302      	movs	r3, #2
  }
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d015      	beq.n	8006fea <USBD_CDC_EP0_RxReady+0x46>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fc4:	2bff      	cmp	r3, #255	; 0xff
 8006fc6:	d010      	beq.n	8006fea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006fd6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fde:	b292      	uxth	r2, r2
 8006fe0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	22ff      	movs	r2, #255	; 0xff
 8006fe6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2243      	movs	r2, #67	; 0x43
 8007000:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007002:	4b03      	ldr	r3, [pc, #12]	; (8007010 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	bc80      	pop	{r7}
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	2000009c 	.word	0x2000009c

08007014 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2243      	movs	r2, #67	; 0x43
 8007020:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007022:	4b03      	ldr	r3, [pc, #12]	; (8007030 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	bc80      	pop	{r7}
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	20000058 	.word	0x20000058

08007034 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2243      	movs	r2, #67	; 0x43
 8007040:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007042:	4b03      	ldr	r3, [pc, #12]	; (8007050 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	bc80      	pop	{r7}
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	200000e0 	.word	0x200000e0

08007054 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	220a      	movs	r2, #10
 8007060:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007062:	4b03      	ldr	r3, [pc, #12]	; (8007070 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007064:	4618      	mov	r0, r3
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	bc80      	pop	{r7}
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	20000014 	.word	0x20000014

08007074 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800707e:	2302      	movs	r3, #2
 8007080:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d005      	beq.n	8007094 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007094:	7bfb      	ldrb	r3, [r7, #15]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	bc80      	pop	{r7}
 800709e:	4770      	bx	lr

080070a0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	4613      	mov	r3, r2
 80070ac:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070b4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070be:	88fa      	ldrh	r2, [r7, #6]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	371c      	adds	r7, #28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bc80      	pop	{r7}
 80070d0:	4770      	bx	lr

080070d2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b085      	sub	sp, #20
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bc80      	pop	{r7}
 80070f6:	4770      	bx	lr

080070f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007106:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710e:	2b00      	cmp	r3, #0
 8007110:	d017      	beq.n	8007142 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	7c1b      	ldrb	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d109      	bne.n	800712e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007124:	2101      	movs	r1, #1
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 fc9e 	bl	8008a68 <USBD_LL_PrepareReceive>
 800712c:	e007      	b.n	800713e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007134:	2340      	movs	r3, #64	; 0x40
 8007136:	2101      	movs	r1, #1
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 fc95 	bl	8008a68 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	e000      	b.n	8007144 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007142:	2302      	movs	r3, #2
  }
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	4613      	mov	r3, r2
 8007158:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d101      	bne.n	8007164 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007160:	2302      	movs	r3, #2
 8007162:	e01a      	b.n	800719a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	79fa      	ldrb	r2, [r7, #7]
 8007190:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f001 fb02 	bl	800879c <USBD_LL_Init>

  return USBD_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b085      	sub	sp, #20
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d006      	beq.n	80071c4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	73fb      	strb	r3, [r7, #15]
 80071c2:	e001      	b.n	80071c8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80071c4:	2302      	movs	r3, #2
 80071c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bc80      	pop	{r7}
 80071d2:	4770      	bx	lr

080071d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f001 fb37 	bl	8008850 <USBD_LL_Start>

  return USBD_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bc80      	pop	{r7}
 80071fe:	4770      	bx	lr

08007200 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800720c:	2302      	movs	r3, #2
 800720e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00c      	beq.n	8007234 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	78fa      	ldrb	r2, [r7, #3]
 8007224:	4611      	mov	r1, r2
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	4798      	blx	r3
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	78fa      	ldrb	r2, [r7, #3]
 8007254:	4611      	mov	r1, r2
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	4798      	blx	r3

  return USBD_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fed7 	bl	800802a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800728a:	461a      	mov	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007298:	f003 031f 	and.w	r3, r3, #31
 800729c:	2b02      	cmp	r3, #2
 800729e:	d016      	beq.n	80072ce <USBD_LL_SetupStage+0x6a>
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d81c      	bhi.n	80072de <USBD_LL_SetupStage+0x7a>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <USBD_LL_SetupStage+0x4a>
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d008      	beq.n	80072be <USBD_LL_SetupStage+0x5a>
 80072ac:	e017      	b.n	80072de <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072b4:	4619      	mov	r1, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f9ca 	bl	8007650 <USBD_StdDevReq>
      break;
 80072bc:	e01a      	b.n	80072f4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fa2c 	bl	8007724 <USBD_StdItfReq>
      break;
 80072cc:	e012      	b.n	80072f4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fa6c 	bl	80077b4 <USBD_StdEPReq>
      break;
 80072dc:	e00a      	b.n	80072f4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f001 fb0f 	bl	8008910 <USBD_LL_StallEP>
      break;
 80072f2:	bf00      	nop
  }

  return USBD_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b086      	sub	sp, #24
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	460b      	mov	r3, r1
 8007308:	607a      	str	r2, [r7, #4]
 800730a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800730c:	7afb      	ldrb	r3, [r7, #11]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d14b      	bne.n	80073aa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007318:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007320:	2b03      	cmp	r3, #3
 8007322:	d134      	bne.n	800738e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	68da      	ldr	r2, [r3, #12]
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	429a      	cmp	r2, r3
 800732e:	d919      	bls.n	8007364 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	68da      	ldr	r2, [r3, #12]
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	1ad2      	subs	r2, r2, r3
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007346:	429a      	cmp	r2, r3
 8007348:	d203      	bcs.n	8007352 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800734e:	b29b      	uxth	r3, r3
 8007350:	e002      	b.n	8007358 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007356:	b29b      	uxth	r3, r3
 8007358:	461a      	mov	r2, r3
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 ff56 	bl	800820e <USBD_CtlContinueRx>
 8007362:	e038      	b.n	80073d6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007376:	2b03      	cmp	r3, #3
 8007378:	d105      	bne.n	8007386 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 ff53 	bl	8008232 <USBD_CtlSendStatus>
 800738c:	e023      	b.n	80073d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007394:	2b05      	cmp	r3, #5
 8007396:	d11e      	bne.n	80073d6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80073a0:	2100      	movs	r1, #0
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f001 fab4 	bl	8008910 <USBD_LL_StallEP>
 80073a8:	e015      	b.n	80073d6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00d      	beq.n	80073d2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d108      	bne.n	80073d2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	7afa      	ldrb	r2, [r7, #11]
 80073ca:	4611      	mov	r1, r2
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	4798      	blx	r3
 80073d0:	e001      	b.n	80073d6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073d2:	2302      	movs	r3, #2
 80073d4:	e000      	b.n	80073d8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	460b      	mov	r3, r1
 80073ea:	607a      	str	r2, [r7, #4]
 80073ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073ee:	7afb      	ldrb	r3, [r7, #11]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d17f      	bne.n	80074f4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	3314      	adds	r3, #20
 80073f8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007400:	2b02      	cmp	r3, #2
 8007402:	d15c      	bne.n	80074be <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	429a      	cmp	r2, r3
 800740e:	d915      	bls.n	800743c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	68da      	ldr	r2, [r3, #12]
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	1ad2      	subs	r2, r2, r3
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	b29b      	uxth	r3, r3
 8007424:	461a      	mov	r2, r3
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 fec0 	bl	80081ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800742e:	2300      	movs	r3, #0
 8007430:	2200      	movs	r2, #0
 8007432:	2100      	movs	r1, #0
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f001 fb17 	bl	8008a68 <USBD_LL_PrepareReceive>
 800743a:	e04e      	b.n	80074da <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	6912      	ldr	r2, [r2, #16]
 8007444:	fbb3 f1f2 	udiv	r1, r3, r2
 8007448:	fb01 f202 	mul.w	r2, r1, r2
 800744c:	1a9b      	subs	r3, r3, r2
 800744e:	2b00      	cmp	r3, #0
 8007450:	d11c      	bne.n	800748c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	689a      	ldr	r2, [r3, #8]
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800745a:	429a      	cmp	r2, r3
 800745c:	d316      	bcc.n	800748c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007468:	429a      	cmp	r2, r3
 800746a:	d20f      	bcs.n	800748c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800746c:	2200      	movs	r2, #0
 800746e:	2100      	movs	r1, #0
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f000 fe9c 	bl	80081ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800747e:	2300      	movs	r3, #0
 8007480:	2200      	movs	r2, #0
 8007482:	2100      	movs	r1, #0
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f001 faef 	bl	8008a68 <USBD_LL_PrepareReceive>
 800748a:	e026      	b.n	80074da <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00a      	beq.n	80074ae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d105      	bne.n	80074ae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80074ae:	2180      	movs	r1, #128	; 0x80
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f001 fa2d 	bl	8008910 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 fece 	bl	8008258 <USBD_CtlReceiveStatus>
 80074bc:	e00d      	b.n	80074da <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	d004      	beq.n	80074d2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d103      	bne.n	80074da <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80074d2:	2180      	movs	r1, #128	; 0x80
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f001 fa1b 	bl	8008910 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d11d      	bne.n	8007520 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f7ff fe81 	bl	80071ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80074f2:	e015      	b.n	8007520 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00d      	beq.n	800751c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007506:	2b03      	cmp	r3, #3
 8007508:	d108      	bne.n	800751c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	7afa      	ldrb	r2, [r7, #11]
 8007514:	4611      	mov	r1, r2
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	4798      	blx	r3
 800751a:	e001      	b.n	8007520 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800751c:	2302      	movs	r3, #2
 800751e:	e000      	b.n	8007522 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3718      	adds	r7, #24
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b082      	sub	sp, #8
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007532:	2340      	movs	r3, #64	; 0x40
 8007534:	2200      	movs	r2, #0
 8007536:	2100      	movs	r1, #0
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 f9a4 	bl	8008886 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2240      	movs	r2, #64	; 0x40
 800754a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800754e:	2340      	movs	r3, #64	; 0x40
 8007550:	2200      	movs	r2, #0
 8007552:	2180      	movs	r1, #128	; 0x80
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 f996 	bl	8008886 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2240      	movs	r2, #64	; 0x40
 8007564:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758a:	2b00      	cmp	r3, #0
 800758c:	d009      	beq.n	80075a2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	6852      	ldr	r2, [r2, #4]
 800759a:	b2d2      	uxtb	r2, r2
 800759c:	4611      	mov	r1, r2
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	4798      	blx	r3
  }

  return USBD_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	78fa      	ldrb	r2, [r7, #3]
 80075bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr

080075ca <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2204      	movs	r2, #4
 80075e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr

080075f2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007600:	2b04      	cmp	r3, #4
 8007602:	d105      	bne.n	8007610 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	bc80      	pop	{r7}
 800761a:	4770      	bx	lr

0800761c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800762a:	2b03      	cmp	r3, #3
 800762c:	d10b      	bne.n	8007646 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d005      	beq.n	8007646 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007666:	2b40      	cmp	r3, #64	; 0x40
 8007668:	d005      	beq.n	8007676 <USBD_StdDevReq+0x26>
 800766a:	2b40      	cmp	r3, #64	; 0x40
 800766c:	d84f      	bhi.n	800770e <USBD_StdDevReq+0xbe>
 800766e:	2b00      	cmp	r3, #0
 8007670:	d009      	beq.n	8007686 <USBD_StdDevReq+0x36>
 8007672:	2b20      	cmp	r3, #32
 8007674:	d14b      	bne.n	800770e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3
      break;
 8007684:	e048      	b.n	8007718 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	785b      	ldrb	r3, [r3, #1]
 800768a:	2b09      	cmp	r3, #9
 800768c:	d839      	bhi.n	8007702 <USBD_StdDevReq+0xb2>
 800768e:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <USBD_StdDevReq+0x44>)
 8007690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007694:	080076e5 	.word	0x080076e5
 8007698:	080076f9 	.word	0x080076f9
 800769c:	08007703 	.word	0x08007703
 80076a0:	080076ef 	.word	0x080076ef
 80076a4:	08007703 	.word	0x08007703
 80076a8:	080076c7 	.word	0x080076c7
 80076ac:	080076bd 	.word	0x080076bd
 80076b0:	08007703 	.word	0x08007703
 80076b4:	080076db 	.word	0x080076db
 80076b8:	080076d1 	.word	0x080076d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f9dc 	bl	8007a7c <USBD_GetDescriptor>
          break;
 80076c4:	e022      	b.n	800770c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fb3f 	bl	8007d4c <USBD_SetAddress>
          break;
 80076ce:	e01d      	b.n	800770c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fb7e 	bl	8007dd4 <USBD_SetConfig>
          break;
 80076d8:	e018      	b.n	800770c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fc07 	bl	8007ef0 <USBD_GetConfig>
          break;
 80076e2:	e013      	b.n	800770c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fc37 	bl	8007f5a <USBD_GetStatus>
          break;
 80076ec:	e00e      	b.n	800770c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fc65 	bl	8007fc0 <USBD_SetFeature>
          break;
 80076f6:	e009      	b.n	800770c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fc74 	bl	8007fe8 <USBD_ClrFeature>
          break;
 8007700:	e004      	b.n	800770c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fccc 	bl	80080a2 <USBD_CtlError>
          break;
 800770a:	bf00      	nop
      }
      break;
 800770c:	e004      	b.n	8007718 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800770e:	6839      	ldr	r1, [r7, #0]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fcc6 	bl	80080a2 <USBD_CtlError>
      break;
 8007716:	bf00      	nop
  }

  return ret;
 8007718:	7bfb      	ldrb	r3, [r7, #15]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop

08007724 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800773a:	2b40      	cmp	r3, #64	; 0x40
 800773c:	d005      	beq.n	800774a <USBD_StdItfReq+0x26>
 800773e:	2b40      	cmp	r3, #64	; 0x40
 8007740:	d82e      	bhi.n	80077a0 <USBD_StdItfReq+0x7c>
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <USBD_StdItfReq+0x26>
 8007746:	2b20      	cmp	r3, #32
 8007748:	d12a      	bne.n	80077a0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007750:	3b01      	subs	r3, #1
 8007752:	2b02      	cmp	r3, #2
 8007754:	d81d      	bhi.n	8007792 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	889b      	ldrh	r3, [r3, #4]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b01      	cmp	r3, #1
 800775e:	d813      	bhi.n	8007788 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	4798      	blx	r3
 800776e:	4603      	mov	r3, r0
 8007770:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	88db      	ldrh	r3, [r3, #6]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d110      	bne.n	800779c <USBD_StdItfReq+0x78>
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10d      	bne.n	800779c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fd56 	bl	8008232 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007786:	e009      	b.n	800779c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fc89 	bl	80080a2 <USBD_CtlError>
          break;
 8007790:	e004      	b.n	800779c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007792:	6839      	ldr	r1, [r7, #0]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fc84 	bl	80080a2 <USBD_CtlError>
          break;
 800779a:	e000      	b.n	800779e <USBD_StdItfReq+0x7a>
          break;
 800779c:	bf00      	nop
      }
      break;
 800779e:	e004      	b.n	80077aa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fc7d 	bl	80080a2 <USBD_CtlError>
      break;
 80077a8:	bf00      	nop
  }

  return USBD_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077be:	2300      	movs	r3, #0
 80077c0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	889b      	ldrh	r3, [r3, #4]
 80077c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077d0:	2b40      	cmp	r3, #64	; 0x40
 80077d2:	d007      	beq.n	80077e4 <USBD_StdEPReq+0x30>
 80077d4:	2b40      	cmp	r3, #64	; 0x40
 80077d6:	f200 8146 	bhi.w	8007a66 <USBD_StdEPReq+0x2b2>
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <USBD_StdEPReq+0x40>
 80077de:	2b20      	cmp	r3, #32
 80077e0:	f040 8141 	bne.w	8007a66 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	4798      	blx	r3
      break;
 80077f2:	e13d      	b.n	8007a70 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d10a      	bne.n	8007816 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	4798      	blx	r3
 800780e:	4603      	mov	r3, r0
 8007810:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	e12d      	b.n	8007a72 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	785b      	ldrb	r3, [r3, #1]
 800781a:	2b03      	cmp	r3, #3
 800781c:	d007      	beq.n	800782e <USBD_StdEPReq+0x7a>
 800781e:	2b03      	cmp	r3, #3
 8007820:	f300 811b 	bgt.w	8007a5a <USBD_StdEPReq+0x2a6>
 8007824:	2b00      	cmp	r3, #0
 8007826:	d072      	beq.n	800790e <USBD_StdEPReq+0x15a>
 8007828:	2b01      	cmp	r3, #1
 800782a:	d03a      	beq.n	80078a2 <USBD_StdEPReq+0xee>
 800782c:	e115      	b.n	8007a5a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007834:	2b02      	cmp	r3, #2
 8007836:	d002      	beq.n	800783e <USBD_StdEPReq+0x8a>
 8007838:	2b03      	cmp	r3, #3
 800783a:	d015      	beq.n	8007868 <USBD_StdEPReq+0xb4>
 800783c:	e02b      	b.n	8007896 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800783e:	7bbb      	ldrb	r3, [r7, #14]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00c      	beq.n	800785e <USBD_StdEPReq+0xaa>
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	2b80      	cmp	r3, #128	; 0x80
 8007848:	d009      	beq.n	800785e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f001 f85e 	bl	8008910 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007854:	2180      	movs	r1, #128	; 0x80
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f001 f85a 	bl	8008910 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800785c:	e020      	b.n	80078a0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fc1e 	bl	80080a2 <USBD_CtlError>
              break;
 8007866:	e01b      	b.n	80078a0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	885b      	ldrh	r3, [r3, #2]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10e      	bne.n	800788e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00b      	beq.n	800788e <USBD_StdEPReq+0xda>
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	2b80      	cmp	r3, #128	; 0x80
 800787a:	d008      	beq.n	800788e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	88db      	ldrh	r3, [r3, #6]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d104      	bne.n	800788e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f001 f841 	bl	8008910 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fccf 	bl	8008232 <USBD_CtlSendStatus>

              break;
 8007894:	e004      	b.n	80078a0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fc02 	bl	80080a2 <USBD_CtlError>
              break;
 800789e:	bf00      	nop
          }
          break;
 80078a0:	e0e0      	b.n	8007a64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d002      	beq.n	80078b2 <USBD_StdEPReq+0xfe>
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d015      	beq.n	80078dc <USBD_StdEPReq+0x128>
 80078b0:	e026      	b.n	8007900 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00c      	beq.n	80078d2 <USBD_StdEPReq+0x11e>
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	2b80      	cmp	r3, #128	; 0x80
 80078bc:	d009      	beq.n	80078d2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f001 f824 	bl	8008910 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078c8:	2180      	movs	r1, #128	; 0x80
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f001 f820 	bl	8008910 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078d0:	e01c      	b.n	800790c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fbe4 	bl	80080a2 <USBD_CtlError>
              break;
 80078da:	e017      	b.n	800790c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	885b      	ldrh	r3, [r3, #2]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d112      	bne.n	800790a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d004      	beq.n	80078f8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80078ee:	7bbb      	ldrb	r3, [r7, #14]
 80078f0:	4619      	mov	r1, r3
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f001 f82b 	bl	800894e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fc9a 	bl	8008232 <USBD_CtlSendStatus>
              }
              break;
 80078fe:	e004      	b.n	800790a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fbcd 	bl	80080a2 <USBD_CtlError>
              break;
 8007908:	e000      	b.n	800790c <USBD_StdEPReq+0x158>
              break;
 800790a:	bf00      	nop
          }
          break;
 800790c:	e0aa      	b.n	8007a64 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007914:	2b02      	cmp	r3, #2
 8007916:	d002      	beq.n	800791e <USBD_StdEPReq+0x16a>
 8007918:	2b03      	cmp	r3, #3
 800791a:	d032      	beq.n	8007982 <USBD_StdEPReq+0x1ce>
 800791c:	e097      	b.n	8007a4e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d007      	beq.n	8007934 <USBD_StdEPReq+0x180>
 8007924:	7bbb      	ldrb	r3, [r7, #14]
 8007926:	2b80      	cmp	r3, #128	; 0x80
 8007928:	d004      	beq.n	8007934 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fbb8 	bl	80080a2 <USBD_CtlError>
                break;
 8007932:	e091      	b.n	8007a58 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007938:	2b00      	cmp	r3, #0
 800793a:	da0b      	bge.n	8007954 <USBD_StdEPReq+0x1a0>
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	3310      	adds	r3, #16
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	4413      	add	r3, r2
 8007950:	3304      	adds	r3, #4
 8007952:	e00b      	b.n	800796c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	4413      	add	r3, r2
 800796a:	3304      	adds	r3, #4
 800796c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2200      	movs	r2, #0
 8007972:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2202      	movs	r2, #2
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fbfb 	bl	8008176 <USBD_CtlSendData>
              break;
 8007980:	e06a      	b.n	8007a58 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007982:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007986:	2b00      	cmp	r3, #0
 8007988:	da11      	bge.n	80079ae <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	f003 020f 	and.w	r2, r3, #15
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	4613      	mov	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	440b      	add	r3, r1
 800799c:	3318      	adds	r3, #24
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d117      	bne.n	80079d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80079a4:	6839      	ldr	r1, [r7, #0]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fb7b 	bl	80080a2 <USBD_CtlError>
                  break;
 80079ac:	e054      	b.n	8007a58 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	f003 020f 	and.w	r2, r3, #15
 80079b4:	6879      	ldr	r1, [r7, #4]
 80079b6:	4613      	mov	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	4413      	add	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	440b      	add	r3, r1
 80079c0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d104      	bne.n	80079d4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fb68 	bl	80080a2 <USBD_CtlError>
                  break;
 80079d2:	e041      	b.n	8007a58 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	da0b      	bge.n	80079f4 <USBD_StdEPReq+0x240>
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079e2:	4613      	mov	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	3310      	adds	r3, #16
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	4413      	add	r3, r2
 80079f0:	3304      	adds	r3, #4
 80079f2:	e00b      	b.n	8007a0c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	4413      	add	r3, r2
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a0e:	7bbb      	ldrb	r3, [r7, #14]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <USBD_StdEPReq+0x266>
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
 8007a16:	2b80      	cmp	r3, #128	; 0x80
 8007a18:	d103      	bne.n	8007a22 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	e00e      	b.n	8007a40 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 ffb0 	bl	800898c <USBD_LL_IsStallEP>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	2201      	movs	r2, #1
 8007a36:	601a      	str	r2, [r3, #0]
 8007a38:	e002      	b.n	8007a40 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	2202      	movs	r2, #2
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fb95 	bl	8008176 <USBD_CtlSendData>
              break;
 8007a4c:	e004      	b.n	8007a58 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fb26 	bl	80080a2 <USBD_CtlError>
              break;
 8007a56:	bf00      	nop
          }
          break;
 8007a58:	e004      	b.n	8007a64 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fb20 	bl	80080a2 <USBD_CtlError>
          break;
 8007a62:	bf00      	nop
      }
      break;
 8007a64:	e004      	b.n	8007a70 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fb1a 	bl	80080a2 <USBD_CtlError>
      break;
 8007a6e:	bf00      	nop
  }

  return ret;
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	885b      	ldrh	r3, [r3, #2]
 8007a96:	0a1b      	lsrs	r3, r3, #8
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	2b06      	cmp	r3, #6
 8007a9e:	f200 8128 	bhi.w	8007cf2 <USBD_GetDescriptor+0x276>
 8007aa2:	a201      	add	r2, pc, #4	; (adr r2, 8007aa8 <USBD_GetDescriptor+0x2c>)
 8007aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa8:	08007ac5 	.word	0x08007ac5
 8007aac:	08007add 	.word	0x08007add
 8007ab0:	08007b1d 	.word	0x08007b1d
 8007ab4:	08007cf3 	.word	0x08007cf3
 8007ab8:	08007cf3 	.word	0x08007cf3
 8007abc:	08007c93 	.word	0x08007c93
 8007ac0:	08007cbf 	.word	0x08007cbf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	7c12      	ldrb	r2, [r2, #16]
 8007ad0:	f107 0108 	add.w	r1, r7, #8
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4798      	blx	r3
 8007ad8:	60f8      	str	r0, [r7, #12]
      break;
 8007ada:	e112      	b.n	8007d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	7c1b      	ldrb	r3, [r3, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10d      	bne.n	8007b00 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aec:	f107 0208 	add.w	r2, r7, #8
 8007af0:	4610      	mov	r0, r2
 8007af2:	4798      	blx	r3
 8007af4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3301      	adds	r3, #1
 8007afa:	2202      	movs	r2, #2
 8007afc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007afe:	e100      	b.n	8007d02 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	f107 0208 	add.w	r2, r7, #8
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4798      	blx	r3
 8007b10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3301      	adds	r3, #1
 8007b16:	2202      	movs	r2, #2
 8007b18:	701a      	strb	r2, [r3, #0]
      break;
 8007b1a:	e0f2      	b.n	8007d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	885b      	ldrh	r3, [r3, #2]
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b05      	cmp	r3, #5
 8007b24:	f200 80ac 	bhi.w	8007c80 <USBD_GetDescriptor+0x204>
 8007b28:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <USBD_GetDescriptor+0xb4>)
 8007b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2e:	bf00      	nop
 8007b30:	08007b49 	.word	0x08007b49
 8007b34:	08007b7d 	.word	0x08007b7d
 8007b38:	08007bb1 	.word	0x08007bb1
 8007b3c:	08007be5 	.word	0x08007be5
 8007b40:	08007c19 	.word	0x08007c19
 8007b44:	08007c4d 	.word	0x08007c4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00b      	beq.n	8007b6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	7c12      	ldrb	r2, [r2, #16]
 8007b60:	f107 0108 	add.w	r1, r7, #8
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
 8007b68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b6a:	e091      	b.n	8007c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fa97 	bl	80080a2 <USBD_CtlError>
            err++;
 8007b74:	7afb      	ldrb	r3, [r7, #11]
 8007b76:	3301      	adds	r3, #1
 8007b78:	72fb      	strb	r3, [r7, #11]
          break;
 8007b7a:	e089      	b.n	8007c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00b      	beq.n	8007ba0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	7c12      	ldrb	r2, [r2, #16]
 8007b94:	f107 0108 	add.w	r1, r7, #8
 8007b98:	4610      	mov	r0, r2
 8007b9a:	4798      	blx	r3
 8007b9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b9e:	e077      	b.n	8007c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa7d 	bl	80080a2 <USBD_CtlError>
            err++;
 8007ba8:	7afb      	ldrb	r3, [r7, #11]
 8007baa:	3301      	adds	r3, #1
 8007bac:	72fb      	strb	r3, [r7, #11]
          break;
 8007bae:	e06f      	b.n	8007c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00b      	beq.n	8007bd4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	7c12      	ldrb	r2, [r2, #16]
 8007bc8:	f107 0108 	add.w	r1, r7, #8
 8007bcc:	4610      	mov	r0, r2
 8007bce:	4798      	blx	r3
 8007bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bd2:	e05d      	b.n	8007c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 fa63 	bl	80080a2 <USBD_CtlError>
            err++;
 8007bdc:	7afb      	ldrb	r3, [r7, #11]
 8007bde:	3301      	adds	r3, #1
 8007be0:	72fb      	strb	r3, [r7, #11]
          break;
 8007be2:	e055      	b.n	8007c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	7c12      	ldrb	r2, [r2, #16]
 8007bfc:	f107 0108 	add.w	r1, r7, #8
 8007c00:	4610      	mov	r0, r2
 8007c02:	4798      	blx	r3
 8007c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c06:	e043      	b.n	8007c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fa49 	bl	80080a2 <USBD_CtlError>
            err++;
 8007c10:	7afb      	ldrb	r3, [r7, #11]
 8007c12:	3301      	adds	r3, #1
 8007c14:	72fb      	strb	r3, [r7, #11]
          break;
 8007c16:	e03b      	b.n	8007c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00b      	beq.n	8007c3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	7c12      	ldrb	r2, [r2, #16]
 8007c30:	f107 0108 	add.w	r1, r7, #8
 8007c34:	4610      	mov	r0, r2
 8007c36:	4798      	blx	r3
 8007c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c3a:	e029      	b.n	8007c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fa2f 	bl	80080a2 <USBD_CtlError>
            err++;
 8007c44:	7afb      	ldrb	r3, [r7, #11]
 8007c46:	3301      	adds	r3, #1
 8007c48:	72fb      	strb	r3, [r7, #11]
          break;
 8007c4a:	e021      	b.n	8007c90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00b      	beq.n	8007c70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	7c12      	ldrb	r2, [r2, #16]
 8007c64:	f107 0108 	add.w	r1, r7, #8
 8007c68:	4610      	mov	r0, r2
 8007c6a:	4798      	blx	r3
 8007c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c6e:	e00f      	b.n	8007c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fa15 	bl	80080a2 <USBD_CtlError>
            err++;
 8007c78:	7afb      	ldrb	r3, [r7, #11]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c7e:	e007      	b.n	8007c90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fa0d 	bl	80080a2 <USBD_CtlError>
          err++;
 8007c88:	7afb      	ldrb	r3, [r7, #11]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007c8e:	e038      	b.n	8007d02 <USBD_GetDescriptor+0x286>
 8007c90:	e037      	b.n	8007d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	7c1b      	ldrb	r3, [r3, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d109      	bne.n	8007cae <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca2:	f107 0208 	add.w	r2, r7, #8
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	4798      	blx	r3
 8007caa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cac:	e029      	b.n	8007d02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f9f6 	bl	80080a2 <USBD_CtlError>
        err++;
 8007cb6:	7afb      	ldrb	r3, [r7, #11]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	72fb      	strb	r3, [r7, #11]
      break;
 8007cbc:	e021      	b.n	8007d02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	7c1b      	ldrb	r3, [r3, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10d      	bne.n	8007ce2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cce:	f107 0208 	add.w	r2, r7, #8
 8007cd2:	4610      	mov	r0, r2
 8007cd4:	4798      	blx	r3
 8007cd6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	2207      	movs	r2, #7
 8007cde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ce0:	e00f      	b.n	8007d02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f9dc 	bl	80080a2 <USBD_CtlError>
        err++;
 8007cea:	7afb      	ldrb	r3, [r7, #11]
 8007cec:	3301      	adds	r3, #1
 8007cee:	72fb      	strb	r3, [r7, #11]
      break;
 8007cf0:	e007      	b.n	8007d02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007cf2:	6839      	ldr	r1, [r7, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f9d4 	bl	80080a2 <USBD_CtlError>
      err++;
 8007cfa:	7afb      	ldrb	r3, [r7, #11]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	72fb      	strb	r3, [r7, #11]
      break;
 8007d00:	bf00      	nop
  }

  if (err != 0U)
 8007d02:	7afb      	ldrb	r3, [r7, #11]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d11c      	bne.n	8007d42 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007d08:	893b      	ldrh	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d011      	beq.n	8007d32 <USBD_GetDescriptor+0x2b6>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	88db      	ldrh	r3, [r3, #6]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00d      	beq.n	8007d32 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	88da      	ldrh	r2, [r3, #6]
 8007d1a:	893b      	ldrh	r3, [r7, #8]
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	bf28      	it	cs
 8007d20:	4613      	movcs	r3, r2
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d26:	893b      	ldrh	r3, [r7, #8]
 8007d28:	461a      	mov	r2, r3
 8007d2a:	68f9      	ldr	r1, [r7, #12]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fa22 	bl	8008176 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	88db      	ldrh	r3, [r3, #6]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d104      	bne.n	8007d44 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fa79 	bl	8008232 <USBD_CtlSendStatus>
 8007d40:	e000      	b.n	8007d44 <USBD_GetDescriptor+0x2c8>
    return;
 8007d42:	bf00      	nop
    }
  }
}
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop

08007d4c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	889b      	ldrh	r3, [r3, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d130      	bne.n	8007dc0 <USBD_SetAddress+0x74>
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	88db      	ldrh	r3, [r3, #6]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d12c      	bne.n	8007dc0 <USBD_SetAddress+0x74>
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	885b      	ldrh	r3, [r3, #2]
 8007d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d6c:	d828      	bhi.n	8007dc0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	885b      	ldrh	r3, [r3, #2]
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d104      	bne.n	8007d8e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f98b 	bl	80080a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8c:	e01d      	b.n	8007dca <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	7bfa      	ldrb	r2, [r7, #15]
 8007d92:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fe22 	bl	80089e4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fa46 	bl	8008232 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d004      	beq.n	8007db6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db4:	e009      	b.n	8007dca <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dbe:	e004      	b.n	8007dca <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f96d 	bl	80080a2 <USBD_CtlError>
  }
}
 8007dc8:	bf00      	nop
 8007dca:	bf00      	nop
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	885b      	ldrh	r3, [r3, #2]
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	4b41      	ldr	r3, [pc, #260]	; (8007eec <USBD_SetConfig+0x118>)
 8007de6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007de8:	4b40      	ldr	r3, [pc, #256]	; (8007eec <USBD_SetConfig+0x118>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d904      	bls.n	8007dfa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f955 	bl	80080a2 <USBD_CtlError>
 8007df8:	e075      	b.n	8007ee6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d002      	beq.n	8007e0a <USBD_SetConfig+0x36>
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	d023      	beq.n	8007e50 <USBD_SetConfig+0x7c>
 8007e08:	e062      	b.n	8007ed0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007e0a:	4b38      	ldr	r3, [pc, #224]	; (8007eec <USBD_SetConfig+0x118>)
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d01a      	beq.n	8007e48 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007e12:	4b36      	ldr	r3, [pc, #216]	; (8007eec <USBD_SetConfig+0x118>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2203      	movs	r2, #3
 8007e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e24:	4b31      	ldr	r3, [pc, #196]	; (8007eec <USBD_SetConfig+0x118>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7ff f9e8 	bl	8007200 <USBD_SetClassConfig>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d104      	bne.n	8007e40 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f932 	bl	80080a2 <USBD_CtlError>
            return;
 8007e3e:	e052      	b.n	8007ee6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f9f6 	bl	8008232 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e46:	e04e      	b.n	8007ee6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f9f2 	bl	8008232 <USBD_CtlSendStatus>
        break;
 8007e4e:	e04a      	b.n	8007ee6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007e50:	4b26      	ldr	r3, [pc, #152]	; (8007eec <USBD_SetConfig+0x118>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d112      	bne.n	8007e7e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007e60:	4b22      	ldr	r3, [pc, #136]	; (8007eec <USBD_SetConfig+0x118>)
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	461a      	mov	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007e6a:	4b20      	ldr	r3, [pc, #128]	; (8007eec <USBD_SetConfig+0x118>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7ff f9e4 	bl	800723e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f9db 	bl	8008232 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e7c:	e033      	b.n	8007ee6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007e7e:	4b1b      	ldr	r3, [pc, #108]	; (8007eec <USBD_SetConfig+0x118>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d01d      	beq.n	8007ec8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7ff f9d2 	bl	800723e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007e9a:	4b14      	ldr	r3, [pc, #80]	; (8007eec <USBD_SetConfig+0x118>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ea4:	4b11      	ldr	r3, [pc, #68]	; (8007eec <USBD_SetConfig+0x118>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7ff f9a8 	bl	8007200 <USBD_SetClassConfig>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d104      	bne.n	8007ec0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f8f2 	bl	80080a2 <USBD_CtlError>
            return;
 8007ebe:	e012      	b.n	8007ee6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f9b6 	bl	8008232 <USBD_CtlSendStatus>
        break;
 8007ec6:	e00e      	b.n	8007ee6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f9b2 	bl	8008232 <USBD_CtlSendStatus>
        break;
 8007ece:	e00a      	b.n	8007ee6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f8e5 	bl	80080a2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007ed8:	4b04      	ldr	r3, [pc, #16]	; (8007eec <USBD_SetConfig+0x118>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7ff f9ad 	bl	800723e <USBD_ClrClassConfig>
        break;
 8007ee4:	bf00      	nop
    }
  }
}
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	20000260 	.word	0x20000260

08007ef0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	88db      	ldrh	r3, [r3, #6]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d004      	beq.n	8007f0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f8cc 	bl	80080a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f0a:	e022      	b.n	8007f52 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	dc02      	bgt.n	8007f1c <USBD_GetConfig+0x2c>
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	dc03      	bgt.n	8007f22 <USBD_GetConfig+0x32>
 8007f1a:	e015      	b.n	8007f48 <USBD_GetConfig+0x58>
 8007f1c:	2b03      	cmp	r3, #3
 8007f1e:	d00b      	beq.n	8007f38 <USBD_GetConfig+0x48>
 8007f20:	e012      	b.n	8007f48 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f920 	bl	8008176 <USBD_CtlSendData>
        break;
 8007f36:	e00c      	b.n	8007f52 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f918 	bl	8008176 <USBD_CtlSendData>
        break;
 8007f46:	e004      	b.n	8007f52 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f8a9 	bl	80080a2 <USBD_CtlError>
        break;
 8007f50:	bf00      	nop
}
 8007f52:	bf00      	nop
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
 8007f62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d81e      	bhi.n	8007fae <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	88db      	ldrh	r3, [r3, #6]
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d004      	beq.n	8007f82 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f891 	bl	80080a2 <USBD_CtlError>
        break;
 8007f80:	e01a      	b.n	8007fb8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d005      	beq.n	8007f9e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	f043 0202 	orr.w	r2, r3, #2
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	330c      	adds	r3, #12
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f8e5 	bl	8008176 <USBD_CtlSendData>
      break;
 8007fac:	e004      	b.n	8007fb8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 f876 	bl	80080a2 <USBD_CtlError>
      break;
 8007fb6:	bf00      	nop
  }
}
 8007fb8:	bf00      	nop
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	885b      	ldrh	r3, [r3, #2]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d106      	bne.n	8007fe0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f929 	bl	8008232 <USBD_CtlSendStatus>
  }
}
 8007fe0:	bf00      	nop
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d80b      	bhi.n	8008016 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	885b      	ldrh	r3, [r3, #2]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d10c      	bne.n	8008020 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f90f 	bl	8008232 <USBD_CtlSendStatus>
      }
      break;
 8008014:	e004      	b.n	8008020 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f842 	bl	80080a2 <USBD_CtlError>
      break;
 800801e:	e000      	b.n	8008022 <USBD_ClrFeature+0x3a>
      break;
 8008020:	bf00      	nop
  }
}
 8008022:	bf00      	nop
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781a      	ldrb	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	785a      	ldrb	r2, [r3, #1]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	3302      	adds	r3, #2
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	b29a      	uxth	r2, r3
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	3303      	adds	r3, #3
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	b29b      	uxth	r3, r3
 8008054:	021b      	lsls	r3, r3, #8
 8008056:	b29b      	uxth	r3, r3
 8008058:	4413      	add	r3, r2
 800805a:	b29a      	uxth	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	3304      	adds	r3, #4
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	b29a      	uxth	r2, r3
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	3305      	adds	r3, #5
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	b29b      	uxth	r3, r3
 8008074:	4413      	add	r3, r2
 8008076:	b29a      	uxth	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	3306      	adds	r3, #6
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	b29a      	uxth	r2, r3
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	3307      	adds	r3, #7
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	b29b      	uxth	r3, r3
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	b29b      	uxth	r3, r3
 8008090:	4413      	add	r3, r2
 8008092:	b29a      	uxth	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	80da      	strh	r2, [r3, #6]

}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr

080080a2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b082      	sub	sp, #8
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80080ac:	2180      	movs	r1, #128	; 0x80
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fc2e 	bl	8008910 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80080b4:	2100      	movs	r1, #0
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fc2a 	bl	8008910 <USBD_LL_StallEP>
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080d0:	2300      	movs	r3, #0
 80080d2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d032      	beq.n	8008140 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 f834 	bl	8008148 <USBD_GetLen>
 80080e0:	4603      	mov	r3, r0
 80080e2:	3301      	adds	r3, #1
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	005b      	lsls	r3, r3, #1
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	1c5a      	adds	r2, r3, #1
 80080f2:	75fa      	strb	r2, [r7, #23]
 80080f4:	461a      	mov	r2, r3
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	4413      	add	r3, r2
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	7812      	ldrb	r2, [r2, #0]
 80080fe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008100:	7dfb      	ldrb	r3, [r7, #23]
 8008102:	1c5a      	adds	r2, r3, #1
 8008104:	75fa      	strb	r2, [r7, #23]
 8008106:	461a      	mov	r2, r3
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4413      	add	r3, r2
 800810c:	2203      	movs	r2, #3
 800810e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008110:	e012      	b.n	8008138 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	1c5a      	adds	r2, r3, #1
 8008116:	60fa      	str	r2, [r7, #12]
 8008118:	7dfa      	ldrb	r2, [r7, #23]
 800811a:	1c51      	adds	r1, r2, #1
 800811c:	75f9      	strb	r1, [r7, #23]
 800811e:	4611      	mov	r1, r2
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	440a      	add	r2, r1
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008128:	7dfb      	ldrb	r3, [r7, #23]
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	75fa      	strb	r2, [r7, #23]
 800812e:	461a      	mov	r2, r3
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	4413      	add	r3, r2
 8008134:	2200      	movs	r2, #0
 8008136:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e8      	bne.n	8008112 <USBD_GetString+0x4e>
    }
  }
}
 8008140:	bf00      	nop
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008154:	e005      	b.n	8008162 <USBD_GetLen+0x1a>
  {
    len++;
 8008156:	7bfb      	ldrb	r3, [r7, #15]
 8008158:	3301      	adds	r3, #1
 800815a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3301      	adds	r3, #1
 8008160:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1f5      	bne.n	8008156 <USBD_GetLen+0xe>
  }

  return len;
 800816a:	7bfb      	ldrb	r3, [r7, #15]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	bc80      	pop	{r7}
 8008174:	4770      	bx	lr

08008176 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b084      	sub	sp, #16
 800817a:	af00      	add	r7, sp, #0
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	60b9      	str	r1, [r7, #8]
 8008180:	4613      	mov	r3, r2
 8008182:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2202      	movs	r2, #2
 8008188:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800818c:	88fa      	ldrh	r2, [r7, #6]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008192:	88fa      	ldrh	r2, [r7, #6]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008198:	88fb      	ldrh	r3, [r7, #6]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	2100      	movs	r1, #0
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 fc3f 	bl	8008a22 <USBD_LL_Transmit>

  return USBD_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	60f8      	str	r0, [r7, #12]
 80081b6:	60b9      	str	r1, [r7, #8]
 80081b8:	4613      	mov	r3, r2
 80081ba:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081bc:	88fb      	ldrh	r3, [r7, #6]
 80081be:	68ba      	ldr	r2, [r7, #8]
 80081c0:	2100      	movs	r1, #0
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 fc2d 	bl	8008a22 <USBD_LL_Transmit>

  return USBD_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	4613      	mov	r3, r2
 80081de:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2203      	movs	r2, #3
 80081e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80081e8:	88fa      	ldrh	r2, [r7, #6]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80081f0:	88fa      	ldrh	r2, [r7, #6]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081f8:	88fb      	ldrh	r3, [r7, #6]
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	2100      	movs	r1, #0
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f000 fc32 	bl	8008a68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	60f8      	str	r0, [r7, #12]
 8008216:	60b9      	str	r1, [r7, #8]
 8008218:	4613      	mov	r3, r2
 800821a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800821c:	88fb      	ldrh	r3, [r7, #6]
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	2100      	movs	r1, #0
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f000 fc20 	bl	8008a68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2204      	movs	r2, #4
 800823e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008242:	2300      	movs	r3, #0
 8008244:	2200      	movs	r2, #0
 8008246:	2100      	movs	r1, #0
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fbea 	bl	8008a22 <USBD_LL_Transmit>

  return USBD_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2205      	movs	r2, #5
 8008264:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008268:	2300      	movs	r3, #0
 800826a:	2200      	movs	r2, #0
 800826c:	2100      	movs	r1, #0
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fbfa 	bl	8008a68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
	...

08008280 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008284:	2200      	movs	r2, #0
 8008286:	4912      	ldr	r1, [pc, #72]	; (80082d0 <MX_USB_DEVICE_Init+0x50>)
 8008288:	4812      	ldr	r0, [pc, #72]	; (80082d4 <MX_USB_DEVICE_Init+0x54>)
 800828a:	f7fe ff5f 	bl	800714c <USBD_Init>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008294:	f7f8 fd62 	bl	8000d5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008298:	490f      	ldr	r1, [pc, #60]	; (80082d8 <MX_USB_DEVICE_Init+0x58>)
 800829a:	480e      	ldr	r0, [pc, #56]	; (80082d4 <MX_USB_DEVICE_Init+0x54>)
 800829c:	f7fe ff81 	bl	80071a2 <USBD_RegisterClass>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082a6:	f7f8 fd59 	bl	8000d5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082aa:	490c      	ldr	r1, [pc, #48]	; (80082dc <MX_USB_DEVICE_Init+0x5c>)
 80082ac:	4809      	ldr	r0, [pc, #36]	; (80082d4 <MX_USB_DEVICE_Init+0x54>)
 80082ae:	f7fe fee1 	bl	8007074 <USBD_CDC_RegisterInterface>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80082b8:	f7f8 fd50 	bl	8000d5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80082bc:	4805      	ldr	r0, [pc, #20]	; (80082d4 <MX_USB_DEVICE_Init+0x54>)
 80082be:	f7fe ff89 	bl	80071d4 <USBD_Start>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80082c8:	f7f8 fd48 	bl	8000d5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082cc:	bf00      	nop
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	20000134 	.word	0x20000134
 80082d4:	20000264 	.word	0x20000264
 80082d8:	20000020 	.word	0x20000020
 80082dc:	20000124 	.word	0x20000124

080082e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80082e4:	2200      	movs	r2, #0
 80082e6:	4905      	ldr	r1, [pc, #20]	; (80082fc <CDC_Init_FS+0x1c>)
 80082e8:	4805      	ldr	r0, [pc, #20]	; (8008300 <CDC_Init_FS+0x20>)
 80082ea:	f7fe fed9 	bl	80070a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80082ee:	4905      	ldr	r1, [pc, #20]	; (8008304 <CDC_Init_FS+0x24>)
 80082f0:	4803      	ldr	r0, [pc, #12]	; (8008300 <CDC_Init_FS+0x20>)
 80082f2:	f7fe feee 	bl	80070d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80082f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20000910 	.word	0x20000910
 8008300:	20000264 	.word	0x20000264
 8008304:	20000528 	.word	0x20000528

08008308 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008308:	b480      	push	{r7}
 800830a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800830c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800830e:	4618      	mov	r0, r3
 8008310:	46bd      	mov	sp, r7
 8008312:	bc80      	pop	{r7}
 8008314:	4770      	bx	lr
	...

08008318 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	6039      	str	r1, [r7, #0]
 8008322:	71fb      	strb	r3, [r7, #7]
 8008324:	4613      	mov	r3, r2
 8008326:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008328:	79fb      	ldrb	r3, [r7, #7]
 800832a:	2b23      	cmp	r3, #35	; 0x23
 800832c:	d84a      	bhi.n	80083c4 <CDC_Control_FS+0xac>
 800832e:	a201      	add	r2, pc, #4	; (adr r2, 8008334 <CDC_Control_FS+0x1c>)
 8008330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008334:	080083c5 	.word	0x080083c5
 8008338:	080083c5 	.word	0x080083c5
 800833c:	080083c5 	.word	0x080083c5
 8008340:	080083c5 	.word	0x080083c5
 8008344:	080083c5 	.word	0x080083c5
 8008348:	080083c5 	.word	0x080083c5
 800834c:	080083c5 	.word	0x080083c5
 8008350:	080083c5 	.word	0x080083c5
 8008354:	080083c5 	.word	0x080083c5
 8008358:	080083c5 	.word	0x080083c5
 800835c:	080083c5 	.word	0x080083c5
 8008360:	080083c5 	.word	0x080083c5
 8008364:	080083c5 	.word	0x080083c5
 8008368:	080083c5 	.word	0x080083c5
 800836c:	080083c5 	.word	0x080083c5
 8008370:	080083c5 	.word	0x080083c5
 8008374:	080083c5 	.word	0x080083c5
 8008378:	080083c5 	.word	0x080083c5
 800837c:	080083c5 	.word	0x080083c5
 8008380:	080083c5 	.word	0x080083c5
 8008384:	080083c5 	.word	0x080083c5
 8008388:	080083c5 	.word	0x080083c5
 800838c:	080083c5 	.word	0x080083c5
 8008390:	080083c5 	.word	0x080083c5
 8008394:	080083c5 	.word	0x080083c5
 8008398:	080083c5 	.word	0x080083c5
 800839c:	080083c5 	.word	0x080083c5
 80083a0:	080083c5 	.word	0x080083c5
 80083a4:	080083c5 	.word	0x080083c5
 80083a8:	080083c5 	.word	0x080083c5
 80083ac:	080083c5 	.word	0x080083c5
 80083b0:	080083c5 	.word	0x080083c5
 80083b4:	080083c5 	.word	0x080083c5
 80083b8:	080083c5 	.word	0x080083c5
 80083bc:	080083c5 	.word	0x080083c5
 80083c0:	080083c5 	.word	0x080083c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80083c4:	bf00      	nop
  }

  return (USBD_OK);
 80083c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bc80      	pop	{r7}
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop

080083d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	4805      	ldr	r0, [pc, #20]	; (80083f8 <CDC_Receive_FS+0x24>)
 80083e2:	f7fe fe76 	bl	80070d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80083e6:	4804      	ldr	r0, [pc, #16]	; (80083f8 <CDC_Receive_FS+0x24>)
 80083e8:	f7fe fe86 	bl	80070f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80083ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000264 	.word	0x20000264

080083fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	6039      	str	r1, [r7, #0]
 8008406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	2212      	movs	r2, #18
 800840c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800840e:	4b03      	ldr	r3, [pc, #12]	; (800841c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	bc80      	pop	{r7}
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	20000150 	.word	0x20000150

08008420 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	6039      	str	r1, [r7, #0]
 800842a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	2204      	movs	r2, #4
 8008430:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008432:	4b03      	ldr	r3, [pc, #12]	; (8008440 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008434:	4618      	mov	r0, r3
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	bc80      	pop	{r7}
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	20000164 	.word	0x20000164

08008444 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	4603      	mov	r3, r0
 800844c:	6039      	str	r1, [r7, #0]
 800844e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008450:	79fb      	ldrb	r3, [r7, #7]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d105      	bne.n	8008462 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	4907      	ldr	r1, [pc, #28]	; (8008478 <USBD_FS_ProductStrDescriptor+0x34>)
 800845a:	4808      	ldr	r0, [pc, #32]	; (800847c <USBD_FS_ProductStrDescriptor+0x38>)
 800845c:	f7ff fe32 	bl	80080c4 <USBD_GetString>
 8008460:	e004      	b.n	800846c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	4904      	ldr	r1, [pc, #16]	; (8008478 <USBD_FS_ProductStrDescriptor+0x34>)
 8008466:	4805      	ldr	r0, [pc, #20]	; (800847c <USBD_FS_ProductStrDescriptor+0x38>)
 8008468:	f7ff fe2c 	bl	80080c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800846c:	4b02      	ldr	r3, [pc, #8]	; (8008478 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	20000cf8 	.word	0x20000cf8
 800847c:	08009b10 	.word	0x08009b10

08008480 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	4603      	mov	r3, r0
 8008488:	6039      	str	r1, [r7, #0]
 800848a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	4904      	ldr	r1, [pc, #16]	; (80084a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008490:	4804      	ldr	r0, [pc, #16]	; (80084a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008492:	f7ff fe17 	bl	80080c4 <USBD_GetString>
  return USBD_StrDesc;
 8008496:	4b02      	ldr	r3, [pc, #8]	; (80084a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20000cf8 	.word	0x20000cf8
 80084a4:	08009b28 	.word	0x08009b28

080084a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	4603      	mov	r3, r0
 80084b0:	6039      	str	r1, [r7, #0]
 80084b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	221a      	movs	r2, #26
 80084b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80084ba:	f000 f843 	bl	8008544 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80084be:	4b02      	ldr	r3, [pc, #8]	; (80084c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	20000168 	.word	0x20000168

080084cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	6039      	str	r1, [r7, #0]
 80084d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d105      	bne.n	80084ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	4907      	ldr	r1, [pc, #28]	; (8008500 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084e2:	4808      	ldr	r0, [pc, #32]	; (8008504 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084e4:	f7ff fdee 	bl	80080c4 <USBD_GetString>
 80084e8:	e004      	b.n	80084f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	4904      	ldr	r1, [pc, #16]	; (8008500 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084ee:	4805      	ldr	r0, [pc, #20]	; (8008504 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084f0:	f7ff fde8 	bl	80080c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084f4:	4b02      	ldr	r3, [pc, #8]	; (8008500 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000cf8 	.word	0x20000cf8
 8008504:	08009b3c 	.word	0x08009b3c

08008508 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	4603      	mov	r3, r0
 8008510:	6039      	str	r1, [r7, #0]
 8008512:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008514:	79fb      	ldrb	r3, [r7, #7]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d105      	bne.n	8008526 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	4907      	ldr	r1, [pc, #28]	; (800853c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800851e:	4808      	ldr	r0, [pc, #32]	; (8008540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008520:	f7ff fdd0 	bl	80080c4 <USBD_GetString>
 8008524:	e004      	b.n	8008530 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	4904      	ldr	r1, [pc, #16]	; (800853c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800852a:	4805      	ldr	r0, [pc, #20]	; (8008540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800852c:	f7ff fdca 	bl	80080c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008530:	4b02      	ldr	r3, [pc, #8]	; (800853c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20000cf8 	.word	0x20000cf8
 8008540:	08009b48 	.word	0x08009b48

08008544 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b084      	sub	sp, #16
 8008548:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800854a:	4b0f      	ldr	r3, [pc, #60]	; (8008588 <Get_SerialNum+0x44>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008550:	4b0e      	ldr	r3, [pc, #56]	; (800858c <Get_SerialNum+0x48>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008556:	4b0e      	ldr	r3, [pc, #56]	; (8008590 <Get_SerialNum+0x4c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4413      	add	r3, r2
 8008562:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d009      	beq.n	800857e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800856a:	2208      	movs	r2, #8
 800856c:	4909      	ldr	r1, [pc, #36]	; (8008594 <Get_SerialNum+0x50>)
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 f814 	bl	800859c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008574:	2204      	movs	r2, #4
 8008576:	4908      	ldr	r1, [pc, #32]	; (8008598 <Get_SerialNum+0x54>)
 8008578:	68b8      	ldr	r0, [r7, #8]
 800857a:	f000 f80f 	bl	800859c <IntToUnicode>
  }
}
 800857e:	bf00      	nop
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	1ffff7e8 	.word	0x1ffff7e8
 800858c:	1ffff7ec 	.word	0x1ffff7ec
 8008590:	1ffff7f0 	.word	0x1ffff7f0
 8008594:	2000016a 	.word	0x2000016a
 8008598:	2000017a 	.word	0x2000017a

0800859c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800859c:	b480      	push	{r7}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	4613      	mov	r3, r2
 80085a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80085ae:	2300      	movs	r3, #0
 80085b0:	75fb      	strb	r3, [r7, #23]
 80085b2:	e027      	b.n	8008604 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	0f1b      	lsrs	r3, r3, #28
 80085b8:	2b09      	cmp	r3, #9
 80085ba:	d80b      	bhi.n	80085d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	0f1b      	lsrs	r3, r3, #28
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	005b      	lsls	r3, r3, #1
 80085c6:	4619      	mov	r1, r3
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	440b      	add	r3, r1
 80085cc:	3230      	adds	r2, #48	; 0x30
 80085ce:	b2d2      	uxtb	r2, r2
 80085d0:	701a      	strb	r2, [r3, #0]
 80085d2:	e00a      	b.n	80085ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	0f1b      	lsrs	r3, r3, #28
 80085d8:	b2da      	uxtb	r2, r3
 80085da:	7dfb      	ldrb	r3, [r7, #23]
 80085dc:	005b      	lsls	r3, r3, #1
 80085de:	4619      	mov	r1, r3
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	440b      	add	r3, r1
 80085e4:	3237      	adds	r2, #55	; 0x37
 80085e6:	b2d2      	uxtb	r2, r2
 80085e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	011b      	lsls	r3, r3, #4
 80085ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085f0:	7dfb      	ldrb	r3, [r7, #23]
 80085f2:	005b      	lsls	r3, r3, #1
 80085f4:	3301      	adds	r3, #1
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	4413      	add	r3, r2
 80085fa:	2200      	movs	r2, #0
 80085fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	3301      	adds	r3, #1
 8008602:	75fb      	strb	r3, [r7, #23]
 8008604:	7dfa      	ldrb	r2, [r7, #23]
 8008606:	79fb      	ldrb	r3, [r7, #7]
 8008608:	429a      	cmp	r2, r3
 800860a:	d3d3      	bcc.n	80085b4 <IntToUnicode+0x18>
  }
}
 800860c:	bf00      	nop
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	bc80      	pop	{r7}
 8008616:	4770      	bx	lr

08008618 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a0d      	ldr	r2, [pc, #52]	; (800865c <HAL_PCD_MspInit+0x44>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d113      	bne.n	8008652 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800862a:	4b0d      	ldr	r3, [pc, #52]	; (8008660 <HAL_PCD_MspInit+0x48>)
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	4a0c      	ldr	r2, [pc, #48]	; (8008660 <HAL_PCD_MspInit+0x48>)
 8008630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008634:	61d3      	str	r3, [r2, #28]
 8008636:	4b0a      	ldr	r3, [pc, #40]	; (8008660 <HAL_PCD_MspInit+0x48>)
 8008638:	69db      	ldr	r3, [r3, #28]
 800863a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800863e:	60fb      	str	r3, [r7, #12]
 8008640:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008642:	2200      	movs	r2, #0
 8008644:	2100      	movs	r1, #0
 8008646:	2014      	movs	r0, #20
 8008648:	f7f8 fddf 	bl	800120a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800864c:	2014      	movs	r0, #20
 800864e:	f7f8 fdf8 	bl	8001242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008652:	bf00      	nop
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	40005c00 	.word	0x40005c00
 8008660:	40021000 	.word	0x40021000

08008664 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008678:	4619      	mov	r1, r3
 800867a:	4610      	mov	r0, r2
 800867c:	f7fe fdf2 	bl	8007264 <USBD_LL_SetupStage>
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800869a:	78fa      	ldrb	r2, [r7, #3]
 800869c:	6879      	ldr	r1, [r7, #4]
 800869e:	4613      	mov	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	4413      	add	r3, r2
 80086a4:	00db      	lsls	r3, r3, #3
 80086a6:	440b      	add	r3, r1
 80086a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	78fb      	ldrb	r3, [r7, #3]
 80086b0:	4619      	mov	r1, r3
 80086b2:	f7fe fe24 	bl	80072fe <USBD_LL_DataOutStage>
}
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b082      	sub	sp, #8
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	460b      	mov	r3, r1
 80086c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80086d0:	78fa      	ldrb	r2, [r7, #3]
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	440b      	add	r3, r1
 80086de:	333c      	adds	r3, #60	; 0x3c
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	78fb      	ldrb	r3, [r7, #3]
 80086e4:	4619      	mov	r1, r3
 80086e6:	f7fe fe7b 	bl	80073e0 <USBD_LL_DataInStage>
}
 80086ea:	bf00      	nop
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b082      	sub	sp, #8
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008700:	4618      	mov	r0, r3
 8008702:	f7fe ff8b 	bl	800761c <USBD_LL_SOF>
}
 8008706:	bf00      	nop
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008716:	2301      	movs	r3, #1
 8008718:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	2b02      	cmp	r3, #2
 8008720:	d001      	beq.n	8008726 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008722:	f7f8 fb1b 	bl	8000d5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800872c:	7bfa      	ldrb	r2, [r7, #15]
 800872e:	4611      	mov	r1, r2
 8008730:	4618      	mov	r0, r3
 8008732:	f7fe ff3b 	bl	80075ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800873c:	4618      	mov	r0, r3
 800873e:	f7fe fef4 	bl	800752a <USBD_LL_Reset>
}
 8008742:	bf00      	nop
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800875a:	4618      	mov	r0, r3
 800875c:	f7fe ff35 	bl	80075ca <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d005      	beq.n	8008774 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008768:	4b04      	ldr	r3, [pc, #16]	; (800877c <HAL_PCD_SuspendCallback+0x30>)
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	4a03      	ldr	r2, [pc, #12]	; (800877c <HAL_PCD_SuspendCallback+0x30>)
 800876e:	f043 0306 	orr.w	r3, r3, #6
 8008772:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008774:	bf00      	nop
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	e000ed00 	.word	0xe000ed00

08008780 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800878e:	4618      	mov	r0, r3
 8008790:	f7fe ff2f 	bl	80075f2 <USBD_LL_Resume>
}
 8008794:	bf00      	nop
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80087a4:	4a28      	ldr	r2, [pc, #160]	; (8008848 <USBD_LL_Init+0xac>)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a26      	ldr	r2, [pc, #152]	; (8008848 <USBD_LL_Init+0xac>)
 80087b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80087b4:	4b24      	ldr	r3, [pc, #144]	; (8008848 <USBD_LL_Init+0xac>)
 80087b6:	4a25      	ldr	r2, [pc, #148]	; (800884c <USBD_LL_Init+0xb0>)
 80087b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80087ba:	4b23      	ldr	r3, [pc, #140]	; (8008848 <USBD_LL_Init+0xac>)
 80087bc:	2208      	movs	r2, #8
 80087be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80087c0:	4b21      	ldr	r3, [pc, #132]	; (8008848 <USBD_LL_Init+0xac>)
 80087c2:	2202      	movs	r2, #2
 80087c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80087c6:	4b20      	ldr	r3, [pc, #128]	; (8008848 <USBD_LL_Init+0xac>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80087cc:	4b1e      	ldr	r3, [pc, #120]	; (8008848 <USBD_LL_Init+0xac>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80087d2:	4b1d      	ldr	r3, [pc, #116]	; (8008848 <USBD_LL_Init+0xac>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80087d8:	481b      	ldr	r0, [pc, #108]	; (8008848 <USBD_LL_Init+0xac>)
 80087da:	f7f8 fee9 	bl	80015b0 <HAL_PCD_Init>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80087e4:	f7f8 faba 	bl	8000d5c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087ee:	2318      	movs	r3, #24
 80087f0:	2200      	movs	r2, #0
 80087f2:	2100      	movs	r1, #0
 80087f4:	f7fa fb5d 	bl	8002eb2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087fe:	2358      	movs	r3, #88	; 0x58
 8008800:	2200      	movs	r2, #0
 8008802:	2180      	movs	r1, #128	; 0x80
 8008804:	f7fa fb55 	bl	8002eb2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800880e:	23c0      	movs	r3, #192	; 0xc0
 8008810:	2200      	movs	r2, #0
 8008812:	2181      	movs	r1, #129	; 0x81
 8008814:	f7fa fb4d 	bl	8002eb2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800881e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008822:	2200      	movs	r2, #0
 8008824:	2101      	movs	r1, #1
 8008826:	f7fa fb44 	bl	8002eb2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008834:	2200      	movs	r2, #0
 8008836:	2182      	movs	r1, #130	; 0x82
 8008838:	f7fa fb3b 	bl	8002eb2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3708      	adds	r7, #8
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20000ef8 	.word	0x20000ef8
 800884c:	40005c00 	.word	0x40005c00

08008850 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008866:	4618      	mov	r0, r3
 8008868:	f7f8 ffad 	bl	80017c6 <HAL_PCD_Start>
 800886c:	4603      	mov	r3, r0
 800886e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008870:	7bfb      	ldrb	r3, [r7, #15]
 8008872:	4618      	mov	r0, r3
 8008874:	f000 f94e 	bl	8008b14 <USBD_Get_USB_Status>
 8008878:	4603      	mov	r3, r0
 800887a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800887c:	7bbb      	ldrb	r3, [r7, #14]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	4608      	mov	r0, r1
 8008890:	4611      	mov	r1, r2
 8008892:	461a      	mov	r2, r3
 8008894:	4603      	mov	r3, r0
 8008896:	70fb      	strb	r3, [r7, #3]
 8008898:	460b      	mov	r3, r1
 800889a:	70bb      	strb	r3, [r7, #2]
 800889c:	4613      	mov	r3, r2
 800889e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a4:	2300      	movs	r3, #0
 80088a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088ae:	78bb      	ldrb	r3, [r7, #2]
 80088b0:	883a      	ldrh	r2, [r7, #0]
 80088b2:	78f9      	ldrb	r1, [r7, #3]
 80088b4:	f7f9 f925 	bl	8001b02 <HAL_PCD_EP_Open>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 f928 	bl	8008b14 <USBD_Get_USB_Status>
 80088c4:	4603      	mov	r3, r0
 80088c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088ec:	78fa      	ldrb	r2, [r7, #3]
 80088ee:	4611      	mov	r1, r2
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7f9 f96c 	bl	8001bce <HAL_PCD_EP_Close>
 80088f6:	4603      	mov	r3, r0
 80088f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 f909 	bl	8008b14 <USBD_Get_USB_Status>
 8008902:	4603      	mov	r3, r0
 8008904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008906:	7bbb      	ldrb	r3, [r7, #14]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008920:	2300      	movs	r3, #0
 8008922:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800892a:	78fa      	ldrb	r2, [r7, #3]
 800892c:	4611      	mov	r1, r2
 800892e:	4618      	mov	r0, r3
 8008930:	f7f9 fa2c 	bl	8001d8c <HAL_PCD_EP_SetStall>
 8008934:	4603      	mov	r3, r0
 8008936:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	4618      	mov	r0, r3
 800893c:	f000 f8ea 	bl	8008b14 <USBD_Get_USB_Status>
 8008940:	4603      	mov	r3, r0
 8008942:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008944:	7bbb      	ldrb	r3, [r7, #14]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	460b      	mov	r3, r1
 8008958:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800895e:	2300      	movs	r3, #0
 8008960:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008968:	78fa      	ldrb	r2, [r7, #3]
 800896a:	4611      	mov	r1, r2
 800896c:	4618      	mov	r0, r3
 800896e:	f7f9 fa6d 	bl	8001e4c <HAL_PCD_EP_ClrStall>
 8008972:	4603      	mov	r3, r0
 8008974:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	4618      	mov	r0, r3
 800897a:	f000 f8cb 	bl	8008b14 <USBD_Get_USB_Status>
 800897e:	4603      	mov	r3, r0
 8008980:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008982:	7bbb      	ldrb	r3, [r7, #14]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	460b      	mov	r3, r1
 8008996:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800899e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80089a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	da0c      	bge.n	80089c2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80089a8:	78fb      	ldrb	r3, [r7, #3]
 80089aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ae:	68f9      	ldr	r1, [r7, #12]
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	440b      	add	r3, r1
 80089bc:	3302      	adds	r3, #2
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	e00b      	b.n	80089da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80089c2:	78fb      	ldrb	r3, [r7, #3]
 80089c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089c8:	68f9      	ldr	r1, [r7, #12]
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	00db      	lsls	r3, r3, #3
 80089d2:	440b      	add	r3, r1
 80089d4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80089d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	bc80      	pop	{r7}
 80089e2:	4770      	bx	lr

080089e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	460b      	mov	r3, r1
 80089ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089fe:	78fa      	ldrb	r2, [r7, #3]
 8008a00:	4611      	mov	r1, r2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7f9 f858 	bl	8001ab8 <HAL_PCD_SetAddress>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 f880 	bl	8008b14 <USBD_Get_USB_Status>
 8008a14:	4603      	mov	r3, r0
 8008a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b086      	sub	sp, #24
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	60f8      	str	r0, [r7, #12]
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	460b      	mov	r3, r1
 8008a30:	72fb      	strb	r3, [r7, #11]
 8008a32:	4613      	mov	r3, r2
 8008a34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a44:	893b      	ldrh	r3, [r7, #8]
 8008a46:	7af9      	ldrb	r1, [r7, #11]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	f7f9 f95c 	bl	8001d06 <HAL_PCD_EP_Transmit>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 f85d 	bl	8008b14 <USBD_Get_USB_Status>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008a5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	607a      	str	r2, [r7, #4]
 8008a72:	461a      	mov	r2, r3
 8008a74:	460b      	mov	r3, r1
 8008a76:	72fb      	strb	r3, [r7, #11]
 8008a78:	4613      	mov	r3, r2
 8008a7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a8a:	893b      	ldrh	r3, [r7, #8]
 8008a8c:	7af9      	ldrb	r1, [r7, #11]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	f7f9 f8e5 	bl	8001c5e <HAL_PCD_EP_Receive>
 8008a94:	4603      	mov	r3, r0
 8008a96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 f83a 	bl	8008b14 <USBD_Get_USB_Status>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008aa4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b082      	sub	sp, #8
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ac0:	78fa      	ldrb	r2, [r7, #3]
 8008ac2:	4611      	mov	r1, r2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7f9 f907 	bl	8001cd8 <HAL_PCD_EP_GetRxCount>
 8008aca:	4603      	mov	r3, r0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008adc:	4b02      	ldr	r3, [pc, #8]	; (8008ae8 <USBD_static_malloc+0x14>)
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bc80      	pop	{r7}
 8008ae6:	4770      	bx	lr
 8008ae8:	200011e4 	.word	0x200011e4

08008aec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]

}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bc80      	pop	{r7}
 8008afc:	4770      	bx	lr

08008afe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008afe:	b480      	push	{r7}
 8008b00:	b083      	sub	sp, #12
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	460b      	mov	r3, r1
 8008b08:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008b0a:	bf00      	nop
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bc80      	pop	{r7}
 8008b12:	4770      	bx	lr

08008b14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b22:	79fb      	ldrb	r3, [r7, #7]
 8008b24:	2b03      	cmp	r3, #3
 8008b26:	d817      	bhi.n	8008b58 <USBD_Get_USB_Status+0x44>
 8008b28:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <USBD_Get_USB_Status+0x1c>)
 8008b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2e:	bf00      	nop
 8008b30:	08008b41 	.word	0x08008b41
 8008b34:	08008b47 	.word	0x08008b47
 8008b38:	08008b4d 	.word	0x08008b4d
 8008b3c:	08008b53 	.word	0x08008b53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	73fb      	strb	r3, [r7, #15]
    break;
 8008b44:	e00b      	b.n	8008b5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b46:	2302      	movs	r3, #2
 8008b48:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4a:	e008      	b.n	8008b5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008b50:	e005      	b.n	8008b5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b52:	2302      	movs	r3, #2
 8008b54:	73fb      	strb	r3, [r7, #15]
    break;
 8008b56:	e002      	b.n	8008b5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b58:	2302      	movs	r3, #2
 8008b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5c:	bf00      	nop
  }
  return usb_status;
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bc80      	pop	{r7}
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop

08008b6c <ws2812b_init>:
 *            - 2 handle is NULL
 *            - 3 linked functions is NULL
 * @note      none
 */
uint8_t ws2812b_init(ws2812b_handle_t *handle)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
    if (handle == NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d101      	bne.n	8008b7e <ws2812b_init+0x12>
        return 2;
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	e027      	b.n	8008bce <ws2812b_init+0x62>
    if (handle->debug_print == NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d101      	bne.n	8008b8a <ws2812b_init+0x1e>
        return 3;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e021      	b.n	8008bce <ws2812b_init+0x62>

    if (handle->delay_ms == NULL)   /* check delay_ms */
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d105      	bne.n	8008b9e <ws2812b_init+0x32>
    {
        handle->debug_print("ws2812b: delay_ms is null.\n"); /* delay_ms is null */
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	4810      	ldr	r0, [pc, #64]	; (8008bd8 <ws2812b_init+0x6c>)
 8008b98:	4798      	blx	r3

        return 3; /* return error */
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e017      	b.n	8008bce <ws2812b_init+0x62>
    }

    if (handle->logic_high == NULL)   /*check logic write high */
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d105      	bne.n	8008bb2 <ws2812b_init+0x46>
    {

        handle->debug_print("ws2812b: gpio digital write high is null, \n");
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	480c      	ldr	r0, [pc, #48]	; (8008bdc <ws2812b_init+0x70>)
 8008bac:	4798      	blx	r3
        return 3; /* return error */
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e00d      	b.n	8008bce <ws2812b_init+0x62>
    }

    if (handle->logic_low == NULL)   /*check  write low */
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d105      	bne.n	8008bc6 <ws2812b_init+0x5a>
    {

        handle->debug_print("ws2812b: gpio digital write low is null, \n");
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	4808      	ldr	r0, [pc, #32]	; (8008be0 <ws2812b_init+0x74>)
 8008bc0:	4798      	blx	r3
        return 3; /* return error */
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e003      	b.n	8008bce <ws2812b_init+0x62>
    }

    handle->inited = 1; /* flag finish initialization */
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	761a      	strb	r2, [r3, #24]


    return 0; /*return success*/
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3708      	adds	r7, #8
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	08009b58 	.word	0x08009b58
 8008bdc:	08009b74 	.word	0x08009b74
 8008be0:	08009ba0 	.word	0x08009ba0

08008be4 <ws2812b_write_byte>:
 *            - 3 linked functions is NULL
 * @note     none
 */

uint8_t ws2812b_write_byte(ws2812b_handle_t *handle, uint8_t byte)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]

    uint8_t index;
    uint8_t nBitMax = 8;   /**< Number of bit to be written*/
 8008bf0:	2308      	movs	r3, #8
 8008bf2:	73bb      	strb	r3, [r7, #14]
    if (handle == NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <ws2812b_write_byte+0x1a>
        return 2;
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	e01f      	b.n	8008c3e <ws2812b_write_byte+0x5a>
    if (handle->debug_print == NULL)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <ws2812b_write_byte+0x26>
        return 3;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e019      	b.n	8008c3e <ws2812b_write_byte+0x5a>

    for(index = 0; index < nBitMax; index++)
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73fb      	strb	r3, [r7, #15]
 8008c0e:	e011      	b.n	8008c34 <ws2812b_write_byte+0x50>
    {
        if (byte & (0x80 >> index ))
 8008c10:	78fa      	ldrb	r2, [r7, #3]
 8008c12:	7bfb      	ldrb	r3, [r7, #15]
 8008c14:	2180      	movs	r1, #128	; 0x80
 8008c16:	fa41 f303 	asr.w	r3, r1, r3
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d003      	beq.n	8008c28 <ws2812b_write_byte+0x44>
        {
            handle->logic_high();
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4798      	blx	r3
 8008c26:	e002      	b.n	8008c2e <ws2812b_write_byte+0x4a>
        }
        else
        {
            handle->logic_low();
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	4798      	blx	r3
    for(index = 0; index < nBitMax; index++)
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
 8008c30:	3301      	adds	r3, #1
 8008c32:	73fb      	strb	r3, [r7, #15]
 8008c34:	7bfa      	ldrb	r2, [r7, #15]
 8008c36:	7bbb      	ldrb	r3, [r7, #14]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d3e9      	bcc.n	8008c10 <ws2812b_write_byte+0x2c>
        }
    }

    return 0;             /**< success */
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
	...

08008c48 <ws2812b_write_basic_colour>:
 *            - 2 handle is NULL
 *            - 3 linked functions is NULL
 * @note     none
 */
uint8_t ws2812b_write_basic_colour(ws2812b_handle_t *handle, ws2812b_basic_colour_t colour)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]

    uint8_t green = 255, red = 255, blue = 255;  /**< maximum brightness for all three colours*/
 8008c54:	23ff      	movs	r3, #255	; 0xff
 8008c56:	73fb      	strb	r3, [r7, #15]
 8008c58:	23ff      	movs	r3, #255	; 0xff
 8008c5a:	73bb      	strb	r3, [r7, #14]
 8008c5c:	23ff      	movs	r3, #255	; 0xff
 8008c5e:	737b      	strb	r3, [r7, #13]

    if (handle == NULL)      /**< check handle */
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <ws2812b_write_basic_colour+0x22>
        return 2;            /**< return error */
 8008c66:	2302      	movs	r3, #2
 8008c68:	e0a6      	b.n	8008db8 <ws2812b_write_basic_colour+0x170>
    if (handle->inited != 1) /**< check handle initialization */
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	7e1b      	ldrb	r3, [r3, #24]
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d001      	beq.n	8008c76 <ws2812b_write_basic_colour+0x2e>
        return 3;            /**< return error */
 8008c72:	2303      	movs	r3, #3
 8008c74:	e0a0      	b.n	8008db8 <ws2812b_write_basic_colour+0x170>

    switch (colour)
 8008c76:	78fb      	ldrb	r3, [r7, #3]
 8008c78:	2b08      	cmp	r3, #8
 8008c7a:	f200 809c 	bhi.w	8008db6 <ws2812b_write_basic_colour+0x16e>
 8008c7e:	a201      	add	r2, pc, #4	; (adr r2, 8008c84 <ws2812b_write_basic_colour+0x3c>)
 8008c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c84:	08008ca9 	.word	0x08008ca9
 8008c88:	08008ce1 	.word	0x08008ce1
 8008c8c:	08008cc5 	.word	0x08008cc5
 8008c90:	08008cfd 	.word	0x08008cfd
 8008c94:	08008d1b 	.word	0x08008d1b
 8008c98:	08008d59 	.word	0x08008d59
 8008c9c:	08008d39 	.word	0x08008d39
 8008ca0:	08008d77 	.word	0x08008d77
 8008ca4:	08008d9d 	.word	0x08008d9d
    {

    case WS2812B_COLOUR_RED:
        ws2812b_write_byte(handle, 0);
 8008ca8:	2100      	movs	r1, #0
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7ff ff9a 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, red);
 8008cb0:	7bbb      	ldrb	r3, [r7, #14]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7ff ff95 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, 0);
 8008cba:	2100      	movs	r1, #0
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff ff91 	bl	8008be4 <ws2812b_write_byte>
        break;
 8008cc2:	e078      	b.n	8008db6 <ws2812b_write_basic_colour+0x16e>

    case WS2812B_COLOUR_BLUE:
        ws2812b_write_byte(handle, 0);
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7ff ff8c 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, 0);
 8008ccc:	2100      	movs	r1, #0
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7ff ff88 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, blue);
 8008cd4:	7b7b      	ldrb	r3, [r7, #13]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff ff83 	bl	8008be4 <ws2812b_write_byte>
        break;
 8008cde:	e06a      	b.n	8008db6 <ws2812b_write_basic_colour+0x16e>

    case WS2812B_COLOUR_GREEN:
        ws2812b_write_byte(handle, green);
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f7ff ff7d 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, 0);
 8008cea:	2100      	movs	r1, #0
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7ff ff79 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, 0);
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7ff ff75 	bl	8008be4 <ws2812b_write_byte>
        break;
 8008cfa:	e05c      	b.n	8008db6 <ws2812b_write_basic_colour+0x16e>

    case WS2812B_COLOUR_YELLOW:
        ws2812b_write_byte(handle, green);
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff ff6f 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, red);
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7ff ff6a 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, 0);
 8008d10:	2100      	movs	r1, #0
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7ff ff66 	bl	8008be4 <ws2812b_write_byte>
        break;
 8008d18:	e04d      	b.n	8008db6 <ws2812b_write_basic_colour+0x16e>

    case WS2812B_COLOUR_MAGENTA:
        ws2812b_write_byte(handle, 0);
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f7ff ff61 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, red);
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7ff ff5c 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, blue);
 8008d2c:	7b7b      	ldrb	r3, [r7, #13]
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f7ff ff57 	bl	8008be4 <ws2812b_write_byte>
        break;
 8008d36:	e03e      	b.n	8008db6 <ws2812b_write_basic_colour+0x16e>

    case WS2812B_COLOUR_WHITE:
        ws2812b_write_byte(handle, green);
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7ff ff51 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, red);
 8008d42:	7bbb      	ldrb	r3, [r7, #14]
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7ff ff4c 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, blue);
 8008d4c:	7b7b      	ldrb	r3, [r7, #13]
 8008d4e:	4619      	mov	r1, r3
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff ff47 	bl	8008be4 <ws2812b_write_byte>
        break;
 8008d56:	e02e      	b.n	8008db6 <ws2812b_write_basic_colour+0x16e>

    case WS2812B_COLOUR_CYAN:
        ws2812b_write_byte(handle, green);
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7ff ff41 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, 0);
 8008d62:	2100      	movs	r1, #0
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff ff3d 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, blue);
 8008d6a:	7b7b      	ldrb	r3, [r7, #13]
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7ff ff38 	bl	8008be4 <ws2812b_write_byte>
        break;
 8008d74:	e01f      	b.n	8008db6 <ws2812b_write_basic_colour+0x16e>

    case WS2812B_COLOUR_PURPLE:
        ws2812b_write_byte(handle, 0);
 8008d76:	2100      	movs	r1, #0
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f7ff ff33 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, red >> 1);
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	085b      	lsrs	r3, r3, #1
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f7ff ff2c 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, blue >> 1);
 8008d8c:	7b7b      	ldrb	r3, [r7, #13]
 8008d8e:	085b      	lsrs	r3, r3, #1
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff ff25 	bl	8008be4 <ws2812b_write_byte>
        break;
 8008d9a:	e00c      	b.n	8008db6 <ws2812b_write_basic_colour+0x16e>

    case WS2812B_COLOUR_CLEAR:           /**< clear will reset or turn all led's off */
        ws2812b_write_byte(handle, 0);
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7ff ff20 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, 0);
 8008da4:	2100      	movs	r1, #0
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7ff ff1c 	bl	8008be4 <ws2812b_write_byte>
        ws2812b_write_byte(handle, 0);
 8008dac:	2100      	movs	r1, #0
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7ff ff18 	bl	8008be4 <ws2812b_write_byte>
        break;
 8008db4:	bf00      	nop

    }
    return 0;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <ws2812b_led_clear>:
 *          -   1 failed to clear
 *          -   2 handle is null
 * @note    none
 */
uint8_t ws2812b_led_clear(ws2812b_handle_t *handle, uint8_t ledCount)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	70fb      	strb	r3, [r7, #3]

    if (handle == NULL) /* check handle */
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <ws2812b_led_clear+0x16>
        return 2; /* return error */
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	e01e      	b.n	8008e14 <ws2812b_led_clear+0x54>
    if (handle->inited != 1) /* check handle initialization */
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	7e1b      	ldrb	r3, [r3, #24]
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d001      	beq.n	8008de2 <ws2812b_led_clear+0x22>
        return 3; /* return error */
 8008dde:	2303      	movs	r3, #3
 8008de0:	e018      	b.n	8008e14 <ws2812b_led_clear+0x54>

    handle->nLed_count = ledCount;
 8008de2:	78fb      	ldrb	r3, [r7, #3]
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	821a      	strh	r2, [r3, #16]

    unsigned char count; /*<< number of RGB on the array*/
    for (count = 0; count < handle->nLed_count; count++)
 8008dea:	2300      	movs	r3, #0
 8008dec:	73fb      	strb	r3, [r7, #15]
 8008dee:	e006      	b.n	8008dfe <ws2812b_led_clear+0x3e>
        ws2812b_write_basic_colour(handle, WS2812B_COLOUR_CLEAR);
 8008df0:	2108      	movs	r1, #8
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff ff28 	bl	8008c48 <ws2812b_write_basic_colour>
    for (count = 0; count < handle->nLed_count; count++)
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	8a1b      	ldrh	r3, [r3, #16]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d3f2      	bcc.n	8008df0 <ws2812b_led_clear+0x30>

    handle->delay_ms(WS2812b_RESET_TIMEOUT);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	2001      	movs	r0, #1
 8008e10:	4798      	blx	r3

    return 0;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <ws2812b_info>:
 *             - 0 success
 *             - 2 handle is NULL
 * @note       none
 */
uint8_t ws2812b_info(ws2812b_info_t *info)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]

    if (info == NULL) /* check handle */
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d101      	bne.n	8008e2e <ws2812b_info+0x12>
        return 2; /* return error */
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	e02d      	b.n	8008e8a <ws2812b_info+0x6e>

    memset(info, NULL, sizeof (ws2812b_info_t));                 /* initialize ws2812b info structure */
 8008e2e:	2250      	movs	r2, #80	; 0x50
 8008e30:	2100      	movs	r1, #0
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f94e 	bl	80090d4 <memset>
    strncpy(info->chip_Name, CHIP_NAME, 25);                     /* copy chip name */
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2219      	movs	r2, #25
 8008e3c:	4915      	ldr	r1, [pc, #84]	; (8008e94 <ws2812b_info+0x78>)
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 f950 	bl	80090e4 <strncpy>
    strncpy(info->manufacturer_name, MANUFACTURER_NAME, 20);     /* copy manufacturer name */
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	3319      	adds	r3, #25
 8008e48:	2214      	movs	r2, #20
 8008e4a:	4913      	ldr	r1, [pc, #76]	; (8008e98 <ws2812b_info+0x7c>)
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 f949 	bl	80090e4 <strncpy>
    strncpy(info->interface, "One Wire", 10);                    /* copy interface name */
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	3332      	adds	r3, #50	; 0x32
 8008e56:	220a      	movs	r2, #10
 8008e58:	4910      	ldr	r1, [pc, #64]	; (8008e9c <ws2812b_info+0x80>)
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 f942 	bl	80090e4 <strncpy>
    info->supply_voltage_min_v = SUPPLY_VOLTAGE_MIN;             /* set minimal supply voltage */
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a0f      	ldr	r2, [pc, #60]	; (8008ea0 <ws2812b_info+0x84>)
 8008e64:	63da      	str	r2, [r3, #60]	; 0x3c
    info->supply_Voltage_max_V = SUPPLY_VOLTAGE_MAX;             /* set maximum supply voltage */
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a0e      	ldr	r2, [pc, #56]	; (8008ea4 <ws2812b_info+0x88>)
 8008e6a:	641a      	str	r2, [r3, #64]	; 0x40
    info->current_max = MAX_CURRENT;                             /* set maximum current */
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	223c      	movs	r2, #60	; 0x3c
 8008e70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    info->temperature_max = TEMPERATURE_MAX;                     /* set minimal temperature */
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a0c      	ldr	r2, [pc, #48]	; (8008ea8 <ws2812b_info+0x8c>)
 8008e78:	649a      	str	r2, [r3, #72]	; 0x48
    info->temperature_min = TEMPERATURE_MIN;                     /* set maximum temperature */
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	22e7      	movs	r2, #231	; 0xe7
 8008e7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    info->driver_version = DRIVER_VERSION;                       /* set driver version */
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a09      	ldr	r2, [pc, #36]	; (8008eac <ws2812b_info+0x90>)
 8008e86:	64da      	str	r2, [r3, #76]	; 0x4c

    return 0; /*return success*/
 8008e88:	2300      	movs	r3, #0
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	08009bcc 	.word	0x08009bcc
 8008e98:	08009bd4 	.word	0x08009bd4
 8008e9c:	08009be0 	.word	0x08009be0
 8008ea0:	40533333 	.word	0x40533333
 8008ea4:	40a9999a 	.word	0x40a9999a
 8008ea8:	42a00000 	.word	0x42a00000
 8008eac:	44962000 	.word	0x44962000

08008eb0 <ws2812b_basic_initialize>:
 *            - 1 initialize failed
 * @note      none
 */

uint8_t ws2812b_basic_initialize(uint8_t u8NumberLed)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	71fb      	strb	r3, [r7, #7]

    volatile uint8_t res;

    /*link function*/
    DRIVER_WS2812b_LINK_INIT(&ws2812b_handle, ws2812b_handle_t);
 8008eba:	221c      	movs	r2, #28
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	481a      	ldr	r0, [pc, #104]	; (8008f28 <ws2812b_basic_initialize+0x78>)
 8008ec0:	f000 f908 	bl	80090d4 <memset>
    DRIVER_WS2812b_LINK_DELAY_MS(&ws2812b_handle, ws2812b_interface_delay_ms);
 8008ec4:	4b18      	ldr	r3, [pc, #96]	; (8008f28 <ws2812b_basic_initialize+0x78>)
 8008ec6:	4a19      	ldr	r2, [pc, #100]	; (8008f2c <ws2812b_basic_initialize+0x7c>)
 8008ec8:	609a      	str	r2, [r3, #8]
    DRIVER_WS2812b_LINK_DEBUG_PRINT(&ws2812b_handle, ws2812b_interface_debug_print);
 8008eca:	4b17      	ldr	r3, [pc, #92]	; (8008f28 <ws2812b_basic_initialize+0x78>)
 8008ecc:	4a18      	ldr	r2, [pc, #96]	; (8008f30 <ws2812b_basic_initialize+0x80>)
 8008ece:	60da      	str	r2, [r3, #12]
    DRIVER_WS2812b_LINK_LOGIC_HIGH(&ws2812b_handle, ws2812b_interface_write_one_instruction);
 8008ed0:	4b15      	ldr	r3, [pc, #84]	; (8008f28 <ws2812b_basic_initialize+0x78>)
 8008ed2:	4a18      	ldr	r2, [pc, #96]	; (8008f34 <ws2812b_basic_initialize+0x84>)
 8008ed4:	601a      	str	r2, [r3, #0]
    DRIVER_WS2812b_LINK_LOGIC_LOW(&ws2812b_handle, ws2812b_interface_write_zero_instruction);
 8008ed6:	4b14      	ldr	r3, [pc, #80]	; (8008f28 <ws2812b_basic_initialize+0x78>)
 8008ed8:	4a17      	ldr	r2, [pc, #92]	; (8008f38 <ws2812b_basic_initialize+0x88>)
 8008eda:	605a      	str	r2, [r3, #4]

    res = ws2812b_init(&ws2812b_handle);
 8008edc:	4812      	ldr	r0, [pc, #72]	; (8008f28 <ws2812b_basic_initialize+0x78>)
 8008ede:	f7ff fe45 	bl	8008b6c <ws2812b_init>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73fb      	strb	r3, [r7, #15]
    if (res)
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d004      	beq.n	8008ef8 <ws2812b_basic_initialize+0x48>
    {
#ifdef WS2812B_DEBUG_MODE
        ws2812b_interface_debug_print("ws2812b: initialize failed\n");
 8008eee:	4813      	ldr	r0, [pc, #76]	; (8008f3c <ws2812b_basic_initialize+0x8c>)
 8008ef0:	f000 f891 	bl	8009016 <ws2812b_interface_debug_print>
#endif
        return 1;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e012      	b.n	8008f1e <ws2812b_basic_initialize+0x6e>
    }

    res =  ws2812b_basic_clear(u8NumberLed);
 8008ef8:	79fb      	ldrb	r3, [r7, #7]
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 f854 	bl	8008fa8 <ws2812b_basic_clear>
 8008f00:	4603      	mov	r3, r0
 8008f02:	73fb      	strb	r3, [r7, #15]
    if (res)
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d004      	beq.n	8008f16 <ws2812b_basic_initialize+0x66>
    {
#ifdef WS2812B_DEBUG_MODE
        ws2812b_interface_debug_print("ws2812b: clear failed\n");
 8008f0c:	480c      	ldr	r0, [pc, #48]	; (8008f40 <ws2812b_basic_initialize+0x90>)
 8008f0e:	f000 f882 	bl	8009016 <ws2812b_interface_debug_print>
#endif
        return 1;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e003      	b.n	8008f1e <ws2812b_basic_initialize+0x6e>
    }

    /*wait 10 ms*/
    ws2812b_interface_delay_ms(10);
 8008f16:	200a      	movs	r0, #10
 8008f18:	f000 f874 	bl	8009004 <ws2812b_interface_delay_ms>

    return 0;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20001404 	.word	0x20001404
 8008f2c:	08009005 	.word	0x08009005
 8008f30:	08009017 	.word	0x08009017
 8008f34:	08008ff3 	.word	0x08008ff3
 8008f38:	08008fe1 	.word	0x08008fe1
 8008f3c:	08009bec 	.word	0x08009bec
 8008f40:	08009c08 	.word	0x08009c08

08008f44 <ws2812b_basic_write>:
 *            - 1 write failed
 * @note      none
 */

uint8_t ws2812b_basic_write(uint8_t led_count, ws2812b_basic_colour_t colour)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	460a      	mov	r2, r1
 8008f4e:	71fb      	strb	r3, [r7, #7]
 8008f50:	4613      	mov	r3, r2
 8008f52:	71bb      	strb	r3, [r7, #6]

    volatile uint8_t res, index;
    for (index = 0; index < led_count; index++)
 8008f54:	2300      	movs	r3, #0
 8008f56:	73bb      	strb	r3, [r7, #14]
 8008f58:	e00b      	b.n	8008f72 <ws2812b_basic_write+0x2e>
        res = ws2812b_write_basic_colour(&ws2812b_handle, colour);
 8008f5a:	79bb      	ldrb	r3, [r7, #6]
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	4810      	ldr	r0, [pc, #64]	; (8008fa0 <ws2812b_basic_write+0x5c>)
 8008f60:	f7ff fe72 	bl	8008c48 <ws2812b_write_basic_colour>
 8008f64:	4603      	mov	r3, r0
 8008f66:	73fb      	strb	r3, [r7, #15]
    for (index = 0; index < led_count; index++)
 8008f68:	7bbb      	ldrb	r3, [r7, #14]
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	73bb      	strb	r3, [r7, #14]
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	79fa      	ldrb	r2, [r7, #7]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d8ee      	bhi.n	8008f5a <ws2812b_basic_write+0x16>
    ws2812b_interface_delay_ms(WS2812b_RESET_TIMEOUT);
 8008f7c:	2001      	movs	r0, #1
 8008f7e:	f000 f841 	bl	8009004 <ws2812b_interface_delay_ms>
    if (res)
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d004      	beq.n	8008f94 <ws2812b_basic_write+0x50>
    {
#ifdef WS2812B_DEBUG_MODE
        ws2812b_interface_debug_print("ws2812b: basic write failed\n");
 8008f8a:	4806      	ldr	r0, [pc, #24]	; (8008fa4 <ws2812b_basic_write+0x60>)
 8008f8c:	f000 f843 	bl	8009016 <ws2812b_interface_debug_print>
#endif
        return 1;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e000      	b.n	8008f96 <ws2812b_basic_write+0x52>
    }
    return 0;
 8008f94:	2300      	movs	r3, #0

}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20001404 	.word	0x20001404
 8008fa4:	08009c20 	.word	0x08009c20

08008fa8 <ws2812b_basic_clear>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t ws2812b_basic_clear(uint8_t nLedcount)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	4603      	mov	r3, r0
 8008fb0:	71fb      	strb	r3, [r7, #7]
    volatile uint8_t res;

    res = ws2812b_led_clear(&ws2812b_handle, nLedcount);
 8008fb2:	79fb      	ldrb	r3, [r7, #7]
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4808      	ldr	r0, [pc, #32]	; (8008fd8 <ws2812b_basic_clear+0x30>)
 8008fb8:	f7ff ff02 	bl	8008dc0 <ws2812b_led_clear>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73fb      	strb	r3, [r7, #15]
    if (res)
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <ws2812b_basic_clear+0x26>
    {
#ifdef WS2812B_DEBUG_MODE
        ws2812b_interface_debug_print("ws2812b: RGB failed to clear\n");
 8008fc8:	4804      	ldr	r0, [pc, #16]	; (8008fdc <ws2812b_basic_clear+0x34>)
 8008fca:	f000 f824 	bl	8009016 <ws2812b_interface_debug_print>
#endif
    }
    return 0;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	20001404 	.word	0x20001404
 8008fdc:	08009c40 	.word	0x08009c40

08008fe0 <ws2812b_interface_write_zero_instruction>:
 * @return   none
 * @note     instruction to write 0 to the led: high time = 400 ns and low time = 850ns with a tolerance of +/- 150ns
 */

void ws2812b_interface_write_zero_instruction(ws2812b_handle_t *handle)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
    /*call your function here*/
    /*user code begin */

    /*user code end*/
}
 8008fe8:	bf00      	nop
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bc80      	pop	{r7}
 8008ff0:	4770      	bx	lr

08008ff2 <ws2812b_interface_write_one_instruction>:
 * @return   none
 * @note     instruction to write 1 to the led: high time = 800ns and low time = 450ns with a tolerance of +/- 150ns
 */

void ws2812b_interface_write_one_instruction(ws2812b_handle_t *handle)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b083      	sub	sp, #12
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
    /*call your function here*/
    /*user code begin */

    /*user code end*/
}
 8008ffa:	bf00      	nop
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bc80      	pop	{r7}
 8009002:	4770      	bx	lr

08009004 <ws2812b_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms in the waiting period in milliseconds
 * @note      none
 */
void ws2812b_interface_delay_ms(uint32_t ms)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
    /*call your delay function here*/
    /*user code begin */

    /*user code end*/
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	bc80      	pop	{r7}
 8009014:	4770      	bx	lr

08009016 <ws2812b_interface_debug_print>:
 * @param[in] fmt is the format data
 * @return    length of the send data
 * @note      none
 */
uint16_t ws2812b_interface_debug_print(char *fmt, ...)
{
 8009016:	b40f      	push	{r0, r1, r2, r3}
 8009018:	b580      	push	{r7, lr}
 800901a:	b0c2      	sub	sp, #264	; 0x108
 800901c:	af00      	add	r7, sp, #0
#ifdef WS2812B_DEBUG_MODE
    volatile char str[256];
    volatile uint8_t len;
    va_list args;

    memset((char *) str, 0, sizeof (char)*256);
 800901e:	f107 0308 	add.w	r3, r7, #8
 8009022:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009026:	2100      	movs	r1, #0
 8009028:	4618      	mov	r0, r3
 800902a:	f000 f853 	bl	80090d4 <memset>
    va_start(args, fmt);
 800902e:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8009032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800903a:	601a      	str	r2, [r3, #0]
    vsnprintf((char *) str, 256, (char const *) fmt, args);
 800903c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009040:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009044:	f107 0008 	add.w	r0, r7, #8
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800904e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009052:	f000 f885 	bl	8009160 <vsniprintf>
    va_end(args);

    len = strlen((char *) str);
 8009056:	f107 0308 	add.w	r3, r7, #8
 800905a:	4618      	mov	r0, r3
 800905c:	f7f7 f876 	bl	800014c <strlen>
 8009060:	4603      	mov	r3, r0
 8009062:	b2da      	uxtb	r2, r3
 8009064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009068:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800906c:	701a      	strb	r2, [r3, #0]
//    EUSART1_Write_Text((const char *) str, len);
    // (void)printf((uint8_t *)str, len);

    /*user code end*/
#endif
}
 800906e:	bf00      	nop
 8009070:	4618      	mov	r0, r3
 8009072:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009076:	46bd      	mov	sp, r7
 8009078:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800907c:	b004      	add	sp, #16
 800907e:	4770      	bx	lr

08009080 <__errno>:
 8009080:	4b01      	ldr	r3, [pc, #4]	; (8009088 <__errno+0x8>)
 8009082:	6818      	ldr	r0, [r3, #0]
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	20000184 	.word	0x20000184

0800908c <__libc_init_array>:
 800908c:	b570      	push	{r4, r5, r6, lr}
 800908e:	2600      	movs	r6, #0
 8009090:	4d0c      	ldr	r5, [pc, #48]	; (80090c4 <__libc_init_array+0x38>)
 8009092:	4c0d      	ldr	r4, [pc, #52]	; (80090c8 <__libc_init_array+0x3c>)
 8009094:	1b64      	subs	r4, r4, r5
 8009096:	10a4      	asrs	r4, r4, #2
 8009098:	42a6      	cmp	r6, r4
 800909a:	d109      	bne.n	80090b0 <__libc_init_array+0x24>
 800909c:	f000 fcc8 	bl	8009a30 <_init>
 80090a0:	2600      	movs	r6, #0
 80090a2:	4d0a      	ldr	r5, [pc, #40]	; (80090cc <__libc_init_array+0x40>)
 80090a4:	4c0a      	ldr	r4, [pc, #40]	; (80090d0 <__libc_init_array+0x44>)
 80090a6:	1b64      	subs	r4, r4, r5
 80090a8:	10a4      	asrs	r4, r4, #2
 80090aa:	42a6      	cmp	r6, r4
 80090ac:	d105      	bne.n	80090ba <__libc_init_array+0x2e>
 80090ae:	bd70      	pop	{r4, r5, r6, pc}
 80090b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80090b4:	4798      	blx	r3
 80090b6:	3601      	adds	r6, #1
 80090b8:	e7ee      	b.n	8009098 <__libc_init_array+0xc>
 80090ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80090be:	4798      	blx	r3
 80090c0:	3601      	adds	r6, #1
 80090c2:	e7f2      	b.n	80090aa <__libc_init_array+0x1e>
 80090c4:	08009ccc 	.word	0x08009ccc
 80090c8:	08009ccc 	.word	0x08009ccc
 80090cc:	08009ccc 	.word	0x08009ccc
 80090d0:	08009cd0 	.word	0x08009cd0

080090d4 <memset>:
 80090d4:	4603      	mov	r3, r0
 80090d6:	4402      	add	r2, r0
 80090d8:	4293      	cmp	r3, r2
 80090da:	d100      	bne.n	80090de <memset+0xa>
 80090dc:	4770      	bx	lr
 80090de:	f803 1b01 	strb.w	r1, [r3], #1
 80090e2:	e7f9      	b.n	80090d8 <memset+0x4>

080090e4 <strncpy>:
 80090e4:	4603      	mov	r3, r0
 80090e6:	b510      	push	{r4, lr}
 80090e8:	3901      	subs	r1, #1
 80090ea:	b132      	cbz	r2, 80090fa <strncpy+0x16>
 80090ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80090f0:	3a01      	subs	r2, #1
 80090f2:	f803 4b01 	strb.w	r4, [r3], #1
 80090f6:	2c00      	cmp	r4, #0
 80090f8:	d1f7      	bne.n	80090ea <strncpy+0x6>
 80090fa:	2100      	movs	r1, #0
 80090fc:	441a      	add	r2, r3
 80090fe:	4293      	cmp	r3, r2
 8009100:	d100      	bne.n	8009104 <strncpy+0x20>
 8009102:	bd10      	pop	{r4, pc}
 8009104:	f803 1b01 	strb.w	r1, [r3], #1
 8009108:	e7f9      	b.n	80090fe <strncpy+0x1a>

0800910a <_vsniprintf_r>:
 800910a:	b530      	push	{r4, r5, lr}
 800910c:	4614      	mov	r4, r2
 800910e:	2c00      	cmp	r4, #0
 8009110:	4605      	mov	r5, r0
 8009112:	461a      	mov	r2, r3
 8009114:	b09b      	sub	sp, #108	; 0x6c
 8009116:	da05      	bge.n	8009124 <_vsniprintf_r+0x1a>
 8009118:	238b      	movs	r3, #139	; 0x8b
 800911a:	6003      	str	r3, [r0, #0]
 800911c:	f04f 30ff 	mov.w	r0, #4294967295
 8009120:	b01b      	add	sp, #108	; 0x6c
 8009122:	bd30      	pop	{r4, r5, pc}
 8009124:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009128:	f8ad 300c 	strh.w	r3, [sp, #12]
 800912c:	bf0c      	ite	eq
 800912e:	4623      	moveq	r3, r4
 8009130:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009134:	9302      	str	r3, [sp, #8]
 8009136:	9305      	str	r3, [sp, #20]
 8009138:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800913c:	9100      	str	r1, [sp, #0]
 800913e:	9104      	str	r1, [sp, #16]
 8009140:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009144:	4669      	mov	r1, sp
 8009146:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009148:	f000 f874 	bl	8009234 <_svfiprintf_r>
 800914c:	1c43      	adds	r3, r0, #1
 800914e:	bfbc      	itt	lt
 8009150:	238b      	movlt	r3, #139	; 0x8b
 8009152:	602b      	strlt	r3, [r5, #0]
 8009154:	2c00      	cmp	r4, #0
 8009156:	d0e3      	beq.n	8009120 <_vsniprintf_r+0x16>
 8009158:	2200      	movs	r2, #0
 800915a:	9b00      	ldr	r3, [sp, #0]
 800915c:	701a      	strb	r2, [r3, #0]
 800915e:	e7df      	b.n	8009120 <_vsniprintf_r+0x16>

08009160 <vsniprintf>:
 8009160:	b507      	push	{r0, r1, r2, lr}
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	4613      	mov	r3, r2
 8009166:	460a      	mov	r2, r1
 8009168:	4601      	mov	r1, r0
 800916a:	4803      	ldr	r0, [pc, #12]	; (8009178 <vsniprintf+0x18>)
 800916c:	6800      	ldr	r0, [r0, #0]
 800916e:	f7ff ffcc 	bl	800910a <_vsniprintf_r>
 8009172:	b003      	add	sp, #12
 8009174:	f85d fb04 	ldr.w	pc, [sp], #4
 8009178:	20000184 	.word	0x20000184

0800917c <__ssputs_r>:
 800917c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009180:	688e      	ldr	r6, [r1, #8]
 8009182:	4682      	mov	sl, r0
 8009184:	429e      	cmp	r6, r3
 8009186:	460c      	mov	r4, r1
 8009188:	4690      	mov	r8, r2
 800918a:	461f      	mov	r7, r3
 800918c:	d838      	bhi.n	8009200 <__ssputs_r+0x84>
 800918e:	898a      	ldrh	r2, [r1, #12]
 8009190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009194:	d032      	beq.n	80091fc <__ssputs_r+0x80>
 8009196:	6825      	ldr	r5, [r4, #0]
 8009198:	6909      	ldr	r1, [r1, #16]
 800919a:	3301      	adds	r3, #1
 800919c:	eba5 0901 	sub.w	r9, r5, r1
 80091a0:	6965      	ldr	r5, [r4, #20]
 80091a2:	444b      	add	r3, r9
 80091a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091ac:	106d      	asrs	r5, r5, #1
 80091ae:	429d      	cmp	r5, r3
 80091b0:	bf38      	it	cc
 80091b2:	461d      	movcc	r5, r3
 80091b4:	0553      	lsls	r3, r2, #21
 80091b6:	d531      	bpl.n	800921c <__ssputs_r+0xa0>
 80091b8:	4629      	mov	r1, r5
 80091ba:	f000 fb6f 	bl	800989c <_malloc_r>
 80091be:	4606      	mov	r6, r0
 80091c0:	b950      	cbnz	r0, 80091d8 <__ssputs_r+0x5c>
 80091c2:	230c      	movs	r3, #12
 80091c4:	f04f 30ff 	mov.w	r0, #4294967295
 80091c8:	f8ca 3000 	str.w	r3, [sl]
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091d2:	81a3      	strh	r3, [r4, #12]
 80091d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d8:	464a      	mov	r2, r9
 80091da:	6921      	ldr	r1, [r4, #16]
 80091dc:	f000 face 	bl	800977c <memcpy>
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ea:	81a3      	strh	r3, [r4, #12]
 80091ec:	6126      	str	r6, [r4, #16]
 80091ee:	444e      	add	r6, r9
 80091f0:	6026      	str	r6, [r4, #0]
 80091f2:	463e      	mov	r6, r7
 80091f4:	6165      	str	r5, [r4, #20]
 80091f6:	eba5 0509 	sub.w	r5, r5, r9
 80091fa:	60a5      	str	r5, [r4, #8]
 80091fc:	42be      	cmp	r6, r7
 80091fe:	d900      	bls.n	8009202 <__ssputs_r+0x86>
 8009200:	463e      	mov	r6, r7
 8009202:	4632      	mov	r2, r6
 8009204:	4641      	mov	r1, r8
 8009206:	6820      	ldr	r0, [r4, #0]
 8009208:	f000 fac6 	bl	8009798 <memmove>
 800920c:	68a3      	ldr	r3, [r4, #8]
 800920e:	2000      	movs	r0, #0
 8009210:	1b9b      	subs	r3, r3, r6
 8009212:	60a3      	str	r3, [r4, #8]
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	4433      	add	r3, r6
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	e7db      	b.n	80091d4 <__ssputs_r+0x58>
 800921c:	462a      	mov	r2, r5
 800921e:	f000 fbb1 	bl	8009984 <_realloc_r>
 8009222:	4606      	mov	r6, r0
 8009224:	2800      	cmp	r0, #0
 8009226:	d1e1      	bne.n	80091ec <__ssputs_r+0x70>
 8009228:	4650      	mov	r0, sl
 800922a:	6921      	ldr	r1, [r4, #16]
 800922c:	f000 face 	bl	80097cc <_free_r>
 8009230:	e7c7      	b.n	80091c2 <__ssputs_r+0x46>
	...

08009234 <_svfiprintf_r>:
 8009234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009238:	4698      	mov	r8, r3
 800923a:	898b      	ldrh	r3, [r1, #12]
 800923c:	4607      	mov	r7, r0
 800923e:	061b      	lsls	r3, r3, #24
 8009240:	460d      	mov	r5, r1
 8009242:	4614      	mov	r4, r2
 8009244:	b09d      	sub	sp, #116	; 0x74
 8009246:	d50e      	bpl.n	8009266 <_svfiprintf_r+0x32>
 8009248:	690b      	ldr	r3, [r1, #16]
 800924a:	b963      	cbnz	r3, 8009266 <_svfiprintf_r+0x32>
 800924c:	2140      	movs	r1, #64	; 0x40
 800924e:	f000 fb25 	bl	800989c <_malloc_r>
 8009252:	6028      	str	r0, [r5, #0]
 8009254:	6128      	str	r0, [r5, #16]
 8009256:	b920      	cbnz	r0, 8009262 <_svfiprintf_r+0x2e>
 8009258:	230c      	movs	r3, #12
 800925a:	603b      	str	r3, [r7, #0]
 800925c:	f04f 30ff 	mov.w	r0, #4294967295
 8009260:	e0d1      	b.n	8009406 <_svfiprintf_r+0x1d2>
 8009262:	2340      	movs	r3, #64	; 0x40
 8009264:	616b      	str	r3, [r5, #20]
 8009266:	2300      	movs	r3, #0
 8009268:	9309      	str	r3, [sp, #36]	; 0x24
 800926a:	2320      	movs	r3, #32
 800926c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009270:	2330      	movs	r3, #48	; 0x30
 8009272:	f04f 0901 	mov.w	r9, #1
 8009276:	f8cd 800c 	str.w	r8, [sp, #12]
 800927a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009420 <_svfiprintf_r+0x1ec>
 800927e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009282:	4623      	mov	r3, r4
 8009284:	469a      	mov	sl, r3
 8009286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800928a:	b10a      	cbz	r2, 8009290 <_svfiprintf_r+0x5c>
 800928c:	2a25      	cmp	r2, #37	; 0x25
 800928e:	d1f9      	bne.n	8009284 <_svfiprintf_r+0x50>
 8009290:	ebba 0b04 	subs.w	fp, sl, r4
 8009294:	d00b      	beq.n	80092ae <_svfiprintf_r+0x7a>
 8009296:	465b      	mov	r3, fp
 8009298:	4622      	mov	r2, r4
 800929a:	4629      	mov	r1, r5
 800929c:	4638      	mov	r0, r7
 800929e:	f7ff ff6d 	bl	800917c <__ssputs_r>
 80092a2:	3001      	adds	r0, #1
 80092a4:	f000 80aa 	beq.w	80093fc <_svfiprintf_r+0x1c8>
 80092a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092aa:	445a      	add	r2, fp
 80092ac:	9209      	str	r2, [sp, #36]	; 0x24
 80092ae:	f89a 3000 	ldrb.w	r3, [sl]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f000 80a2 	beq.w	80093fc <_svfiprintf_r+0x1c8>
 80092b8:	2300      	movs	r3, #0
 80092ba:	f04f 32ff 	mov.w	r2, #4294967295
 80092be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092c2:	f10a 0a01 	add.w	sl, sl, #1
 80092c6:	9304      	str	r3, [sp, #16]
 80092c8:	9307      	str	r3, [sp, #28]
 80092ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092ce:	931a      	str	r3, [sp, #104]	; 0x68
 80092d0:	4654      	mov	r4, sl
 80092d2:	2205      	movs	r2, #5
 80092d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d8:	4851      	ldr	r0, [pc, #324]	; (8009420 <_svfiprintf_r+0x1ec>)
 80092da:	f000 fa41 	bl	8009760 <memchr>
 80092de:	9a04      	ldr	r2, [sp, #16]
 80092e0:	b9d8      	cbnz	r0, 800931a <_svfiprintf_r+0xe6>
 80092e2:	06d0      	lsls	r0, r2, #27
 80092e4:	bf44      	itt	mi
 80092e6:	2320      	movmi	r3, #32
 80092e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ec:	0711      	lsls	r1, r2, #28
 80092ee:	bf44      	itt	mi
 80092f0:	232b      	movmi	r3, #43	; 0x2b
 80092f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092f6:	f89a 3000 	ldrb.w	r3, [sl]
 80092fa:	2b2a      	cmp	r3, #42	; 0x2a
 80092fc:	d015      	beq.n	800932a <_svfiprintf_r+0xf6>
 80092fe:	4654      	mov	r4, sl
 8009300:	2000      	movs	r0, #0
 8009302:	f04f 0c0a 	mov.w	ip, #10
 8009306:	9a07      	ldr	r2, [sp, #28]
 8009308:	4621      	mov	r1, r4
 800930a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800930e:	3b30      	subs	r3, #48	; 0x30
 8009310:	2b09      	cmp	r3, #9
 8009312:	d94e      	bls.n	80093b2 <_svfiprintf_r+0x17e>
 8009314:	b1b0      	cbz	r0, 8009344 <_svfiprintf_r+0x110>
 8009316:	9207      	str	r2, [sp, #28]
 8009318:	e014      	b.n	8009344 <_svfiprintf_r+0x110>
 800931a:	eba0 0308 	sub.w	r3, r0, r8
 800931e:	fa09 f303 	lsl.w	r3, r9, r3
 8009322:	4313      	orrs	r3, r2
 8009324:	46a2      	mov	sl, r4
 8009326:	9304      	str	r3, [sp, #16]
 8009328:	e7d2      	b.n	80092d0 <_svfiprintf_r+0x9c>
 800932a:	9b03      	ldr	r3, [sp, #12]
 800932c:	1d19      	adds	r1, r3, #4
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	9103      	str	r1, [sp, #12]
 8009332:	2b00      	cmp	r3, #0
 8009334:	bfbb      	ittet	lt
 8009336:	425b      	neglt	r3, r3
 8009338:	f042 0202 	orrlt.w	r2, r2, #2
 800933c:	9307      	strge	r3, [sp, #28]
 800933e:	9307      	strlt	r3, [sp, #28]
 8009340:	bfb8      	it	lt
 8009342:	9204      	strlt	r2, [sp, #16]
 8009344:	7823      	ldrb	r3, [r4, #0]
 8009346:	2b2e      	cmp	r3, #46	; 0x2e
 8009348:	d10c      	bne.n	8009364 <_svfiprintf_r+0x130>
 800934a:	7863      	ldrb	r3, [r4, #1]
 800934c:	2b2a      	cmp	r3, #42	; 0x2a
 800934e:	d135      	bne.n	80093bc <_svfiprintf_r+0x188>
 8009350:	9b03      	ldr	r3, [sp, #12]
 8009352:	3402      	adds	r4, #2
 8009354:	1d1a      	adds	r2, r3, #4
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	9203      	str	r2, [sp, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	bfb8      	it	lt
 800935e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009362:	9305      	str	r3, [sp, #20]
 8009364:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009424 <_svfiprintf_r+0x1f0>
 8009368:	2203      	movs	r2, #3
 800936a:	4650      	mov	r0, sl
 800936c:	7821      	ldrb	r1, [r4, #0]
 800936e:	f000 f9f7 	bl	8009760 <memchr>
 8009372:	b140      	cbz	r0, 8009386 <_svfiprintf_r+0x152>
 8009374:	2340      	movs	r3, #64	; 0x40
 8009376:	eba0 000a 	sub.w	r0, r0, sl
 800937a:	fa03 f000 	lsl.w	r0, r3, r0
 800937e:	9b04      	ldr	r3, [sp, #16]
 8009380:	3401      	adds	r4, #1
 8009382:	4303      	orrs	r3, r0
 8009384:	9304      	str	r3, [sp, #16]
 8009386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938a:	2206      	movs	r2, #6
 800938c:	4826      	ldr	r0, [pc, #152]	; (8009428 <_svfiprintf_r+0x1f4>)
 800938e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009392:	f000 f9e5 	bl	8009760 <memchr>
 8009396:	2800      	cmp	r0, #0
 8009398:	d038      	beq.n	800940c <_svfiprintf_r+0x1d8>
 800939a:	4b24      	ldr	r3, [pc, #144]	; (800942c <_svfiprintf_r+0x1f8>)
 800939c:	bb1b      	cbnz	r3, 80093e6 <_svfiprintf_r+0x1b2>
 800939e:	9b03      	ldr	r3, [sp, #12]
 80093a0:	3307      	adds	r3, #7
 80093a2:	f023 0307 	bic.w	r3, r3, #7
 80093a6:	3308      	adds	r3, #8
 80093a8:	9303      	str	r3, [sp, #12]
 80093aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ac:	4433      	add	r3, r6
 80093ae:	9309      	str	r3, [sp, #36]	; 0x24
 80093b0:	e767      	b.n	8009282 <_svfiprintf_r+0x4e>
 80093b2:	460c      	mov	r4, r1
 80093b4:	2001      	movs	r0, #1
 80093b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80093ba:	e7a5      	b.n	8009308 <_svfiprintf_r+0xd4>
 80093bc:	2300      	movs	r3, #0
 80093be:	f04f 0c0a 	mov.w	ip, #10
 80093c2:	4619      	mov	r1, r3
 80093c4:	3401      	adds	r4, #1
 80093c6:	9305      	str	r3, [sp, #20]
 80093c8:	4620      	mov	r0, r4
 80093ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093ce:	3a30      	subs	r2, #48	; 0x30
 80093d0:	2a09      	cmp	r2, #9
 80093d2:	d903      	bls.n	80093dc <_svfiprintf_r+0x1a8>
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d0c5      	beq.n	8009364 <_svfiprintf_r+0x130>
 80093d8:	9105      	str	r1, [sp, #20]
 80093da:	e7c3      	b.n	8009364 <_svfiprintf_r+0x130>
 80093dc:	4604      	mov	r4, r0
 80093de:	2301      	movs	r3, #1
 80093e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093e4:	e7f0      	b.n	80093c8 <_svfiprintf_r+0x194>
 80093e6:	ab03      	add	r3, sp, #12
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	462a      	mov	r2, r5
 80093ec:	4638      	mov	r0, r7
 80093ee:	4b10      	ldr	r3, [pc, #64]	; (8009430 <_svfiprintf_r+0x1fc>)
 80093f0:	a904      	add	r1, sp, #16
 80093f2:	f3af 8000 	nop.w
 80093f6:	1c42      	adds	r2, r0, #1
 80093f8:	4606      	mov	r6, r0
 80093fa:	d1d6      	bne.n	80093aa <_svfiprintf_r+0x176>
 80093fc:	89ab      	ldrh	r3, [r5, #12]
 80093fe:	065b      	lsls	r3, r3, #25
 8009400:	f53f af2c 	bmi.w	800925c <_svfiprintf_r+0x28>
 8009404:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009406:	b01d      	add	sp, #116	; 0x74
 8009408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940c:	ab03      	add	r3, sp, #12
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	462a      	mov	r2, r5
 8009412:	4638      	mov	r0, r7
 8009414:	4b06      	ldr	r3, [pc, #24]	; (8009430 <_svfiprintf_r+0x1fc>)
 8009416:	a904      	add	r1, sp, #16
 8009418:	f000 f87c 	bl	8009514 <_printf_i>
 800941c:	e7eb      	b.n	80093f6 <_svfiprintf_r+0x1c2>
 800941e:	bf00      	nop
 8009420:	08009c98 	.word	0x08009c98
 8009424:	08009c9e 	.word	0x08009c9e
 8009428:	08009ca2 	.word	0x08009ca2
 800942c:	00000000 	.word	0x00000000
 8009430:	0800917d 	.word	0x0800917d

08009434 <_printf_common>:
 8009434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009438:	4616      	mov	r6, r2
 800943a:	4699      	mov	r9, r3
 800943c:	688a      	ldr	r2, [r1, #8]
 800943e:	690b      	ldr	r3, [r1, #16]
 8009440:	4607      	mov	r7, r0
 8009442:	4293      	cmp	r3, r2
 8009444:	bfb8      	it	lt
 8009446:	4613      	movlt	r3, r2
 8009448:	6033      	str	r3, [r6, #0]
 800944a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800944e:	460c      	mov	r4, r1
 8009450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009454:	b10a      	cbz	r2, 800945a <_printf_common+0x26>
 8009456:	3301      	adds	r3, #1
 8009458:	6033      	str	r3, [r6, #0]
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	0699      	lsls	r1, r3, #26
 800945e:	bf42      	ittt	mi
 8009460:	6833      	ldrmi	r3, [r6, #0]
 8009462:	3302      	addmi	r3, #2
 8009464:	6033      	strmi	r3, [r6, #0]
 8009466:	6825      	ldr	r5, [r4, #0]
 8009468:	f015 0506 	ands.w	r5, r5, #6
 800946c:	d106      	bne.n	800947c <_printf_common+0x48>
 800946e:	f104 0a19 	add.w	sl, r4, #25
 8009472:	68e3      	ldr	r3, [r4, #12]
 8009474:	6832      	ldr	r2, [r6, #0]
 8009476:	1a9b      	subs	r3, r3, r2
 8009478:	42ab      	cmp	r3, r5
 800947a:	dc28      	bgt.n	80094ce <_printf_common+0x9a>
 800947c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009480:	1e13      	subs	r3, r2, #0
 8009482:	6822      	ldr	r2, [r4, #0]
 8009484:	bf18      	it	ne
 8009486:	2301      	movne	r3, #1
 8009488:	0692      	lsls	r2, r2, #26
 800948a:	d42d      	bmi.n	80094e8 <_printf_common+0xb4>
 800948c:	4649      	mov	r1, r9
 800948e:	4638      	mov	r0, r7
 8009490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009494:	47c0      	blx	r8
 8009496:	3001      	adds	r0, #1
 8009498:	d020      	beq.n	80094dc <_printf_common+0xa8>
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	68e5      	ldr	r5, [r4, #12]
 800949e:	f003 0306 	and.w	r3, r3, #6
 80094a2:	2b04      	cmp	r3, #4
 80094a4:	bf18      	it	ne
 80094a6:	2500      	movne	r5, #0
 80094a8:	6832      	ldr	r2, [r6, #0]
 80094aa:	f04f 0600 	mov.w	r6, #0
 80094ae:	68a3      	ldr	r3, [r4, #8]
 80094b0:	bf08      	it	eq
 80094b2:	1aad      	subeq	r5, r5, r2
 80094b4:	6922      	ldr	r2, [r4, #16]
 80094b6:	bf08      	it	eq
 80094b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094bc:	4293      	cmp	r3, r2
 80094be:	bfc4      	itt	gt
 80094c0:	1a9b      	subgt	r3, r3, r2
 80094c2:	18ed      	addgt	r5, r5, r3
 80094c4:	341a      	adds	r4, #26
 80094c6:	42b5      	cmp	r5, r6
 80094c8:	d11a      	bne.n	8009500 <_printf_common+0xcc>
 80094ca:	2000      	movs	r0, #0
 80094cc:	e008      	b.n	80094e0 <_printf_common+0xac>
 80094ce:	2301      	movs	r3, #1
 80094d0:	4652      	mov	r2, sl
 80094d2:	4649      	mov	r1, r9
 80094d4:	4638      	mov	r0, r7
 80094d6:	47c0      	blx	r8
 80094d8:	3001      	adds	r0, #1
 80094da:	d103      	bne.n	80094e4 <_printf_common+0xb0>
 80094dc:	f04f 30ff 	mov.w	r0, #4294967295
 80094e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e4:	3501      	adds	r5, #1
 80094e6:	e7c4      	b.n	8009472 <_printf_common+0x3e>
 80094e8:	2030      	movs	r0, #48	; 0x30
 80094ea:	18e1      	adds	r1, r4, r3
 80094ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094f0:	1c5a      	adds	r2, r3, #1
 80094f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094f6:	4422      	add	r2, r4
 80094f8:	3302      	adds	r3, #2
 80094fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094fe:	e7c5      	b.n	800948c <_printf_common+0x58>
 8009500:	2301      	movs	r3, #1
 8009502:	4622      	mov	r2, r4
 8009504:	4649      	mov	r1, r9
 8009506:	4638      	mov	r0, r7
 8009508:	47c0      	blx	r8
 800950a:	3001      	adds	r0, #1
 800950c:	d0e6      	beq.n	80094dc <_printf_common+0xa8>
 800950e:	3601      	adds	r6, #1
 8009510:	e7d9      	b.n	80094c6 <_printf_common+0x92>
	...

08009514 <_printf_i>:
 8009514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009518:	7e0f      	ldrb	r7, [r1, #24]
 800951a:	4691      	mov	r9, r2
 800951c:	2f78      	cmp	r7, #120	; 0x78
 800951e:	4680      	mov	r8, r0
 8009520:	460c      	mov	r4, r1
 8009522:	469a      	mov	sl, r3
 8009524:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009526:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800952a:	d807      	bhi.n	800953c <_printf_i+0x28>
 800952c:	2f62      	cmp	r7, #98	; 0x62
 800952e:	d80a      	bhi.n	8009546 <_printf_i+0x32>
 8009530:	2f00      	cmp	r7, #0
 8009532:	f000 80d9 	beq.w	80096e8 <_printf_i+0x1d4>
 8009536:	2f58      	cmp	r7, #88	; 0x58
 8009538:	f000 80a4 	beq.w	8009684 <_printf_i+0x170>
 800953c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009544:	e03a      	b.n	80095bc <_printf_i+0xa8>
 8009546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800954a:	2b15      	cmp	r3, #21
 800954c:	d8f6      	bhi.n	800953c <_printf_i+0x28>
 800954e:	a101      	add	r1, pc, #4	; (adr r1, 8009554 <_printf_i+0x40>)
 8009550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009554:	080095ad 	.word	0x080095ad
 8009558:	080095c1 	.word	0x080095c1
 800955c:	0800953d 	.word	0x0800953d
 8009560:	0800953d 	.word	0x0800953d
 8009564:	0800953d 	.word	0x0800953d
 8009568:	0800953d 	.word	0x0800953d
 800956c:	080095c1 	.word	0x080095c1
 8009570:	0800953d 	.word	0x0800953d
 8009574:	0800953d 	.word	0x0800953d
 8009578:	0800953d 	.word	0x0800953d
 800957c:	0800953d 	.word	0x0800953d
 8009580:	080096cf 	.word	0x080096cf
 8009584:	080095f1 	.word	0x080095f1
 8009588:	080096b1 	.word	0x080096b1
 800958c:	0800953d 	.word	0x0800953d
 8009590:	0800953d 	.word	0x0800953d
 8009594:	080096f1 	.word	0x080096f1
 8009598:	0800953d 	.word	0x0800953d
 800959c:	080095f1 	.word	0x080095f1
 80095a0:	0800953d 	.word	0x0800953d
 80095a4:	0800953d 	.word	0x0800953d
 80095a8:	080096b9 	.word	0x080096b9
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	1d1a      	adds	r2, r3, #4
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	602a      	str	r2, [r5, #0]
 80095b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095bc:	2301      	movs	r3, #1
 80095be:	e0a4      	b.n	800970a <_printf_i+0x1f6>
 80095c0:	6820      	ldr	r0, [r4, #0]
 80095c2:	6829      	ldr	r1, [r5, #0]
 80095c4:	0606      	lsls	r6, r0, #24
 80095c6:	f101 0304 	add.w	r3, r1, #4
 80095ca:	d50a      	bpl.n	80095e2 <_printf_i+0xce>
 80095cc:	680e      	ldr	r6, [r1, #0]
 80095ce:	602b      	str	r3, [r5, #0]
 80095d0:	2e00      	cmp	r6, #0
 80095d2:	da03      	bge.n	80095dc <_printf_i+0xc8>
 80095d4:	232d      	movs	r3, #45	; 0x2d
 80095d6:	4276      	negs	r6, r6
 80095d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095dc:	230a      	movs	r3, #10
 80095de:	485e      	ldr	r0, [pc, #376]	; (8009758 <_printf_i+0x244>)
 80095e0:	e019      	b.n	8009616 <_printf_i+0x102>
 80095e2:	680e      	ldr	r6, [r1, #0]
 80095e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095e8:	602b      	str	r3, [r5, #0]
 80095ea:	bf18      	it	ne
 80095ec:	b236      	sxthne	r6, r6
 80095ee:	e7ef      	b.n	80095d0 <_printf_i+0xbc>
 80095f0:	682b      	ldr	r3, [r5, #0]
 80095f2:	6820      	ldr	r0, [r4, #0]
 80095f4:	1d19      	adds	r1, r3, #4
 80095f6:	6029      	str	r1, [r5, #0]
 80095f8:	0601      	lsls	r1, r0, #24
 80095fa:	d501      	bpl.n	8009600 <_printf_i+0xec>
 80095fc:	681e      	ldr	r6, [r3, #0]
 80095fe:	e002      	b.n	8009606 <_printf_i+0xf2>
 8009600:	0646      	lsls	r6, r0, #25
 8009602:	d5fb      	bpl.n	80095fc <_printf_i+0xe8>
 8009604:	881e      	ldrh	r6, [r3, #0]
 8009606:	2f6f      	cmp	r7, #111	; 0x6f
 8009608:	bf0c      	ite	eq
 800960a:	2308      	moveq	r3, #8
 800960c:	230a      	movne	r3, #10
 800960e:	4852      	ldr	r0, [pc, #328]	; (8009758 <_printf_i+0x244>)
 8009610:	2100      	movs	r1, #0
 8009612:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009616:	6865      	ldr	r5, [r4, #4]
 8009618:	2d00      	cmp	r5, #0
 800961a:	bfa8      	it	ge
 800961c:	6821      	ldrge	r1, [r4, #0]
 800961e:	60a5      	str	r5, [r4, #8]
 8009620:	bfa4      	itt	ge
 8009622:	f021 0104 	bicge.w	r1, r1, #4
 8009626:	6021      	strge	r1, [r4, #0]
 8009628:	b90e      	cbnz	r6, 800962e <_printf_i+0x11a>
 800962a:	2d00      	cmp	r5, #0
 800962c:	d04d      	beq.n	80096ca <_printf_i+0x1b6>
 800962e:	4615      	mov	r5, r2
 8009630:	fbb6 f1f3 	udiv	r1, r6, r3
 8009634:	fb03 6711 	mls	r7, r3, r1, r6
 8009638:	5dc7      	ldrb	r7, [r0, r7]
 800963a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800963e:	4637      	mov	r7, r6
 8009640:	42bb      	cmp	r3, r7
 8009642:	460e      	mov	r6, r1
 8009644:	d9f4      	bls.n	8009630 <_printf_i+0x11c>
 8009646:	2b08      	cmp	r3, #8
 8009648:	d10b      	bne.n	8009662 <_printf_i+0x14e>
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	07de      	lsls	r6, r3, #31
 800964e:	d508      	bpl.n	8009662 <_printf_i+0x14e>
 8009650:	6923      	ldr	r3, [r4, #16]
 8009652:	6861      	ldr	r1, [r4, #4]
 8009654:	4299      	cmp	r1, r3
 8009656:	bfde      	ittt	le
 8009658:	2330      	movle	r3, #48	; 0x30
 800965a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800965e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009662:	1b52      	subs	r2, r2, r5
 8009664:	6122      	str	r2, [r4, #16]
 8009666:	464b      	mov	r3, r9
 8009668:	4621      	mov	r1, r4
 800966a:	4640      	mov	r0, r8
 800966c:	f8cd a000 	str.w	sl, [sp]
 8009670:	aa03      	add	r2, sp, #12
 8009672:	f7ff fedf 	bl	8009434 <_printf_common>
 8009676:	3001      	adds	r0, #1
 8009678:	d14c      	bne.n	8009714 <_printf_i+0x200>
 800967a:	f04f 30ff 	mov.w	r0, #4294967295
 800967e:	b004      	add	sp, #16
 8009680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009684:	4834      	ldr	r0, [pc, #208]	; (8009758 <_printf_i+0x244>)
 8009686:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800968a:	6829      	ldr	r1, [r5, #0]
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009692:	6029      	str	r1, [r5, #0]
 8009694:	061d      	lsls	r5, r3, #24
 8009696:	d514      	bpl.n	80096c2 <_printf_i+0x1ae>
 8009698:	07df      	lsls	r7, r3, #31
 800969a:	bf44      	itt	mi
 800969c:	f043 0320 	orrmi.w	r3, r3, #32
 80096a0:	6023      	strmi	r3, [r4, #0]
 80096a2:	b91e      	cbnz	r6, 80096ac <_printf_i+0x198>
 80096a4:	6823      	ldr	r3, [r4, #0]
 80096a6:	f023 0320 	bic.w	r3, r3, #32
 80096aa:	6023      	str	r3, [r4, #0]
 80096ac:	2310      	movs	r3, #16
 80096ae:	e7af      	b.n	8009610 <_printf_i+0xfc>
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	f043 0320 	orr.w	r3, r3, #32
 80096b6:	6023      	str	r3, [r4, #0]
 80096b8:	2378      	movs	r3, #120	; 0x78
 80096ba:	4828      	ldr	r0, [pc, #160]	; (800975c <_printf_i+0x248>)
 80096bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096c0:	e7e3      	b.n	800968a <_printf_i+0x176>
 80096c2:	0659      	lsls	r1, r3, #25
 80096c4:	bf48      	it	mi
 80096c6:	b2b6      	uxthmi	r6, r6
 80096c8:	e7e6      	b.n	8009698 <_printf_i+0x184>
 80096ca:	4615      	mov	r5, r2
 80096cc:	e7bb      	b.n	8009646 <_printf_i+0x132>
 80096ce:	682b      	ldr	r3, [r5, #0]
 80096d0:	6826      	ldr	r6, [r4, #0]
 80096d2:	1d18      	adds	r0, r3, #4
 80096d4:	6961      	ldr	r1, [r4, #20]
 80096d6:	6028      	str	r0, [r5, #0]
 80096d8:	0635      	lsls	r5, r6, #24
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	d501      	bpl.n	80096e2 <_printf_i+0x1ce>
 80096de:	6019      	str	r1, [r3, #0]
 80096e0:	e002      	b.n	80096e8 <_printf_i+0x1d4>
 80096e2:	0670      	lsls	r0, r6, #25
 80096e4:	d5fb      	bpl.n	80096de <_printf_i+0x1ca>
 80096e6:	8019      	strh	r1, [r3, #0]
 80096e8:	2300      	movs	r3, #0
 80096ea:	4615      	mov	r5, r2
 80096ec:	6123      	str	r3, [r4, #16]
 80096ee:	e7ba      	b.n	8009666 <_printf_i+0x152>
 80096f0:	682b      	ldr	r3, [r5, #0]
 80096f2:	2100      	movs	r1, #0
 80096f4:	1d1a      	adds	r2, r3, #4
 80096f6:	602a      	str	r2, [r5, #0]
 80096f8:	681d      	ldr	r5, [r3, #0]
 80096fa:	6862      	ldr	r2, [r4, #4]
 80096fc:	4628      	mov	r0, r5
 80096fe:	f000 f82f 	bl	8009760 <memchr>
 8009702:	b108      	cbz	r0, 8009708 <_printf_i+0x1f4>
 8009704:	1b40      	subs	r0, r0, r5
 8009706:	6060      	str	r0, [r4, #4]
 8009708:	6863      	ldr	r3, [r4, #4]
 800970a:	6123      	str	r3, [r4, #16]
 800970c:	2300      	movs	r3, #0
 800970e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009712:	e7a8      	b.n	8009666 <_printf_i+0x152>
 8009714:	462a      	mov	r2, r5
 8009716:	4649      	mov	r1, r9
 8009718:	4640      	mov	r0, r8
 800971a:	6923      	ldr	r3, [r4, #16]
 800971c:	47d0      	blx	sl
 800971e:	3001      	adds	r0, #1
 8009720:	d0ab      	beq.n	800967a <_printf_i+0x166>
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	079b      	lsls	r3, r3, #30
 8009726:	d413      	bmi.n	8009750 <_printf_i+0x23c>
 8009728:	68e0      	ldr	r0, [r4, #12]
 800972a:	9b03      	ldr	r3, [sp, #12]
 800972c:	4298      	cmp	r0, r3
 800972e:	bfb8      	it	lt
 8009730:	4618      	movlt	r0, r3
 8009732:	e7a4      	b.n	800967e <_printf_i+0x16a>
 8009734:	2301      	movs	r3, #1
 8009736:	4632      	mov	r2, r6
 8009738:	4649      	mov	r1, r9
 800973a:	4640      	mov	r0, r8
 800973c:	47d0      	blx	sl
 800973e:	3001      	adds	r0, #1
 8009740:	d09b      	beq.n	800967a <_printf_i+0x166>
 8009742:	3501      	adds	r5, #1
 8009744:	68e3      	ldr	r3, [r4, #12]
 8009746:	9903      	ldr	r1, [sp, #12]
 8009748:	1a5b      	subs	r3, r3, r1
 800974a:	42ab      	cmp	r3, r5
 800974c:	dcf2      	bgt.n	8009734 <_printf_i+0x220>
 800974e:	e7eb      	b.n	8009728 <_printf_i+0x214>
 8009750:	2500      	movs	r5, #0
 8009752:	f104 0619 	add.w	r6, r4, #25
 8009756:	e7f5      	b.n	8009744 <_printf_i+0x230>
 8009758:	08009ca9 	.word	0x08009ca9
 800975c:	08009cba 	.word	0x08009cba

08009760 <memchr>:
 8009760:	4603      	mov	r3, r0
 8009762:	b510      	push	{r4, lr}
 8009764:	b2c9      	uxtb	r1, r1
 8009766:	4402      	add	r2, r0
 8009768:	4293      	cmp	r3, r2
 800976a:	4618      	mov	r0, r3
 800976c:	d101      	bne.n	8009772 <memchr+0x12>
 800976e:	2000      	movs	r0, #0
 8009770:	e003      	b.n	800977a <memchr+0x1a>
 8009772:	7804      	ldrb	r4, [r0, #0]
 8009774:	3301      	adds	r3, #1
 8009776:	428c      	cmp	r4, r1
 8009778:	d1f6      	bne.n	8009768 <memchr+0x8>
 800977a:	bd10      	pop	{r4, pc}

0800977c <memcpy>:
 800977c:	440a      	add	r2, r1
 800977e:	4291      	cmp	r1, r2
 8009780:	f100 33ff 	add.w	r3, r0, #4294967295
 8009784:	d100      	bne.n	8009788 <memcpy+0xc>
 8009786:	4770      	bx	lr
 8009788:	b510      	push	{r4, lr}
 800978a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800978e:	4291      	cmp	r1, r2
 8009790:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009794:	d1f9      	bne.n	800978a <memcpy+0xe>
 8009796:	bd10      	pop	{r4, pc}

08009798 <memmove>:
 8009798:	4288      	cmp	r0, r1
 800979a:	b510      	push	{r4, lr}
 800979c:	eb01 0402 	add.w	r4, r1, r2
 80097a0:	d902      	bls.n	80097a8 <memmove+0x10>
 80097a2:	4284      	cmp	r4, r0
 80097a4:	4623      	mov	r3, r4
 80097a6:	d807      	bhi.n	80097b8 <memmove+0x20>
 80097a8:	1e43      	subs	r3, r0, #1
 80097aa:	42a1      	cmp	r1, r4
 80097ac:	d008      	beq.n	80097c0 <memmove+0x28>
 80097ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097b6:	e7f8      	b.n	80097aa <memmove+0x12>
 80097b8:	4601      	mov	r1, r0
 80097ba:	4402      	add	r2, r0
 80097bc:	428a      	cmp	r2, r1
 80097be:	d100      	bne.n	80097c2 <memmove+0x2a>
 80097c0:	bd10      	pop	{r4, pc}
 80097c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097ca:	e7f7      	b.n	80097bc <memmove+0x24>

080097cc <_free_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	4605      	mov	r5, r0
 80097d0:	2900      	cmp	r1, #0
 80097d2:	d040      	beq.n	8009856 <_free_r+0x8a>
 80097d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097d8:	1f0c      	subs	r4, r1, #4
 80097da:	2b00      	cmp	r3, #0
 80097dc:	bfb8      	it	lt
 80097de:	18e4      	addlt	r4, r4, r3
 80097e0:	f000 f910 	bl	8009a04 <__malloc_lock>
 80097e4:	4a1c      	ldr	r2, [pc, #112]	; (8009858 <_free_r+0x8c>)
 80097e6:	6813      	ldr	r3, [r2, #0]
 80097e8:	b933      	cbnz	r3, 80097f8 <_free_r+0x2c>
 80097ea:	6063      	str	r3, [r4, #4]
 80097ec:	6014      	str	r4, [r2, #0]
 80097ee:	4628      	mov	r0, r5
 80097f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097f4:	f000 b90c 	b.w	8009a10 <__malloc_unlock>
 80097f8:	42a3      	cmp	r3, r4
 80097fa:	d908      	bls.n	800980e <_free_r+0x42>
 80097fc:	6820      	ldr	r0, [r4, #0]
 80097fe:	1821      	adds	r1, r4, r0
 8009800:	428b      	cmp	r3, r1
 8009802:	bf01      	itttt	eq
 8009804:	6819      	ldreq	r1, [r3, #0]
 8009806:	685b      	ldreq	r3, [r3, #4]
 8009808:	1809      	addeq	r1, r1, r0
 800980a:	6021      	streq	r1, [r4, #0]
 800980c:	e7ed      	b.n	80097ea <_free_r+0x1e>
 800980e:	461a      	mov	r2, r3
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	b10b      	cbz	r3, 8009818 <_free_r+0x4c>
 8009814:	42a3      	cmp	r3, r4
 8009816:	d9fa      	bls.n	800980e <_free_r+0x42>
 8009818:	6811      	ldr	r1, [r2, #0]
 800981a:	1850      	adds	r0, r2, r1
 800981c:	42a0      	cmp	r0, r4
 800981e:	d10b      	bne.n	8009838 <_free_r+0x6c>
 8009820:	6820      	ldr	r0, [r4, #0]
 8009822:	4401      	add	r1, r0
 8009824:	1850      	adds	r0, r2, r1
 8009826:	4283      	cmp	r3, r0
 8009828:	6011      	str	r1, [r2, #0]
 800982a:	d1e0      	bne.n	80097ee <_free_r+0x22>
 800982c:	6818      	ldr	r0, [r3, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	4401      	add	r1, r0
 8009832:	6011      	str	r1, [r2, #0]
 8009834:	6053      	str	r3, [r2, #4]
 8009836:	e7da      	b.n	80097ee <_free_r+0x22>
 8009838:	d902      	bls.n	8009840 <_free_r+0x74>
 800983a:	230c      	movs	r3, #12
 800983c:	602b      	str	r3, [r5, #0]
 800983e:	e7d6      	b.n	80097ee <_free_r+0x22>
 8009840:	6820      	ldr	r0, [r4, #0]
 8009842:	1821      	adds	r1, r4, r0
 8009844:	428b      	cmp	r3, r1
 8009846:	bf01      	itttt	eq
 8009848:	6819      	ldreq	r1, [r3, #0]
 800984a:	685b      	ldreq	r3, [r3, #4]
 800984c:	1809      	addeq	r1, r1, r0
 800984e:	6021      	streq	r1, [r4, #0]
 8009850:	6063      	str	r3, [r4, #4]
 8009852:	6054      	str	r4, [r2, #4]
 8009854:	e7cb      	b.n	80097ee <_free_r+0x22>
 8009856:	bd38      	pop	{r3, r4, r5, pc}
 8009858:	20001420 	.word	0x20001420

0800985c <sbrk_aligned>:
 800985c:	b570      	push	{r4, r5, r6, lr}
 800985e:	4e0e      	ldr	r6, [pc, #56]	; (8009898 <sbrk_aligned+0x3c>)
 8009860:	460c      	mov	r4, r1
 8009862:	6831      	ldr	r1, [r6, #0]
 8009864:	4605      	mov	r5, r0
 8009866:	b911      	cbnz	r1, 800986e <sbrk_aligned+0x12>
 8009868:	f000 f8bc 	bl	80099e4 <_sbrk_r>
 800986c:	6030      	str	r0, [r6, #0]
 800986e:	4621      	mov	r1, r4
 8009870:	4628      	mov	r0, r5
 8009872:	f000 f8b7 	bl	80099e4 <_sbrk_r>
 8009876:	1c43      	adds	r3, r0, #1
 8009878:	d00a      	beq.n	8009890 <sbrk_aligned+0x34>
 800987a:	1cc4      	adds	r4, r0, #3
 800987c:	f024 0403 	bic.w	r4, r4, #3
 8009880:	42a0      	cmp	r0, r4
 8009882:	d007      	beq.n	8009894 <sbrk_aligned+0x38>
 8009884:	1a21      	subs	r1, r4, r0
 8009886:	4628      	mov	r0, r5
 8009888:	f000 f8ac 	bl	80099e4 <_sbrk_r>
 800988c:	3001      	adds	r0, #1
 800988e:	d101      	bne.n	8009894 <sbrk_aligned+0x38>
 8009890:	f04f 34ff 	mov.w	r4, #4294967295
 8009894:	4620      	mov	r0, r4
 8009896:	bd70      	pop	{r4, r5, r6, pc}
 8009898:	20001424 	.word	0x20001424

0800989c <_malloc_r>:
 800989c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a0:	1ccd      	adds	r5, r1, #3
 80098a2:	f025 0503 	bic.w	r5, r5, #3
 80098a6:	3508      	adds	r5, #8
 80098a8:	2d0c      	cmp	r5, #12
 80098aa:	bf38      	it	cc
 80098ac:	250c      	movcc	r5, #12
 80098ae:	2d00      	cmp	r5, #0
 80098b0:	4607      	mov	r7, r0
 80098b2:	db01      	blt.n	80098b8 <_malloc_r+0x1c>
 80098b4:	42a9      	cmp	r1, r5
 80098b6:	d905      	bls.n	80098c4 <_malloc_r+0x28>
 80098b8:	230c      	movs	r3, #12
 80098ba:	2600      	movs	r6, #0
 80098bc:	603b      	str	r3, [r7, #0]
 80098be:	4630      	mov	r0, r6
 80098c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098c4:	4e2e      	ldr	r6, [pc, #184]	; (8009980 <_malloc_r+0xe4>)
 80098c6:	f000 f89d 	bl	8009a04 <__malloc_lock>
 80098ca:	6833      	ldr	r3, [r6, #0]
 80098cc:	461c      	mov	r4, r3
 80098ce:	bb34      	cbnz	r4, 800991e <_malloc_r+0x82>
 80098d0:	4629      	mov	r1, r5
 80098d2:	4638      	mov	r0, r7
 80098d4:	f7ff ffc2 	bl	800985c <sbrk_aligned>
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	4604      	mov	r4, r0
 80098dc:	d14d      	bne.n	800997a <_malloc_r+0xde>
 80098de:	6834      	ldr	r4, [r6, #0]
 80098e0:	4626      	mov	r6, r4
 80098e2:	2e00      	cmp	r6, #0
 80098e4:	d140      	bne.n	8009968 <_malloc_r+0xcc>
 80098e6:	6823      	ldr	r3, [r4, #0]
 80098e8:	4631      	mov	r1, r6
 80098ea:	4638      	mov	r0, r7
 80098ec:	eb04 0803 	add.w	r8, r4, r3
 80098f0:	f000 f878 	bl	80099e4 <_sbrk_r>
 80098f4:	4580      	cmp	r8, r0
 80098f6:	d13a      	bne.n	800996e <_malloc_r+0xd2>
 80098f8:	6821      	ldr	r1, [r4, #0]
 80098fa:	3503      	adds	r5, #3
 80098fc:	1a6d      	subs	r5, r5, r1
 80098fe:	f025 0503 	bic.w	r5, r5, #3
 8009902:	3508      	adds	r5, #8
 8009904:	2d0c      	cmp	r5, #12
 8009906:	bf38      	it	cc
 8009908:	250c      	movcc	r5, #12
 800990a:	4638      	mov	r0, r7
 800990c:	4629      	mov	r1, r5
 800990e:	f7ff ffa5 	bl	800985c <sbrk_aligned>
 8009912:	3001      	adds	r0, #1
 8009914:	d02b      	beq.n	800996e <_malloc_r+0xd2>
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	442b      	add	r3, r5
 800991a:	6023      	str	r3, [r4, #0]
 800991c:	e00e      	b.n	800993c <_malloc_r+0xa0>
 800991e:	6822      	ldr	r2, [r4, #0]
 8009920:	1b52      	subs	r2, r2, r5
 8009922:	d41e      	bmi.n	8009962 <_malloc_r+0xc6>
 8009924:	2a0b      	cmp	r2, #11
 8009926:	d916      	bls.n	8009956 <_malloc_r+0xba>
 8009928:	1961      	adds	r1, r4, r5
 800992a:	42a3      	cmp	r3, r4
 800992c:	6025      	str	r5, [r4, #0]
 800992e:	bf18      	it	ne
 8009930:	6059      	strne	r1, [r3, #4]
 8009932:	6863      	ldr	r3, [r4, #4]
 8009934:	bf08      	it	eq
 8009936:	6031      	streq	r1, [r6, #0]
 8009938:	5162      	str	r2, [r4, r5]
 800993a:	604b      	str	r3, [r1, #4]
 800993c:	4638      	mov	r0, r7
 800993e:	f104 060b 	add.w	r6, r4, #11
 8009942:	f000 f865 	bl	8009a10 <__malloc_unlock>
 8009946:	f026 0607 	bic.w	r6, r6, #7
 800994a:	1d23      	adds	r3, r4, #4
 800994c:	1af2      	subs	r2, r6, r3
 800994e:	d0b6      	beq.n	80098be <_malloc_r+0x22>
 8009950:	1b9b      	subs	r3, r3, r6
 8009952:	50a3      	str	r3, [r4, r2]
 8009954:	e7b3      	b.n	80098be <_malloc_r+0x22>
 8009956:	6862      	ldr	r2, [r4, #4]
 8009958:	42a3      	cmp	r3, r4
 800995a:	bf0c      	ite	eq
 800995c:	6032      	streq	r2, [r6, #0]
 800995e:	605a      	strne	r2, [r3, #4]
 8009960:	e7ec      	b.n	800993c <_malloc_r+0xa0>
 8009962:	4623      	mov	r3, r4
 8009964:	6864      	ldr	r4, [r4, #4]
 8009966:	e7b2      	b.n	80098ce <_malloc_r+0x32>
 8009968:	4634      	mov	r4, r6
 800996a:	6876      	ldr	r6, [r6, #4]
 800996c:	e7b9      	b.n	80098e2 <_malloc_r+0x46>
 800996e:	230c      	movs	r3, #12
 8009970:	4638      	mov	r0, r7
 8009972:	603b      	str	r3, [r7, #0]
 8009974:	f000 f84c 	bl	8009a10 <__malloc_unlock>
 8009978:	e7a1      	b.n	80098be <_malloc_r+0x22>
 800997a:	6025      	str	r5, [r4, #0]
 800997c:	e7de      	b.n	800993c <_malloc_r+0xa0>
 800997e:	bf00      	nop
 8009980:	20001420 	.word	0x20001420

08009984 <_realloc_r>:
 8009984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009988:	4680      	mov	r8, r0
 800998a:	4614      	mov	r4, r2
 800998c:	460e      	mov	r6, r1
 800998e:	b921      	cbnz	r1, 800999a <_realloc_r+0x16>
 8009990:	4611      	mov	r1, r2
 8009992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009996:	f7ff bf81 	b.w	800989c <_malloc_r>
 800999a:	b92a      	cbnz	r2, 80099a8 <_realloc_r+0x24>
 800999c:	f7ff ff16 	bl	80097cc <_free_r>
 80099a0:	4625      	mov	r5, r4
 80099a2:	4628      	mov	r0, r5
 80099a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a8:	f000 f838 	bl	8009a1c <_malloc_usable_size_r>
 80099ac:	4284      	cmp	r4, r0
 80099ae:	4607      	mov	r7, r0
 80099b0:	d802      	bhi.n	80099b8 <_realloc_r+0x34>
 80099b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099b6:	d812      	bhi.n	80099de <_realloc_r+0x5a>
 80099b8:	4621      	mov	r1, r4
 80099ba:	4640      	mov	r0, r8
 80099bc:	f7ff ff6e 	bl	800989c <_malloc_r>
 80099c0:	4605      	mov	r5, r0
 80099c2:	2800      	cmp	r0, #0
 80099c4:	d0ed      	beq.n	80099a2 <_realloc_r+0x1e>
 80099c6:	42bc      	cmp	r4, r7
 80099c8:	4622      	mov	r2, r4
 80099ca:	4631      	mov	r1, r6
 80099cc:	bf28      	it	cs
 80099ce:	463a      	movcs	r2, r7
 80099d0:	f7ff fed4 	bl	800977c <memcpy>
 80099d4:	4631      	mov	r1, r6
 80099d6:	4640      	mov	r0, r8
 80099d8:	f7ff fef8 	bl	80097cc <_free_r>
 80099dc:	e7e1      	b.n	80099a2 <_realloc_r+0x1e>
 80099de:	4635      	mov	r5, r6
 80099e0:	e7df      	b.n	80099a2 <_realloc_r+0x1e>
	...

080099e4 <_sbrk_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	2300      	movs	r3, #0
 80099e8:	4d05      	ldr	r5, [pc, #20]	; (8009a00 <_sbrk_r+0x1c>)
 80099ea:	4604      	mov	r4, r0
 80099ec:	4608      	mov	r0, r1
 80099ee:	602b      	str	r3, [r5, #0]
 80099f0:	f7f7 fa4c 	bl	8000e8c <_sbrk>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d102      	bne.n	80099fe <_sbrk_r+0x1a>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	b103      	cbz	r3, 80099fe <_sbrk_r+0x1a>
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	20001428 	.word	0x20001428

08009a04 <__malloc_lock>:
 8009a04:	4801      	ldr	r0, [pc, #4]	; (8009a0c <__malloc_lock+0x8>)
 8009a06:	f000 b811 	b.w	8009a2c <__retarget_lock_acquire_recursive>
 8009a0a:	bf00      	nop
 8009a0c:	2000142c 	.word	0x2000142c

08009a10 <__malloc_unlock>:
 8009a10:	4801      	ldr	r0, [pc, #4]	; (8009a18 <__malloc_unlock+0x8>)
 8009a12:	f000 b80c 	b.w	8009a2e <__retarget_lock_release_recursive>
 8009a16:	bf00      	nop
 8009a18:	2000142c 	.word	0x2000142c

08009a1c <_malloc_usable_size_r>:
 8009a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a20:	1f18      	subs	r0, r3, #4
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	bfbc      	itt	lt
 8009a26:	580b      	ldrlt	r3, [r1, r0]
 8009a28:	18c0      	addlt	r0, r0, r3
 8009a2a:	4770      	bx	lr

08009a2c <__retarget_lock_acquire_recursive>:
 8009a2c:	4770      	bx	lr

08009a2e <__retarget_lock_release_recursive>:
 8009a2e:	4770      	bx	lr

08009a30 <_init>:
 8009a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a32:	bf00      	nop
 8009a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a36:	bc08      	pop	{r3}
 8009a38:	469e      	mov	lr, r3
 8009a3a:	4770      	bx	lr

08009a3c <_fini>:
 8009a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3e:	bf00      	nop
 8009a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a42:	bc08      	pop	{r3}
 8009a44:	469e      	mov	lr, r3
 8009a46:	4770      	bx	lr
